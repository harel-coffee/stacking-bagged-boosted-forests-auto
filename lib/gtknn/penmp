# 1 "main.cu"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 1
# 62 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/host_config.h" 1
# 151 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/host_config.h"
# 1 "/usr/include/features.h" 1 3 4
# 374 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 385 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 386 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 375 "/usr/include/features.h" 2 3 4
# 398 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 399 "/usr/include/features.h" 2 3 4
# 152 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/host_config.h" 2
# 63 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 56 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_types.h" 1
# 53 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_types.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/host_defines.h" 1
# 54 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_types.h" 2







enum __attribute__((device_builtin)) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};
# 57 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 1 3 4
# 168 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 143 "/usr/include/limits.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 1 3 4
# 160 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 39 "/usr/include/x86_64-linux-gnu/bits/local_lim.h" 2 3 4
# 161 "/usr/include/x86_64-linux-gnu/bits/posix1_lim.h" 2 3 4
# 144 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/posix2_lim.h" 1 3 4
# 148 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/xopen_lim.h" 2 3 4
# 152 "/usr/include/limits.h" 2 3 4
# 169 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 2 3 4
# 71 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 147 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 212 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 72 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h" 2
# 150 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
enum __attribute__((device_builtin)) cudaError
{





    cudaSuccess = 0,





    cudaErrorMissingConfiguration = 1,





    cudaErrorMemoryAllocation = 2,





    cudaErrorInitializationError = 3,
# 185 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorLaunchFailure = 4,
# 194 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorPriorLaunchFailure = 5,
# 204 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorLaunchTimeout = 6,
# 213 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorLaunchOutOfResources = 7,





    cudaErrorInvalidDeviceFunction = 8,
# 228 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorInvalidConfiguration = 9,





    cudaErrorInvalidDevice = 10,





    cudaErrorInvalidValue = 11,





    cudaErrorInvalidPitchValue = 12,





    cudaErrorInvalidSymbol = 13,




    cudaErrorMapBufferObjectFailed = 14,




    cudaErrorUnmapBufferObjectFailed = 15,





    cudaErrorInvalidHostPointer = 16,





    cudaErrorInvalidDevicePointer = 17,





    cudaErrorInvalidTexture = 18,





    cudaErrorInvalidTextureBinding = 19,






    cudaErrorInvalidChannelDescriptor = 20,





    cudaErrorInvalidMemcpyDirection = 21,
# 309 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorAddressOfConstant = 22,
# 318 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorTextureFetchFailed = 23,
# 327 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorTextureNotBound = 24,
# 336 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorSynchronizationError = 25,





    cudaErrorInvalidFilterSetting = 26,





    cudaErrorInvalidNormSetting = 27,







    cudaErrorMixedDeviceExecution = 28,






    cudaErrorCudartUnloading = 29,




    cudaErrorUnknown = 30,







    cudaErrorNotYetImplemented = 31,
# 385 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorMemoryValueTooLarge = 32,






    cudaErrorInvalidResourceHandle = 33,







    cudaErrorNotReady = 34,






    cudaErrorInsufficientDriver = 35,
# 420 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorSetOnActiveProcess = 36,





    cudaErrorInvalidSurface = 37,





    cudaErrorNoDevice = 38,





    cudaErrorECCUncorrectable = 39,




    cudaErrorSharedObjectSymbolNotFound = 40,




    cudaErrorSharedObjectInitFailed = 41,





    cudaErrorUnsupportedLimit = 42,





    cudaErrorDuplicateVariableName = 43,





    cudaErrorDuplicateTextureName = 44,





    cudaErrorDuplicateSurfaceName = 45,
# 482 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorDevicesUnavailable = 46,




    cudaErrorInvalidKernelImage = 47,







    cudaErrorNoKernelImageForDevice = 48,
# 508 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorIncompatibleDriverContext = 49,






    cudaErrorPeerAccessAlreadyEnabled = 50,






    cudaErrorPeerAccessNotEnabled = 51,





    cudaErrorDeviceAlreadyInUse = 54,






    cudaErrorProfilerDisabled = 55,







    cudaErrorProfilerNotInitialized = 56,






    cudaErrorProfilerAlreadyStarted = 57,






     cudaErrorProfilerAlreadyStopped = 58,







    cudaErrorAssert = 59,






    cudaErrorTooManyPeers = 60,





    cudaErrorHostMemoryAlreadyRegistered = 61,





    cudaErrorHostMemoryNotRegistered = 62,




    cudaErrorOperatingSystem = 63,





    cudaErrorPeerAccessUnsupported = 64,






    cudaErrorLaunchMaxDepthExceeded = 65,







    cudaErrorLaunchFileScopedTex = 66,







    cudaErrorLaunchFileScopedSurf = 67,
# 633 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorSyncDepthExceeded = 68,
# 645 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorLaunchPendingCountExceeded = 69,




    cudaErrorNotPermitted = 70,





    cudaErrorNotSupported = 71,
# 665 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorHardwareStackError = 72,







    cudaErrorIllegalInstruction = 73,
# 682 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorMisalignedAddress = 74,
# 693 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    cudaErrorInvalidAddressSpace = 75,







    cudaErrorInvalidPc = 76,







    cudaErrorIllegalAddress = 77,





    cudaErrorInvalidPtx = 78,




    cudaErrorInvalidGraphicsContext = 79,





    cudaErrorStartupFailure = 0x7f,







    cudaErrorApiFailureBase = 10000
};




enum __attribute__((device_builtin)) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned = 0,
    cudaChannelFormatKindUnsigned = 1,
    cudaChannelFormatKindFloat = 2,
    cudaChannelFormatKindNone = 3
};




struct __attribute__((device_builtin)) cudaChannelFormatDesc
{
    int x;
    int y;
    int z;
    int w;
    enum cudaChannelFormatKind f;
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __attribute__((device_builtin)) cudaMemoryType
{
    cudaMemoryTypeHost = 1,
    cudaMemoryTypeDevice = 2
};




enum __attribute__((device_builtin)) cudaMemcpyKind
{
    cudaMemcpyHostToHost = 0,
    cudaMemcpyHostToDevice = 1,
    cudaMemcpyDeviceToHost = 2,
    cudaMemcpyDeviceToDevice = 3,
    cudaMemcpyDefault = 4
};






struct __attribute__((device_builtin)) cudaPitchedPtr
{
    void *ptr;
    size_t pitch;
    size_t xsize;
    size_t ysize;
};






struct __attribute__((device_builtin)) cudaExtent
{
    size_t width;
    size_t height;
    size_t depth;
};






struct __attribute__((device_builtin)) cudaPos
{
    size_t x;
    size_t y;
    size_t z;
};




struct __attribute__((device_builtin)) cudaMemcpy3DParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;

    struct cudaExtent extent;
    enum cudaMemcpyKind kind;
};




struct __attribute__((device_builtin)) cudaMemcpy3DPeerParms
{
    cudaArray_t srcArray;
    struct cudaPos srcPos;
    struct cudaPitchedPtr srcPtr;
    int srcDevice;

    cudaArray_t dstArray;
    struct cudaPos dstPos;
    struct cudaPitchedPtr dstPtr;
    int dstDevice;

    struct cudaExtent extent;
};




struct cudaGraphicsResource;




enum __attribute__((device_builtin)) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone = 0,
    cudaGraphicsRegisterFlagsReadOnly = 1,
    cudaGraphicsRegisterFlagsWriteDiscard = 2,
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,
    cudaGraphicsRegisterFlagsTextureGather = 8
};




enum __attribute__((device_builtin)) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone = 0,
    cudaGraphicsMapFlagsReadOnly = 1,
    cudaGraphicsMapFlagsWriteDiscard = 2
};




enum __attribute__((device_builtin)) cudaGraphicsCubeFace
{
    cudaGraphicsCubeFacePositiveX = 0x00,
    cudaGraphicsCubeFaceNegativeX = 0x01,
    cudaGraphicsCubeFacePositiveY = 0x02,
    cudaGraphicsCubeFaceNegativeY = 0x03,
    cudaGraphicsCubeFacePositiveZ = 0x04,
    cudaGraphicsCubeFaceNegativeZ = 0x05
};




enum __attribute__((device_builtin)) cudaResourceType
{
    cudaResourceTypeArray = 0x00,
    cudaResourceTypeMipmappedArray = 0x01,
    cudaResourceTypeLinear = 0x02,
    cudaResourceTypePitch2D = 0x03
};




enum __attribute__((device_builtin)) cudaResourceViewFormat
{
    cudaResViewFormatNone = 0x00,
    cudaResViewFormatUnsignedChar1 = 0x01,
    cudaResViewFormatUnsignedChar2 = 0x02,
    cudaResViewFormatUnsignedChar4 = 0x03,
    cudaResViewFormatSignedChar1 = 0x04,
    cudaResViewFormatSignedChar2 = 0x05,
    cudaResViewFormatSignedChar4 = 0x06,
    cudaResViewFormatUnsignedShort1 = 0x07,
    cudaResViewFormatUnsignedShort2 = 0x08,
    cudaResViewFormatUnsignedShort4 = 0x09,
    cudaResViewFormatSignedShort1 = 0x0a,
    cudaResViewFormatSignedShort2 = 0x0b,
    cudaResViewFormatSignedShort4 = 0x0c,
    cudaResViewFormatUnsignedInt1 = 0x0d,
    cudaResViewFormatUnsignedInt2 = 0x0e,
    cudaResViewFormatUnsignedInt4 = 0x0f,
    cudaResViewFormatSignedInt1 = 0x10,
    cudaResViewFormatSignedInt2 = 0x11,
    cudaResViewFormatSignedInt4 = 0x12,
    cudaResViewFormatHalf1 = 0x13,
    cudaResViewFormatHalf2 = 0x14,
    cudaResViewFormatHalf4 = 0x15,
    cudaResViewFormatFloat1 = 0x16,
    cudaResViewFormatFloat2 = 0x17,
    cudaResViewFormatFloat4 = 0x18,
    cudaResViewFormatUnsignedBlockCompressed1 = 0x19,
    cudaResViewFormatUnsignedBlockCompressed2 = 0x1a,
    cudaResViewFormatUnsignedBlockCompressed3 = 0x1b,
    cudaResViewFormatUnsignedBlockCompressed4 = 0x1c,
    cudaResViewFormatSignedBlockCompressed4 = 0x1d,
    cudaResViewFormatUnsignedBlockCompressed5 = 0x1e,
    cudaResViewFormatSignedBlockCompressed5 = 0x1f,
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20,
    cudaResViewFormatSignedBlockCompressed6H = 0x21,
    cudaResViewFormatUnsignedBlockCompressed7 = 0x22
};




struct __attribute__((device_builtin)) cudaResourceDesc {
 enum cudaResourceType resType;

 union {
  struct {
   cudaArray_t array;
  } array;
        struct {
            cudaMipmappedArray_t mipmap;
        } mipmap;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t sizeInBytes;
  } linear;
  struct {
   void *devPtr;
   struct cudaChannelFormatDesc desc;
   size_t width;
   size_t height;
   size_t pitchInBytes;
  } pitch2D;
 } res;
};




struct __attribute__((device_builtin)) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
};




struct __attribute__((device_builtin)) cudaPointerAttributes
{




    enum cudaMemoryType memoryType;
# 1033 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
    int device;





    void *devicePointer;





    void *hostPointer;




    int isManaged;
};




struct __attribute__((device_builtin)) cudaFuncAttributes
{





   size_t sharedSizeBytes;





   size_t constSizeBytes;




   size_t localSizeBytes;






   int maxThreadsPerBlock;




   int numRegs;






   int ptxVersion;






   int binaryVersion;





   int cacheModeCA;
};




enum __attribute__((device_builtin)) cudaFuncCache
{
    cudaFuncCachePreferNone = 0,
    cudaFuncCachePreferShared = 1,
    cudaFuncCachePreferL1 = 2,
    cudaFuncCachePreferEqual = 3
};





enum __attribute__((device_builtin)) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault = 0,
    cudaSharedMemBankSizeFourByte = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __attribute__((device_builtin)) cudaComputeMode
{
    cudaComputeModeDefault = 0,
    cudaComputeModeExclusive = 1,
    cudaComputeModeProhibited = 2,
    cudaComputeModeExclusiveProcess = 3
};




enum __attribute__((device_builtin)) cudaLimit
{
    cudaLimitStackSize = 0x00,
    cudaLimitPrintfFifoSize = 0x01,
    cudaLimitMallocHeapSize = 0x02,
    cudaLimitDevRuntimeSyncDepth = 0x03,
    cudaLimitDevRuntimePendingLaunchCount = 0x04
};




enum __attribute__((device_builtin)) cudaOutputMode
{
    cudaKeyValuePair = 0x00,
    cudaCSV = 0x01
};




enum __attribute__((device_builtin)) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock = 1,
    cudaDevAttrMaxBlockDimX = 2,
    cudaDevAttrMaxBlockDimY = 3,
    cudaDevAttrMaxBlockDimZ = 4,
    cudaDevAttrMaxGridDimX = 5,
    cudaDevAttrMaxGridDimY = 6,
    cudaDevAttrMaxGridDimZ = 7,
    cudaDevAttrMaxSharedMemoryPerBlock = 8,
    cudaDevAttrTotalConstantMemory = 9,
    cudaDevAttrWarpSize = 10,
    cudaDevAttrMaxPitch = 11,
    cudaDevAttrMaxRegistersPerBlock = 12,
    cudaDevAttrClockRate = 13,
    cudaDevAttrTextureAlignment = 14,
    cudaDevAttrGpuOverlap = 15,
    cudaDevAttrMultiProcessorCount = 16,
    cudaDevAttrKernelExecTimeout = 17,
    cudaDevAttrIntegrated = 18,
    cudaDevAttrCanMapHostMemory = 19,
    cudaDevAttrComputeMode = 20,
    cudaDevAttrMaxTexture1DWidth = 21,
    cudaDevAttrMaxTexture2DWidth = 22,
    cudaDevAttrMaxTexture2DHeight = 23,
    cudaDevAttrMaxTexture3DWidth = 24,
    cudaDevAttrMaxTexture3DHeight = 25,
    cudaDevAttrMaxTexture3DDepth = 26,
    cudaDevAttrMaxTexture2DLayeredWidth = 27,
    cudaDevAttrMaxTexture2DLayeredHeight = 28,
    cudaDevAttrMaxTexture2DLayeredLayers = 29,
    cudaDevAttrSurfaceAlignment = 30,
    cudaDevAttrConcurrentKernels = 31,
    cudaDevAttrEccEnabled = 32,
    cudaDevAttrPciBusId = 33,
    cudaDevAttrPciDeviceId = 34,
    cudaDevAttrTccDriver = 35,
    cudaDevAttrMemoryClockRate = 36,
    cudaDevAttrGlobalMemoryBusWidth = 37,
    cudaDevAttrL2CacheSize = 38,
    cudaDevAttrMaxThreadsPerMultiProcessor = 39,
    cudaDevAttrAsyncEngineCount = 40,
    cudaDevAttrUnifiedAddressing = 41,
    cudaDevAttrMaxTexture1DLayeredWidth = 42,
    cudaDevAttrMaxTexture1DLayeredLayers = 43,
    cudaDevAttrMaxTexture2DGatherWidth = 45,
    cudaDevAttrMaxTexture2DGatherHeight = 46,
    cudaDevAttrMaxTexture3DWidthAlt = 47,
    cudaDevAttrMaxTexture3DHeightAlt = 48,
    cudaDevAttrMaxTexture3DDepthAlt = 49,
    cudaDevAttrPciDomainId = 50,
    cudaDevAttrTexturePitchAlignment = 51,
    cudaDevAttrMaxTextureCubemapWidth = 52,
    cudaDevAttrMaxTextureCubemapLayeredWidth = 53,
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54,
    cudaDevAttrMaxSurface1DWidth = 55,
    cudaDevAttrMaxSurface2DWidth = 56,
    cudaDevAttrMaxSurface2DHeight = 57,
    cudaDevAttrMaxSurface3DWidth = 58,
    cudaDevAttrMaxSurface3DHeight = 59,
    cudaDevAttrMaxSurface3DDepth = 60,
    cudaDevAttrMaxSurface1DLayeredWidth = 61,
    cudaDevAttrMaxSurface1DLayeredLayers = 62,
    cudaDevAttrMaxSurface2DLayeredWidth = 63,
    cudaDevAttrMaxSurface2DLayeredHeight = 64,
    cudaDevAttrMaxSurface2DLayeredLayers = 65,
    cudaDevAttrMaxSurfaceCubemapWidth = 66,
    cudaDevAttrMaxSurfaceCubemapLayeredWidth = 67,
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68,
    cudaDevAttrMaxTexture1DLinearWidth = 69,
    cudaDevAttrMaxTexture2DLinearWidth = 70,
    cudaDevAttrMaxTexture2DLinearHeight = 71,
    cudaDevAttrMaxTexture2DLinearPitch = 72,
    cudaDevAttrMaxTexture2DMipmappedWidth = 73,
    cudaDevAttrMaxTexture2DMipmappedHeight = 74,
    cudaDevAttrComputeCapabilityMajor = 75,
    cudaDevAttrComputeCapabilityMinor = 76,
    cudaDevAttrMaxTexture1DMipmappedWidth = 77,
    cudaDevAttrStreamPrioritiesSupported = 78,
    cudaDevAttrGlobalL1CacheSupported = 79,
    cudaDevAttrLocalL1CacheSupported = 80,
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81,
    cudaDevAttrMaxRegistersPerMultiprocessor = 82,
    cudaDevAttrManagedMemory = 83,
    cudaDevAttrIsMultiGpuBoard = 84,
    cudaDevAttrMultiGpuBoardGroupID = 85
};




struct __attribute__((device_builtin)) cudaDeviceProp
{
    char name[256];
    size_t totalGlobalMem;
    size_t sharedMemPerBlock;
    int regsPerBlock;
    int warpSize;
    size_t memPitch;
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int clockRate;
    size_t totalConstMem;
    int major;
    int minor;
    size_t textureAlignment;
    size_t texturePitchAlignment;
    int deviceOverlap;
    int multiProcessorCount;
    int kernelExecTimeoutEnabled;
    int integrated;
    int canMapHostMemory;
    int computeMode;
    int maxTexture1D;
    int maxTexture1DMipmap;
    int maxTexture1DLinear;
    int maxTexture2D[2];
    int maxTexture2DMipmap[2];
    int maxTexture2DLinear[3];
    int maxTexture2DGather[2];
    int maxTexture3D[3];
    int maxTexture3DAlt[3];
    int maxTextureCubemap;
    int maxTexture1DLayered[2];
    int maxTexture2DLayered[3];
    int maxTextureCubemapLayered[2];
    int maxSurface1D;
    int maxSurface2D[2];
    int maxSurface3D[3];
    int maxSurface1DLayered[2];
    int maxSurface2DLayered[3];
    int maxSurfaceCubemap;
    int maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;
    int concurrentKernels;
    int ECCEnabled;
    int pciBusID;
    int pciDeviceID;
    int pciDomainID;
    int tccDriver;
    int asyncEngineCount;
    int unifiedAddressing;
    int memoryClockRate;
    int memoryBusWidth;
    int l2CacheSize;
    int maxThreadsPerMultiProcessor;
    int streamPrioritiesSupported;
    int globalL1CacheSupported;
    int localL1CacheSupported;
    size_t sharedMemPerMultiprocessor;
    int regsPerMultiprocessor;
    int managedMemory;
    int isMultiGpuBoard;
    int multiGpuBoardGroupID;
};
# 1397 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __attribute__((device_builtin)) struct __attribute__((device_builtin)) cudaIpcMemHandle_st
{
    char reserved[64];
}cudaIpcMemHandle_t;
# 1419 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h"
typedef __attribute__((device_builtin)) enum cudaError cudaError_t;




typedef __attribute__((device_builtin)) struct CUstream_st *cudaStream_t;




typedef __attribute__((device_builtin)) struct CUevent_st *cudaEvent_t;




typedef __attribute__((device_builtin)) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __attribute__((device_builtin)) struct CUuuid_st cudaUUID_t;




typedef __attribute__((device_builtin)) enum cudaOutputMode cudaOutputMode_t;
# 60 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_types.h" 1
# 84 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_types.h"
enum __attribute__((device_builtin)) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero = 0,
    cudaBoundaryModeClamp = 1,
    cudaBoundaryModeTrap = 2
};




enum __attribute__((device_builtin)) cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,
    cudaFormatModeAuto = 1
};




struct __attribute__((device_builtin)) surfaceReference
{



    struct cudaChannelFormatDesc channelDesc;
};




typedef __attribute__((device_builtin)) unsigned long long cudaSurfaceObject_t;
# 63 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_types.h" 1
# 84 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_types.h"
enum __attribute__((device_builtin)) cudaTextureAddressMode
{
    cudaAddressModeWrap = 0,
    cudaAddressModeClamp = 1,
    cudaAddressModeMirror = 2,
    cudaAddressModeBorder = 3
};




enum __attribute__((device_builtin)) cudaTextureFilterMode
{
    cudaFilterModePoint = 0,
    cudaFilterModeLinear = 1
};




enum __attribute__((device_builtin)) cudaTextureReadMode
{
    cudaReadModeElementType = 0,
    cudaReadModeNormalizedFloat = 1
};




struct __attribute__((device_builtin)) textureReference
{



    int normalized;



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureAddressMode addressMode[3];



    struct cudaChannelFormatDesc channelDesc;



    int sRGB;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
    int __cudaReserved[15];
};




struct __attribute__((device_builtin)) cudaTextureDesc
{



    enum cudaTextureAddressMode addressMode[3];



    enum cudaTextureFilterMode filterMode;



    enum cudaTextureReadMode readMode;



    int sRGB;



    int normalizedCoords;



    unsigned int maxAnisotropy;



    enum cudaTextureFilterMode mipmapFilterMode;



    float mipmapLevelBias;



    float minMipmapLevelClamp;



    float maxMipmapLevelClamp;
};




typedef __attribute__((device_builtin)) unsigned long long cudaTextureObject_t;
# 64 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_types.h" 1
# 61 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_types.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 64 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_types.h" 1
# 64 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 2
# 62 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_types.h" 2
# 98 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_types.h"
struct __attribute__((device_builtin)) char1
{
    signed char x;
};

struct __attribute__((device_builtin)) uchar1
{
    unsigned char x;
};


struct __attribute__((device_builtin)) __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct __attribute__((device_builtin)) char3
{
    signed char x, y, z;
};

struct __attribute__((device_builtin)) uchar3
{
    unsigned char x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct __attribute__((device_builtin)) short1
{
    short x;
};

struct __attribute__((device_builtin)) ushort1
{
    unsigned short x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) short2
{
    short x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct __attribute__((device_builtin)) short3
{
    short x, y, z;
};

struct __attribute__((device_builtin)) ushort3
{
    unsigned short x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __attribute__((device_builtin)) int1
{
    int x;
};

struct __attribute__((device_builtin)) uint1
{
    unsigned int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(8))) int2 { int x; int y; };
struct __attribute__((device_builtin)) __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct __attribute__((device_builtin)) int3
{
    int x, y, z;
};

struct __attribute__((device_builtin)) uint3
{
    unsigned int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct __attribute__((device_builtin)) long1
{
    long int x;
};

struct __attribute__((device_builtin)) ulong1
{
    unsigned long x;
};






struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(long int)))) long2
{
    long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(2*sizeof(unsigned long int)))) ulong2
{
    unsigned long int x, y;
};



struct __attribute__((device_builtin)) long3
{
    long int x, y, z;
};

struct __attribute__((device_builtin)) ulong3
{
    unsigned long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct __attribute__((device_builtin)) float1
{
    float x;
};
# 274 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_types.h"
struct __attribute__((device_builtin)) __attribute__((aligned(8))) float2 { float x; float y; };




struct __attribute__((device_builtin)) float3
{
    float x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct __attribute__((device_builtin)) longlong1
{
    long long int x;
};

struct __attribute__((device_builtin)) ulonglong1
{
    unsigned long long int x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct __attribute__((device_builtin)) longlong3
{
    long long int x, y, z;
};

struct __attribute__((device_builtin)) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __attribute__((device_builtin)) double1
{
    double x;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double2
{
    double x, y;
};

struct __attribute__((device_builtin)) double3
{
    double x, y, z;
};

struct __attribute__((device_builtin)) __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};
# 362 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_types.h"
typedef __attribute__((device_builtin)) struct char1 char1;
typedef __attribute__((device_builtin)) struct uchar1 uchar1;
typedef __attribute__((device_builtin)) struct char2 char2;
typedef __attribute__((device_builtin)) struct uchar2 uchar2;
typedef __attribute__((device_builtin)) struct char3 char3;
typedef __attribute__((device_builtin)) struct uchar3 uchar3;
typedef __attribute__((device_builtin)) struct char4 char4;
typedef __attribute__((device_builtin)) struct uchar4 uchar4;
typedef __attribute__((device_builtin)) struct short1 short1;
typedef __attribute__((device_builtin)) struct ushort1 ushort1;
typedef __attribute__((device_builtin)) struct short2 short2;
typedef __attribute__((device_builtin)) struct ushort2 ushort2;
typedef __attribute__((device_builtin)) struct short3 short3;
typedef __attribute__((device_builtin)) struct ushort3 ushort3;
typedef __attribute__((device_builtin)) struct short4 short4;
typedef __attribute__((device_builtin)) struct ushort4 ushort4;
typedef __attribute__((device_builtin)) struct int1 int1;
typedef __attribute__((device_builtin)) struct uint1 uint1;
typedef __attribute__((device_builtin)) struct int2 int2;
typedef __attribute__((device_builtin)) struct uint2 uint2;
typedef __attribute__((device_builtin)) struct int3 int3;
typedef __attribute__((device_builtin)) struct uint3 uint3;
typedef __attribute__((device_builtin)) struct int4 int4;
typedef __attribute__((device_builtin)) struct uint4 uint4;
typedef __attribute__((device_builtin)) struct long1 long1;
typedef __attribute__((device_builtin)) struct ulong1 ulong1;
typedef __attribute__((device_builtin)) struct long2 long2;
typedef __attribute__((device_builtin)) struct ulong2 ulong2;
typedef __attribute__((device_builtin)) struct long3 long3;
typedef __attribute__((device_builtin)) struct ulong3 ulong3;
typedef __attribute__((device_builtin)) struct long4 long4;
typedef __attribute__((device_builtin)) struct ulong4 ulong4;
typedef __attribute__((device_builtin)) struct float1 float1;
typedef __attribute__((device_builtin)) struct float2 float2;
typedef __attribute__((device_builtin)) struct float3 float3;
typedef __attribute__((device_builtin)) struct float4 float4;
typedef __attribute__((device_builtin)) struct longlong1 longlong1;
typedef __attribute__((device_builtin)) struct ulonglong1 ulonglong1;
typedef __attribute__((device_builtin)) struct longlong2 longlong2;
typedef __attribute__((device_builtin)) struct ulonglong2 ulonglong2;
typedef __attribute__((device_builtin)) struct longlong3 longlong3;
typedef __attribute__((device_builtin)) struct ulonglong3 ulonglong3;
typedef __attribute__((device_builtin)) struct longlong4 longlong4;
typedef __attribute__((device_builtin)) struct ulonglong4 ulonglong4;
typedef __attribute__((device_builtin)) struct double1 double1;
typedef __attribute__((device_builtin)) struct double2 double2;
typedef __attribute__((device_builtin)) struct double3 double3;
typedef __attribute__((device_builtin)) struct double4 double4;







struct __attribute__((device_builtin)) dim3
{
    unsigned int x, y, z;

    __attribute__((host)) __attribute__((device)) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __attribute__((host)) __attribute__((device)) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __attribute__((host)) __attribute__((device)) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }

};

typedef __attribute__((device_builtin)) struct dim3 dim3;
# 64 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 2
# 71 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/channel_descriptor.h" 1
# 62 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/channel_descriptor.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h" 1
# 143 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 144 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h" 1
# 104 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
extern "C"
{
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceSynchronize(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetLastError(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaPeekAtLastError(void);
extern __attribute__((device)) __attribute__((cudart_builtin)) const char* cudaGetErrorString(cudaError_t error);
extern __attribute__((device)) __attribute__((cudart_builtin)) const char* cudaGetErrorName(cudaError_t error);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceCount(int *count);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaGetDevice(int *device);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaEventDestroy(cudaEvent_t event);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFree(void *devPtr);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(void **devPtr, size_t size);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync_ptsz(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync_ptsz(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync_ptsz(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync_ptsz(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync_ptsz(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync_ptsz(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);
# 161 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
extern __attribute__((device)) __attribute__((cudart_builtin)) void * cudaGetParameterBuffer(size_t alignment, size_t size);
# 189 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
extern __attribute__((device)) __attribute__((cudart_builtin)) void * cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream);
# 209 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
    extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
    extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream);


extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize);
extern __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSmemSize, unsigned int flags);

}

template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(T **devPtr, size_t size);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, T *entry);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize);
template <typename T> static __inline__ __attribute__((device)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned int flags);
# 145 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h" 2
# 224 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern "C" {
# 257 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceReset(void);
# 274 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceSynchronize(void);
# 349 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetLimit(enum cudaLimit limit, size_t value);
# 378 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
# 409 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 444 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 486 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);
# 515 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
# 557 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);
# 580 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);
# 607 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);
# 649 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);
# 684 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);
# 722 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);
# 772 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);
# 802 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaIpcCloseMemHandle(void *devPtr);
# 842 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadExit(void);
# 866 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSynchronize(void);
# 913 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetLimit(enum cudaLimit limit, size_t value);
# 944 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);
# 979 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);
# 1025 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);
# 1079 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetLastError(void);
# 1120 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaPeekAtLastError(void);
# 1135 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorName(cudaError_t error);
# 1150 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) const char* cudaGetErrorString(cudaError_t error);
# 1180 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceCount(int *count);
# 1416 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);
# 1576 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
# 1595 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);
# 1629 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDevice(int device);
# 1646 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaGetDevice(int *device);
# 1675 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetValidDevices(int *device_arr, int len);
# 1737 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDeviceFlags( unsigned int flags );
# 1778 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetDeviceFlags( unsigned int *flags );
# 1815 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamCreate(cudaStream_t *pStream);
# 1844 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
# 1887 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);
# 1911 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int *priority);
# 1932 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);
# 1953 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamDestroy(cudaStream_t stream);
# 1985 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
# 1999 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
typedef void ( *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
# 2056 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);
# 2076 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamSynchronize(cudaStream_t stream);
# 2097 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaStreamQuery(cudaStream_t stream);
# 2163 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length, unsigned int flags);
# 2199 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventCreate(cudaEvent_t *event);
# 2233 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
# 2264 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);
# 2296 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventQuery(cudaEvent_t event);
# 2328 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventSynchronize(cudaEvent_t event);
# 2353 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaEventDestroy(cudaEvent_t event);
# 2394 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);
# 2450 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);
# 2499 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);
# 2550 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);
# 2583 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
# 2604 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForDevice(double *d);
# 2625 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetDoubleForHost(double *d);
# 2681 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);
# 2725 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 2776 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);
# 2805 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaSetupArgument(const void *arg, size_t size, size_t offset);
# 2842 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaLaunch(const void *func);
# 2931 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned int flags);
# 2957 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMalloc(void **devPtr, size_t size);
# 2986 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocHost(void **ptr, size_t size);
# 3025 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);
# 3067 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);
# 3094 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaFree(void *devPtr);
# 3114 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeHost(void *ptr);
# 3136 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeArray(cudaArray_t array);
# 3158 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);
# 3217 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags);
# 3274 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostRegister(void *ptr, size_t size, unsigned int flags);
# 3293 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostUnregister(void *ptr);
# 3320 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);
# 3339 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaHostGetFlags(unsigned int *pFlags, void *pHost);
# 3374 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);
# 3509 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
# 3630 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);
# 3656 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);
# 3753 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3D(const struct cudaMemcpy3DParms *p);
# 3781 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);
# 3889 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);
# 3912 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);
# 3931 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemGetInfo(size_t *free, size_t *total);
# 3952 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);
# 3987 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4019 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);
# 4053 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);
# 4087 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);
# 4122 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4164 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4206 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4248 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);
# 4288 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);
# 4323 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);
# 4358 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);
# 4404 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4436 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);
# 4478 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4520 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4575 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4626 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4676 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4719 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4762 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);
# 4788 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset(void *devPtr, int value, size_t count);
# 4818 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);
# 4861 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);
# 4893 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);
# 4930 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);
# 4980 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);
# 5003 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolAddress(void **devPtr, const void *symbol);
# 5025 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSymbolSize(size_t *size, const void *symbol);
# 5178 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);
# 5216 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);
# 5253 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);
# 5272 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDeviceDisablePeerAccess(int peerDevice);
# 5330 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);
# 5362 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);
# 5398 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5430 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);
# 5459 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);
# 5493 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
# 5518 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);
# 5558 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);
# 5593 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) struct cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);
# 5640 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = (2147483647 * 2U + 1U));
# 5691 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);
# 5719 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 5747 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);
# 5768 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaUnbindTexture(const struct textureReference *texref);
# 5793 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
# 5818 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureReference(const struct textureReference **texref, const void *symbol);
# 5858 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);
# 5877 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);
# 6094 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);
# 6109 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject);
# 6125 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);
# 6141 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
# 6158 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);
# 6197 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);
# 6212 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);
# 6227 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);
# 6254 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) cudaError_t cudaDriverGetVersion(int *driverVersion);
# 6271 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern __attribute__((host)) __attribute__((cudart_builtin)) cudaError_t cudaRuntimeGetVersion(int *runtimeVersion);




extern __attribute__((host)) cudaError_t cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);
# 6500 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
}
# 63 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/channel_descriptor.h" 2
# 107 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template<class T> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;




  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);

}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}
# 379 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline__ __attribute__((host)) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}
# 74 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_functions.h" 1
# 53 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 54 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_functions.h" 2
# 79 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz)
{
  struct cudaPitchedPtr s;

  s.ptr = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
# 106 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z)
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
# 132 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_functions.h"
static __inline__ __attribute__((host)) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d)
{
  struct cudaExtent e;

  e.width = w;
  e.height = h;
  e.depth = d;

  return e;
}
# 76 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.h" 1
# 59 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 60 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.h" 2
# 75 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.h"
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x);

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x);

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y);

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y);

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z);

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z);

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w);

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w);

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x);

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x);

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y);

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y);

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z);

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z);

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w);

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w);

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x);

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x);

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y);

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y);

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z);

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z);

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w);

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w);

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x);

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x);

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y);

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y);

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z);

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z);

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w);

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w);

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x);

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y);

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z);

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w);

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x);

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x);

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y);

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y);

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z);

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z);

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w);

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w);

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x);

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y);

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z);

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w);




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.hpp" 1
# 59 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 60 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.hpp" 2
# 75 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.hpp"
static __inline__ __attribute__((host)) __attribute__((device)) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short3 make_short3(short x,short y, short z)
{
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline__ __attribute__((host)) __attribute__((device)) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}
# 175 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/vector_functions.h" 2
# 80 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 104 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 1
# 61 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 62 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 2



# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 33 "/usr/include/string.h" 2 3 4
# 44 "/usr/include/string.h" 3 4


extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 27 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 164 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 211 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (const char *__s1, const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 640 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string3.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern void __warn_memset_zero_len (void) __attribute__((__warning__ ("memset used with constant zero length parameter; this could be due to transposed parameters")))
                                                                                                   ;
# 47 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) throw ()
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 75 "/usr/include/x86_64-linux-gnu/bits/string3.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) throw ()
{
  if (__builtin_constant_p (__len) && __len == 0
      && (!__builtin_constant_p (__ch) || __ch != 0))
    {
      __warn_memset_zero_len ();
      return __dest;
    }
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) throw ()
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) throw ()
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) throw ();
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) throw () __asm__ ("" "stpncpy")
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char *__dest, const char *__src, size_t __n) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n <= __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 641 "/usr/include/string.h" 2 3 4



}
# 66 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 2
# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 38 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 121 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 122 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 27 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4



struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 86 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 87 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 42 "/usr/include/time.h" 2 3 4
# 57 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 73 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 91 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 103 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    __syscall_slong_t tv_nsec;
  };








struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;





typedef __pid_t pid_t;
# 186 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();





extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();





extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();







extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 319 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 334 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 403 "/usr/include/time.h" 3 4
extern int getdate_err;
# 412 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 426 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 2

extern "C"
{

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) clock_t clock(void) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memset(void*, int, size_t) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void* memcpy(void*, const void*, size_t) throw ();

}
# 87 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h"
# 1 "/usr/include/c++/4.8/new" 1 3
# 37 "/usr/include/c++/4.8/new" 3
       
# 38 "/usr/include/c++/4.8/new" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h" 1 3
# 184 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;




}
# 426 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/os_defines.h" 1 3
# 427 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/cpu_defines.h" 1 3
# 430 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h" 2 3
# 40 "/usr/include/c++/4.8/new" 2 3
# 1 "/usr/include/c++/4.8/exception" 1 3
# 33 "/usr/include/c++/4.8/exception" 3
       
# 34 "/usr/include/c++/4.8/exception" 3

#pragma GCC visibility push(default)


# 1 "/usr/include/c++/4.8/bits/atomic_lockfree_defines.h" 1 3
# 33 "/usr/include/c++/4.8/bits/atomic_lockfree_defines.h" 3
       
# 34 "/usr/include/c++/4.8/bits/atomic_lockfree_defines.h" 3
# 39 "/usr/include/c++/4.8/exception" 2 3

extern "C++" {

namespace std
{
# 60 "/usr/include/c++/4.8/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() throw() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 117 "/usr/include/c++/4.8/exception" 3
  bool uncaught_exception() throw() __attribute__ ((__pure__));


}

namespace __gnu_cxx
{

# 142 "/usr/include/c++/4.8/exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop
# 41 "/usr/include/c++/4.8/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 91 "/usr/include/c++/4.8/new" 3
void* operator new(std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t) throw(std::bad_alloc)
  __attribute__((__externally_visible__));
void operator delete(void*) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*) throw()
  __attribute__((__externally_visible__));
void* operator new(std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) throw()
  __attribute__((__externally_visible__));


inline void* operator new(std::size_t, void* __p) throw()
{ return __p; }
inline void* operator new[](std::size_t, void* __p) throw()
{ return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 88 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 2
# 101 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*, void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*, void*) throw();





# 1 "/usr/include/stdio.h" 1 3 4
# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4
# 44 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 64 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 74 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 31 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 82 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4
typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 32 "/usr/include/libio.h" 2 3 4
# 49 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 50 "/usr/include/libio.h" 2 3 4
# 144 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 154 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 302 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 338 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 434 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 464 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 526 "/usr/include/libio.h" 3 4
}
# 75 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 90 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __ssize_t ssize_t;







typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 164 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 165 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();




extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();








extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 205 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) throw () __attribute__ ((__warn_unused_result__));





extern char *tmpnam_r (char *__s) throw () __attribute__ ((__warn_unused_result__));
# 227 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 252 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 262 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 295 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) throw () __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () __attribute__ ((__warn_unused_result__));






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 463 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 522 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 550 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 561 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 594 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 638 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__warn_unused_result__)) __attribute__ ((__deprecated__));


# 649 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 665 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));








extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 726 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 737 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);

# 773 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 792 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 815 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));








extern void perror (const char *__s);






# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 854 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
# 873 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) throw ();
# 934 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 935 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) throw ();
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) throw ()
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) throw ();
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) throw ()

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) throw ()

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 206 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}
# 241 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 938 "/usr/include/stdio.h" 2 3 4





}
# 111 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 32 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 33 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 50 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 42 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 64 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 43 "/usr/include/stdlib.h" 2 3 4
# 95 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 139 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () __attribute__ ((__warn_unused_result__));




extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));





extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));





__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

# 239 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}




__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}

# 305 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 104 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 136 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 147 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;







# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 54 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 64 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 96 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 106 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 118 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 129 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


}
# 220 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw () __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw () __attribute__ ((__const__));


__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__leaf__)) gnu_dev_major (unsigned long long int __dev) throw ()
{
  return ((__dev >> 8) & 0xfff) | ((unsigned int) (__dev >> 32) & ~0xfff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int
__attribute__ ((__leaf__)) gnu_dev_minor (unsigned long long int __dev) throw ()
{
  return (__dev & 0xff) | ((unsigned int) (__dev >> 12) & ~0xff);
}

__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned long long int
__attribute__ ((__leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw ()
{
  return ((__minor & 0xff) | ((__major & 0xfff) << 8)
   | (((unsigned long long int) (__minor & ~0xff)) << 12)
   | (((unsigned long long int) (__major & ~0xfff)) << 32));
}

}
# 223 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4
# 60 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;





typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 90 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    short __spins;
    short __elision;
    __pthread_list_t __list;
# 124 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;

  } __data;
# 211 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 315 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 493 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 620 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 630 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 642 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 652 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 674 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 684 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 694 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 706 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));









extern int system (const char *__command) __attribute__ ((__warn_unused_result__));






extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);





extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 761 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));

# 812 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));






extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 899 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4

extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}

# 956 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) throw () __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) throw () __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) throw () __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved) throw ()
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {

      if (__builtin_object_size (__resolved, 2 > 1) < 4096)
 return __realpath_chk_warn (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));

      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  throw () __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) throw () __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char *__s, wchar_t __wchar) throw ()
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw () __asm__ ("" "mbstowcs")


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw () __asm__ ("" "wcstombs")


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 960 "/usr/include/stdlib.h" 2 3 4
# 968 "/usr/include/stdlib.h" 3 4
}
# 112 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 2





extern "C"
{
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int printf(const char*, ...);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int fprintf(FILE*, const char*, ...);


extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* malloc(size_t) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void free(void*) throw ();

}





# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 134 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 2


extern "C"
{
# 157 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void __assert_fail(
  const char *, const char *, unsigned int, const char *)
  throw ();




}
# 195 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new(std:: size_t) throw(std:: bad_alloc);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void* operator new[](std:: size_t) throw(std:: bad_alloc);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete(void*) throw();
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) void operator delete[](void*) throw();
# 219 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h" 1
# 83 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 84 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h" 2
# 93 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern "C"
{
# 151 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) int abs(int) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long int labs(long int) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) long long int llabs(long long int) throw ();
# 200 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fabs(double x) throw ();
# 241 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fabsf(float x) throw ();



extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int min(int, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umin(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmin(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmin(unsigned long long int, unsigned long long int);
# 270 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fminf(float x, float y) throw ();
# 290 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmin(double x, double y) throw ();






extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int max(int, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned int umax(unsigned int, unsigned int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llmax(long long int, long long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) unsigned long long int ullmax(unsigned long long int, unsigned long long int);
# 322 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaxf(float x, float y) throw ();
# 342 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmax(double, double) throw ();
# 386 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sin(double x) throw ();
# 419 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cos(double x) throw ();
# 438 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincos(double x, double *sptr, double *cptr) throw ();
# 454 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincosf(float x, float *sptr, float *cptr) throw ();
# 499 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tan(double x) throw ();
# 568 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sqrt(double x) throw ();
# 640 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rsqrt(double x);
# 710 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rsqrtf(float x);
# 766 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log2(double x) throw ();
# 791 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp2(double x) throw ();
# 816 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp2f(float x) throw ();
# 843 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp10(double x) throw ();
# 866 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float exp10f(float x) throw ();
# 912 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double expm1(double x) throw ();
# 957 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expm1f(float x) throw ();
# 1012 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log2f(float x) throw ();
# 1066 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log10(double x) throw ();
# 1137 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log(double x) throw ();
# 1231 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double log1p(double x) throw ();
# 1328 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log1pf(float x) throw ();
# 1403 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double floor(double x) throw ();
# 1442 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double exp(double x) throw ();
# 1473 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cosh(double x) throw ();
# 1503 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinh(double x) throw ();
# 1533 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tanh(double x) throw ();
# 1568 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acosh(double x) throw ();
# 1606 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acoshf(float x) throw ();
# 1622 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asinh(double x) throw ();
# 1638 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinhf(float x) throw ();
# 1692 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atanh(double x) throw ();
# 1746 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanhf(float x) throw ();
# 1805 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ldexp(double x, int exp) throw ();
# 1861 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ldexpf(float x, int exp) throw ();
# 1913 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double logb(double x) throw ();
# 1968 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logbf(float x) throw ();
# 1998 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogb(double x) throw ();
# 2028 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int ilogbf(float x) throw ();
# 2104 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbn(double x, int n) throw ();
# 2180 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalbnf(float x, int n) throw ();
# 2256 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double scalbln(double x, long int n) throw ();
# 2332 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float scalblnf(float x, long int n) throw ();
# 2410 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double frexp(double x, int *nptr) throw ();
# 2485 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float frexpf(float x, int *nptr) throw ();
# 2499 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double round(double x) throw ();
# 2516 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float roundf(float x) throw ();
# 2534 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lround(double x) throw ();
# 2552 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lroundf(float x) throw ();
# 2570 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llround(double x) throw ();
# 2588 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llroundf(float x) throw ();
# 2603 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rint(double x) throw ();
# 2618 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rintf(float x) throw ();
# 2634 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrint(double x) throw ();
# 2650 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long int lrintf(float x) throw ();
# 2666 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrint(double x) throw ();
# 2682 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) long long int llrintf(float x) throw ();
# 2735 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nearbyint(double x) throw ();
# 2788 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nearbyintf(float x) throw ();
# 2850 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double ceil(double x) throw ();
# 2862 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double trunc(double x) throw ();
# 2877 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float truncf(float x) throw ();
# 2903 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fdim(double x, double y) throw ();
# 2929 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fdimf(float x, float y) throw ();
# 2965 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan2(double y, double x) throw ();
# 2996 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double atan(double x) throw ();
# 3019 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double acos(double x) throw ();
# 3051 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double asin(double x) throw ();
# 3093 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double hypot(double x, double y) throw ();
# 3145 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rhypot(double x, double y) throw ();
# 3191 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float hypotf(float x, float y) throw ();
# 3243 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rhypotf(float x, float y) throw ();
# 3290 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm3d(double a, double b, double c) throw ();
# 3341 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rnorm3d(double a, double b, double c) throw ();
# 3390 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double norm4d(double a, double b, double c, double d) throw ();
# 3434 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float norm3df(float a, float b, float c) throw ();
# 3485 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rnorm3df(float a, float b, float c) throw ();
# 3534 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float norm4df(float a, float b, float c, float d) throw ();
# 3618 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cbrt(double x) throw ();
# 3704 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cbrtf(float x) throw ();
# 3759 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double rcbrt(double x);
# 3809 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float rcbrtf(float x);
# 3869 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double sinpi(double x);
# 3929 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinpif(float x);
# 3981 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cospi(double x);
# 4033 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cospif(float x);
# 4063 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospi(double x, double *sptr, double *cptr);
# 4093 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) void sincospif(float x, float *sptr, float *cptr);
# 4405 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double pow(double x, double y) throw ();
# 4461 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double modf(double x, double *iptr) throw ();
# 4520 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fmod(double x, double y) throw ();
# 4606 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remainder(double x, double y) throw ();
# 4696 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remainderf(float x, float y) throw ();
# 4750 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double remquo(double x, double y, int *quo) throw ();
# 4804 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float remquof(float x, float y, int *quo) throw ();
# 4845 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j0(double x) throw ();
# 4887 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j0f(float x) throw ();
# 4948 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double j1(double x) throw ();
# 5009 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float j1f(float x) throw ();
# 5052 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double jn(int n, double x) throw ();
# 5095 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float jnf(int n, float x) throw ();
# 5147 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y0(double x) throw ();
# 5199 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y0f(float x) throw ();
# 5251 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double y1(double x) throw ();
# 5303 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float y1f(float x) throw ();
# 5356 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double yn(int n, double x) throw ();
# 5409 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ynf(int n, float x) throw ();
# 5436 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i0(double x) throw ();
# 5462 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i0f(float x) throw ();
# 5489 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double cyl_bessel_i1(double x) throw ();
# 5515 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cyl_bessel_i1f(float x) throw ();
# 5598 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erf(double x) throw ();
# 5680 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erff(float x) throw ();
# 5744 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfinv(double y);
# 5801 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfinvf(float y);
# 5840 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfc(double x) throw ();
# 5878 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcf(float x) throw ();
# 6006 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double lgamma(double x) throw ();
# 6069 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcinv(double y);
# 6125 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcinvf(float y);
# 6183 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdfinv(double y);
# 6241 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdfinvf(float y);
# 6284 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double normcdf(double y);
# 6327 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float normcdff(float y);
# 6402 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double erfcx(double x);
# 6477 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float erfcxf(float x);
# 6611 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float lgammaf(float x) throw ();
# 6720 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double tgamma(double x) throw ();
# 6829 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tgammaf(float x) throw ();
# 6842 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double copysign(double x, double y) throw ();
# 6855 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float copysignf(float x, float y) throw ();
# 6892 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nextafter(double x, double y) throw ();
# 6929 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nextafterf(float x, float y) throw ();
# 6945 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double nan(const char *tagp) throw ();
# 6961 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float nanf(const char *tagp) throw ();






extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinff(float) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanf(float) throw ();
# 6979 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finite(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitef(float) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbit(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnan(double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinf(double) throw ();


extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitf(float) throw ();
# 7145 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) double fma(double x, double y, double z) throw ();
# 7303 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmaf(float x, float y, float z) throw ();
# 7314 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __signbitl(long double) throw ();





extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __finitel(long double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isinfl(long double) throw ();
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) int __isnanl(long double) throw ();
# 7372 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float acosf(float x) throw ();
# 7412 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float asinf(float x) throw ();
# 7452 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atanf(float x) throw ();
# 7485 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float atan2f(float y, float x) throw ();
# 7509 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float cosf(float x) throw ();
# 7551 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinf(float x) throw ();
# 7593 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanf(float x) throw ();
# 7617 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float coshf(float x) throw ();
# 7658 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sinhf(float x) throw ();
# 7688 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float tanhf(float x) throw ();
# 7739 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float logf(float x) throw ();
# 7789 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float expf(float x) throw ();
# 7840 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float log10f(float x) throw ();
# 7895 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float modff(float x, float *iptr) throw ();
# 8203 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float powf(float x, float y) throw ();
# 8272 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float sqrtf(float x) throw ();
# 8331 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float ceilf(float x) throw ();
# 8403 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float floorf(float x) throw ();
# 8462 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
extern __attribute__((host)) __attribute__((device)) __attribute__((device_builtin)) float fmodf(float x, float y) throw ();
# 8476 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
}



# 1 "/usr/include/math.h" 1 3 4
# 28 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/x86_64-linux-gnu/bits/huge_val.h" 1 3 4
# 33 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/huge_valf.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/huge_vall.h" 1 3 4
# 36 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/inf.h" 1 3 4
# 39 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/nan.h" 1 3 4
# 42 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/mathdef.h" 3 4
typedef float float_t;
typedef double double_t;
# 46 "/usr/include/math.h" 2 3 4
# 69 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                           ;





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));




extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 70 "/usr/include/math.h" 2 3 4
# 88 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ()
                                                           ;





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));




extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 89 "/usr/include/math.h" 2 3 4
# 132 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                           ;





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));




extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 133 "/usr/include/math.h" 2 3 4
# 148 "/usr/include/math.h" 3 4
extern int signgam;
# 189 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 301 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 324 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 426 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 1 3 4
# 123 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 3 4



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbitf (float __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x8) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbit (double __x) throw ()
{

  int __m;
  __asm ("pmovmskb %1, %0" : "=r" (__m) : "x" (__x));
  return (__m & 0x80) != 0;




}
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) __signbitl (long double __x) throw ()
{
  __extension__ union { long double __l; int __i[3]; } __u = { __l: __x };
  return (__u.__i[2] & 0x8000) != 0;
}


# 427 "/usr/include/math.h" 2 3 4
# 488 "/usr/include/math.h" 3 4
}
# 8481 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h" 2



# 1 "/usr/include/c++/4.8/cmath" 1 3
# 39 "/usr/include/c++/4.8/cmath" 3
       
# 40 "/usr/include/c++/4.8/cmath" 3


# 1 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 3
# 68 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  template<typename _Iterator, typename _Container>
    class __normal_iterator;


}

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 198 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 421 "/usr/include/c++/4.8/bits/cpp_type_traits.h" 3

}
# 43 "/usr/include/c++/4.8/cmath" 2 3
# 1 "/usr/include/c++/4.8/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/4.8/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/4.8/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
# 44 "/usr/include/c++/4.8/cmath" 2 3
# 75 "/usr/include/c++/4.8/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }



  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 555 "/usr/include/c++/4.8/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 805 "/usr/include/c++/4.8/cmath" 3
  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(0, 1, 4,
      3, 2, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }




}
# 8485 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h" 2
# 1 "/usr/include/c++/4.8/cstdlib" 1 3
# 39 "/usr/include/c++/4.8/cstdlib" 3
       
# 40 "/usr/include/c++/4.8/cstdlib" 3
# 114 "/usr/include/c++/4.8/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline long
  abs(long __i) { return __builtin_labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }



  inline __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }



}
# 196 "/usr/include/c++/4.8/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 228 "/usr/include/c++/4.8/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}
# 8486 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h" 2
# 8549 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(double x) throw();

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(long double x);

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(float x);



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(double x) throw();

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(long double x);
# 8615 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
namespace std
{
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __pow_helper(T, int);
  template<typename T> extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) T __cmath_power(T, unsigned int);
}

using std::abs;
using std::fabs;
using std::ceil;
using std::floor;
using std::sqrt;
using std::pow;
using std::log;
using std::log10;
using std::fmod;
using std::modf;
using std::exp;
using std::frexp;
using std::ldexp;
using std::asin;
using std::sin;
using std::sinh;
using std::acos;
using std::cos;
using std::cosh;
using std::atan;
using std::atan2;
using std::tan;
using std::tanh;
# 8989 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
namespace std {






extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long long int abs(long long int);





extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) long int abs(long int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float abs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double abs(double);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fabs(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ceil(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float floor(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sqrt(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float pow(float, float);


extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float pow(float, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) double pow(double, int);

extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float log10(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float fmod(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float modf(float, float*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float exp(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float frexp(float, int*);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float ldexp(float, int);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float asin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sin(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float sinh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float acos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cos(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float cosh(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float atan2(float, float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tan(float);
extern __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) float tanh(float);
# 9073 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
}
# 9125 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
static inline __attribute__((host)) __attribute__((device)) float logb(float a);

static inline __attribute__((host)) __attribute__((device)) int ilogb(float a);

static inline __attribute__((host)) __attribute__((device)) float scalbn(float a, int b);

static inline __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b);

static inline __attribute__((host)) __attribute__((device)) float exp2(float a);

static inline __attribute__((host)) __attribute__((device)) float expm1(float a);

static inline __attribute__((host)) __attribute__((device)) float log2(float a);

static inline __attribute__((host)) __attribute__((device)) float log1p(float a);

static inline __attribute__((host)) __attribute__((device)) float acosh(float a);

static inline __attribute__((host)) __attribute__((device)) float asinh(float a);

static inline __attribute__((host)) __attribute__((device)) float atanh(float a);

static inline __attribute__((host)) __attribute__((device)) float hypot(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float norm3d(float a, float b, float c);

static inline __attribute__((host)) __attribute__((device)) float norm4d(float a, float b, float c, float d);

static inline __attribute__((host)) __attribute__((device)) float cbrt(float a);

static inline __attribute__((host)) __attribute__((device)) float erf(float a);

static inline __attribute__((host)) __attribute__((device)) float erfc(float a);

static inline __attribute__((host)) __attribute__((device)) float lgamma(float a);

static inline __attribute__((host)) __attribute__((device)) float tgamma(float a);

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float nextafter(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float remainder(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo);

static inline __attribute__((host)) __attribute__((device)) float round(float a);

static inline __attribute__((host)) __attribute__((device)) long int lround(float a);

static inline __attribute__((host)) __attribute__((device)) long long int llround(float a);

static inline __attribute__((host)) __attribute__((device)) float trunc(float a);

static inline __attribute__((host)) __attribute__((device)) float rint(float a);

static inline __attribute__((host)) __attribute__((device)) long int lrint(float a);

static inline __attribute__((host)) __attribute__((device)) long long int llrint(float a);

static inline __attribute__((host)) __attribute__((device)) float nearbyint(float a);

static inline __attribute__((host)) __attribute__((device)) float fdim(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c);

static inline __attribute__((host)) __attribute__((device)) float fmax(float a, float b);

static inline __attribute__((host)) __attribute__((device)) float fmin(float a, float b);
# 9233 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
static inline __attribute__((host)) __attribute__((device)) float exp10(float a);

static inline __attribute__((host)) __attribute__((device)) float rsqrt(float a);

static inline __attribute__((host)) __attribute__((device)) float rcbrt(float a);

static inline __attribute__((host)) __attribute__((device)) float sinpi(float a);

static inline __attribute__((host)) __attribute__((device)) float cospi(float a);

static inline __attribute__((host)) __attribute__((device)) void sincospi(float a, float *sptr, float *cptr);

static inline __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr);

static inline __attribute__((host)) __attribute__((device)) float j0(float a);

static inline __attribute__((host)) __attribute__((device)) float j1(float a);

static inline __attribute__((host)) __attribute__((device)) float jn(int n, float a);

static inline __attribute__((host)) __attribute__((device)) float y0(float a);

static inline __attribute__((host)) __attribute__((device)) float y1(float a);

static inline __attribute__((host)) __attribute__((device)) float yn(int n, float a);

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i0(float a);

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i1(float a);

static inline __attribute__((host)) __attribute__((device)) float erfinv(float a);

static inline __attribute__((host)) __attribute__((device)) float erfcinv(float a);

static inline __attribute__((host)) __attribute__((device)) float normcdfinv(float a);

static inline __attribute__((host)) __attribute__((device)) float normcdf(float a);

static inline __attribute__((host)) __attribute__((device)) float erfcx(float a);

static inline __attribute__((host)) __attribute__((device)) double copysign(double a, float b);

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, double b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b);

static inline __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) float min(float a, float b);

static inline __attribute__((host)) __attribute__((device)) double min(double a, double b);

static inline __attribute__((host)) __attribute__((device)) double min(float a, double b);

static inline __attribute__((host)) __attribute__((device)) double min(double a, float b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b);

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b);

static inline __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b);

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b);

static inline __attribute__((host)) __attribute__((device)) float max(float a, float b);

static inline __attribute__((host)) __attribute__((device)) double max(double a, double b);

static inline __attribute__((host)) __attribute__((device)) double max(float a, double b);

static inline __attribute__((host)) __attribute__((device)) double max(double a, float b);
# 9822 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.hpp" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.hpp" 2
# 256 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.hpp"
__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(float x) { return __signbitf(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(double x) { return __signbit(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int signbit(long double x) { return __signbitl(x);}

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(float x) { return __finitef(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(double x) { return __finite(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isfinite(long double x) { return __finitel(x); }


__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(float x) { return __isnanf(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(double x) throw() { return __isnan(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isnan(long double x) { return __isnanl(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(float x) { return __isinff(x); }



__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(double x) throw() { return __isinf(x); }

__inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device)) __attribute__((cudart_builtin)) int isinf(long double x) { return __isinfl(x); }
# 478 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.hpp"
static inline __attribute__((host)) __attribute__((device)) float logb(float a)
{
  return logbf(a);
}

static inline __attribute__((host)) __attribute__((device)) int ilogb(float a)
{
  return ilogbf(a);
}

static inline __attribute__((host)) __attribute__((device)) float scalbn(float a, int b)
{
  return scalbnf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float scalbln(float a, long int b)
{
  return scalblnf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float exp2(float a)
{
  return exp2f(a);
}

static inline __attribute__((host)) __attribute__((device)) float expm1(float a)
{
  return expm1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float log2(float a)
{
  return log2f(a);
}

static inline __attribute__((host)) __attribute__((device)) float log1p(float a)
{
  return log1pf(a);
}

static inline __attribute__((host)) __attribute__((device)) float acosh(float a)
{
  return acoshf(a);
}

static inline __attribute__((host)) __attribute__((device)) float asinh(float a)
{
  return asinhf(a);
}

static inline __attribute__((host)) __attribute__((device)) float atanh(float a)
{
  return atanhf(a);
}

static inline __attribute__((host)) __attribute__((device)) float hypot(float a, float b)
{
  return hypotf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float norm3d(float a, float b, float c)
{
  return norm3df(a, b, c);
}

static inline __attribute__((host)) __attribute__((device)) float norm4d(float a, float b, float c, float d)
{
  return norm4df(a, b, c, d);
}

static inline __attribute__((host)) __attribute__((device)) float cbrt(float a)
{
  return cbrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float erf(float a)
{
  return erff(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfc(float a)
{
  return erfcf(a);
}

static inline __attribute__((host)) __attribute__((device)) float lgamma(float a)
{
  return lgammaf(a);
}

static inline __attribute__((host)) __attribute__((device)) float tgamma(float a)
{
  return tgammaf(a);
}

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, float b)
{
  return copysignf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float nextafter(float a, float b)
{
  return nextafterf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float remainder(float a, float b)
{
  return remainderf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float remquo(float a, float b, int *quo)
{
  return remquof(a, b, quo);
}

static inline __attribute__((host)) __attribute__((device)) float round(float a)
{
  return roundf(a);
}

static inline __attribute__((host)) __attribute__((device)) long int lround(float a)
{
  return lroundf(a);
}

static inline __attribute__((host)) __attribute__((device)) long long int llround(float a)
{
  return llroundf(a);
}

static inline __attribute__((host)) __attribute__((device)) float trunc(float a)
{
  return truncf(a);
}

static inline __attribute__((host)) __attribute__((device)) float rint(float a)
{
  return rintf(a);
}

static inline __attribute__((host)) __attribute__((device)) long int lrint(float a)
{
  return lrintf(a);
}

static inline __attribute__((host)) __attribute__((device)) long long int llrint(float a)
{
  return llrintf(a);
}

static inline __attribute__((host)) __attribute__((device)) float nearbyint(float a)
{
  return nearbyintf(a);
}

static inline __attribute__((host)) __attribute__((device)) float fdim(float a, float b)
{
  return fdimf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float fma(float a, float b, float c)
{
  return fmaf(a, b, c);
}

static inline __attribute__((host)) __attribute__((device)) float fmax(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) float fmin(float a, float b)
{
  return fminf(a, b);
}



static inline __attribute__((host)) __attribute__((device)) float exp10(float a)
{
  return exp10f(a);
}

static inline __attribute__((host)) __attribute__((device)) float rsqrt(float a)
{
  return rsqrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float rcbrt(float a)
{
  return rcbrtf(a);
}

static inline __attribute__((host)) __attribute__((device)) float sinpi(float a)
{
  return sinpif(a);
}

static inline __attribute__((host)) __attribute__((device)) float cospi(float a)
{
  return cospif(a);
}

static inline __attribute__((host)) __attribute__((device)) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static inline __attribute__((host)) __attribute__((device)) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static inline __attribute__((host)) __attribute__((device)) float j0(float a)
{
  return j0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float j1(float a)
{
  return j1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float jn(int n, float a)
{
  return jnf(n, a);
}

static inline __attribute__((host)) __attribute__((device)) float y0(float a)
{
  return y0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float y1(float a)
{
  return y1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float yn(int n, float a)
{
  return ynf(n, a);
}

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static inline __attribute__((host)) __attribute__((device)) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfinv(float a)
{
  return erfinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfcinv(float a)
{
  return erfcinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static inline __attribute__((host)) __attribute__((device)) float normcdf(float a)
{
  return normcdff(a);
}

static inline __attribute__((host)) __attribute__((device)) float erfcx(float a)
{
  return erfcxf(a);
}

static inline __attribute__((host)) __attribute__((device)) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static inline __attribute__((host)) __attribute__((device)) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static inline __attribute__((host)) __attribute__((device)) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static inline __attribute__((host)) __attribute__((device)) float min(float a, float b)
{
  return fminf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(double a, double b)
{
  return fmin(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(float a, double b)
{
  return fmin((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static inline __attribute__((host)) __attribute__((device)) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static inline __attribute__((host)) __attribute__((device)) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static inline __attribute__((host)) __attribute__((device)) float max(float a, float b)
{
  return fmaxf(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(double a, double b)
{
  return fmax(a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(float a, double b)
{
  return fmax((double)a, b);
}

static inline __attribute__((host)) __attribute__((device)) double max(double a, float b)
{
  return fmax(a, (double)b);
}
# 9823 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions_dbl_ptx3.h" 1
# 262 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions_dbl_ptx3.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions_dbl_ptx3.hpp" 1
# 263 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions_dbl_ptx3.h" 2
# 9827 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/math_functions.h" 2
# 220 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/common_functions.h" 2
# 105 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_surface_types.h" 1
# 61 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_surface_types.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 62 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_surface_types.h" 2
# 77 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_surface_types.h"
template<class T, int dim = 1>
struct __attribute__((device_builtin_surface_type)) surface : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __attribute__((host)) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }

};

template<int dim>
struct __attribute__((device_builtin_surface_type)) surface<void, dim> : public surfaceReference
{

  __attribute__((host)) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }

};
# 106 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_texture_types.h" 1
# 61 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_texture_types.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 62 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_texture_types.h" 2
# 77 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_texture_types.h"
template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __attribute__((device_builtin_texture_type)) texture : public textureReference
{

  __attribute__((host)) texture(int norm = 0,
                   enum cudaTextureFilterMode fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = cudaCreateChannelDesc<T>();
    sRGB = 0;
  }

  __attribute__((host)) texture(int norm,
                   enum cudaTextureFilterMode fMode,
                   enum cudaTextureAddressMode aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized = norm;
    filterMode = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc = desc;
    sRGB = 0;
  }

};
# 107 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 79 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
extern "C"
{
# 90 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __mulhi(int x, int y);
# 100 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __umulhi(unsigned int x, unsigned int y);
# 110 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) long long int __mul64hi(long long int x, long long int y);
# 120 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);
# 129 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __int_as_float(int x);
# 138 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __float_as_int(float x);
__attribute__((device)) __attribute__((device_builtin)) void __syncthreads(void);
__attribute__((device)) __attribute__((device_builtin)) void __prof_trigger(int);
__attribute__((device)) __attribute__((device_builtin)) void __threadfence(void);
__attribute__((device)) __attribute__((device_builtin)) void __threadfence_block(void);
__attribute__((device)) __attribute__((device_builtin)) void __trap(void);
__attribute__((device)) __attribute__((device_builtin)) void __brkpt(int c = 0);
# 167 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __saturatef(float x);
# 236 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __sad(int x, int y, unsigned int z);
# 304 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __usad(unsigned int x, unsigned int y, unsigned int z);
# 314 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __mul24(int x, int y);
# 324 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __umul24(unsigned int x, unsigned int y);
# 337 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float fdividef(float x, float y);
# 412 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fdividef(float x, float y);
__attribute__((device)) __attribute__((device_builtin)) double fdivide(double x, double y);
# 425 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __sinf(float x) throw ();
# 437 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __cosf(float x) throw ();
# 451 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __tanf(float x) throw ();
# 466 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) void __sincosf(float x, float *sptr, float *cptr) throw ();
# 516 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __expf(float x) throw ();
# 548 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __exp10f(float x) throw ();
# 574 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log2f(float x) throw ();
# 602 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __log10f(float x) throw ();
# 646 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __logf(float x) throw ();
# 689 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) __attribute__((cudart_builtin)) float __powf(float x, float y) throw ();
# 698 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __float2int_rn(float x);
# 707 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __float2int_rz(float x);
# 716 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __float2int_ru(float);
# 725 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __float2int_rd(float x);
# 734 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rn(float x);
# 743 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rz(float x);
# 752 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_ru(float x);
# 761 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __float2uint_rd(float x);
# 770 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __int2float_rn(int x);
# 779 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __int2float_rz(int x);
# 788 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __int2float_ru(int x);
# 797 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __int2float_rd(int x);
# 806 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __uint2float_rn(unsigned int x);
# 815 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __uint2float_rz(unsigned int x);
# 824 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __uint2float_ru(unsigned int x);
# 833 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __uint2float_rd(unsigned int x);
# 842 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rn(float x);
# 851 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rz(float x);
# 860 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_ru(float x);
# 869 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) long long int __float2ll_rd(float x);
# 878 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rn(float x);
# 887 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rz(float x);
# 896 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_ru(float x);
# 905 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned long long int __float2ull_rd(float x);
# 914 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __ll2float_rn(long long int x);
# 923 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __ll2float_rz(long long int x);
# 932 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __ll2float_ru(long long int x);
# 941 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __ll2float_rd(long long int x);
# 950 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __ull2float_rn(unsigned long long int x);
# 959 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __ull2float_rz(unsigned long long int x);
# 968 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __ull2float_ru(unsigned long long int x);
# 977 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __ull2float_rd(unsigned long long int x);
# 986 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned short __float2half_rn(float x);
# 995 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __half2float(unsigned short x);
# 1007 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fadd_rn(float x, float y);
# 1019 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fadd_rz(float x, float y);
# 1031 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fadd_ru(float x, float y);
# 1043 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fadd_rd(float x, float y);
# 1055 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fsub_rn(float x, float y);
# 1067 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fsub_rz(float x, float y);
# 1079 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fsub_ru(float x, float y);
# 1091 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fsub_rd(float x, float y);
# 1103 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fmul_rn(float x, float y);
# 1115 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fmul_rz(float x, float y);
# 1127 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fmul_ru(float x, float y);
# 1139 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fmul_rd(float x, float y);
# 1292 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fmaf_rn(float x, float y, float z);
# 1445 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fmaf_rz(float x, float y, float z);
# 1598 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fmaf_ru(float x, float y, float z);
# 1751 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fmaf_rd(float x, float y, float z);
# 1784 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __frcp_rn(float x);
# 1817 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __frcp_rz(float x);
# 1850 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __frcp_ru(float x);
# 1883 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __frcp_rd(float x);
# 1914 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rn(float x);
# 1945 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rz(float x);
# 1976 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fsqrt_ru(float x);
# 2007 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fsqrt_rd(float x);
# 2046 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __frsqrt_rn(float x);
# 2057 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fdiv_rn(float x, float y);
# 2068 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fdiv_rz(float x, float y);
# 2079 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fdiv_ru(float x, float y);
# 2090 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) float __fdiv_rd(float x, float y);
# 2099 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __clz(int x);
# 2110 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __ffs(int x);
# 2119 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __popc(unsigned int x);
# 2128 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __brev(unsigned int x);
# 2137 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __clzll(long long int x);
# 2148 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __ffsll(long long int x);
# 2159 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __popcll(unsigned long long int x);
# 2168 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned long long int __brevll(unsigned long long int x);
# 2192 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __byte_perm(unsigned int x, unsigned int y, unsigned int s);
# 2204 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __hadd(int, int);
# 2217 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __rhadd(int, int);
# 2229 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __uhadd(unsigned int, unsigned int);
# 2242 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __urhadd(unsigned int, unsigned int);
# 2252 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) int __double2int_rz(double);
# 2261 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rz(double);
# 2270 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rz(double);
# 2279 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rz(double);
__attribute__((device)) __attribute__((device_builtin)) unsigned int __pm0(void);
__attribute__((device)) __attribute__((device_builtin)) unsigned int __pm1(void);
__attribute__((device)) __attribute__((device_builtin)) unsigned int __pm2(void);
__attribute__((device)) __attribute__((device_builtin)) unsigned int __pm3(void);
# 2300 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vabs2(unsigned int a);
# 2311 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsss2(unsigned int a);
# 2322 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vadd2(unsigned int a, unsigned int b);
# 2333 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vaddss2 (unsigned int a, unsigned int b);
# 2343 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vaddus2 (unsigned int a, unsigned int b);
# 2354 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vavgs2(unsigned int a, unsigned int b);
# 2365 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vavgu2(unsigned int a, unsigned int b);
# 2376 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vhaddu2(unsigned int a, unsigned int b);
# 2387 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpeq2(unsigned int a, unsigned int b);
# 2398 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpges2(unsigned int a, unsigned int b);
# 2409 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);
# 2420 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgts2(unsigned int a, unsigned int b);
# 2431 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);
# 2442 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmples2(unsigned int a, unsigned int b);
# 2454 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpleu2(unsigned int a, unsigned int b);
# 2465 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmplts2(unsigned int a, unsigned int b);
# 2476 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpltu2(unsigned int a, unsigned int b);
# 2487 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpne2(unsigned int a, unsigned int b);
# 2498 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);
# 2509 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vmaxs2(unsigned int a, unsigned int b);
# 2520 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vmaxu2(unsigned int a, unsigned int b);
# 2531 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vmins2(unsigned int a, unsigned int b);
# 2542 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vminu2(unsigned int a, unsigned int b);
# 2553 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vseteq2(unsigned int a, unsigned int b);
# 2564 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetges2(unsigned int a, unsigned int b);
# 2575 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgeu2(unsigned int a, unsigned int b);
# 2586 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgts2(unsigned int a, unsigned int b);
# 2597 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgtu2(unsigned int a, unsigned int b);
# 2608 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetles2(unsigned int a, unsigned int b);
# 2619 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetleu2(unsigned int a, unsigned int b);
# 2630 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetlts2(unsigned int a, unsigned int b);
# 2641 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetltu2(unsigned int a, unsigned int b);
# 2652 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetne2(unsigned int a, unsigned int b);
# 2663 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsadu2(unsigned int a, unsigned int b);
# 2674 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsub2(unsigned int a, unsigned int b);
# 2685 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsubss2 (unsigned int a, unsigned int b);
# 2696 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsubus2 (unsigned int a, unsigned int b);
# 2706 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vneg2(unsigned int a);
# 2716 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vnegss2(unsigned int a);
# 2727 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);
# 2738 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsads2(unsigned int a, unsigned int b);
# 2748 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vabs4(unsigned int a);
# 2759 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsss4(unsigned int a);
# 2770 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vadd4(unsigned int a, unsigned int b);
# 2781 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vaddss4 (unsigned int a, unsigned int b);
# 2791 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vaddus4 (unsigned int a, unsigned int b);
# 2802 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vavgs4(unsigned int a, unsigned int b);
# 2813 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vavgu4(unsigned int a, unsigned int b);
# 2824 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vhaddu4(unsigned int a, unsigned int b);
# 2835 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpeq4(unsigned int a, unsigned int b);
# 2846 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpges4(unsigned int a, unsigned int b);
# 2857 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);
# 2868 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgts4(unsigned int a, unsigned int b);
# 2879 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);
# 2890 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmples4(unsigned int a, unsigned int b);
# 2901 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpleu4(unsigned int a, unsigned int b);
# 2912 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmplts4(unsigned int a, unsigned int b);
# 2923 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpltu4(unsigned int a, unsigned int b);
# 2934 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vcmpne4(unsigned int a, unsigned int b);
# 2945 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);
# 2956 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vmaxs4(unsigned int a, unsigned int b);
# 2967 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vmaxu4(unsigned int a, unsigned int b);
# 2978 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vmins4(unsigned int a, unsigned int b);
# 2989 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vminu4(unsigned int a, unsigned int b);
# 3000 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vseteq4(unsigned int a, unsigned int b);
# 3011 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetles4(unsigned int a, unsigned int b);
# 3022 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetleu4(unsigned int a, unsigned int b);
# 3033 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetlts4(unsigned int a, unsigned int b);
# 3044 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetltu4(unsigned int a, unsigned int b);
# 3055 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetges4(unsigned int a, unsigned int b);
# 3066 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgeu4(unsigned int a, unsigned int b);
# 3077 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgts4(unsigned int a, unsigned int b);
# 3088 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetgtu4(unsigned int a, unsigned int b);
# 3099 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsetne4(unsigned int a, unsigned int b);
# 3110 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsadu4(unsigned int a, unsigned int b);
# 3121 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsub4(unsigned int a, unsigned int b);
# 3132 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsubss4(unsigned int a, unsigned int b);
# 3143 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsubus4(unsigned int a, unsigned int b);
# 3153 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vneg4(unsigned int a);
# 3163 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vnegss4(unsigned int a);
# 3174 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);
# 3185 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
__attribute__((device)) __attribute__((device_builtin)) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline__ __attribute__((device)) int mulhi(int a, int b);

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, unsigned int b);

static __inline__ __attribute__((device)) unsigned int mulhi(int a, unsigned int b);

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, int b);

static __inline__ __attribute__((device)) long long int mul64hi(long long int a, long long int b);

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b);

static __inline__ __attribute__((device)) unsigned long long int mul64hi(long long int a, unsigned long long int b);

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, long long int b);

static __inline__ __attribute__((device)) int float_as_int(float a);

static __inline__ __attribute__((device)) float int_as_float(int a);

static __inline__ __attribute__((device)) float saturate(float a);

static __inline__ __attribute__((device)) int mul24(int a, int b);

static __inline__ __attribute__((device)) unsigned int umul24(unsigned int a, unsigned int b);

static __inline__ __attribute__((device)) void trap(void);


static __inline__ __attribute__((device)) void brkpt(int c = 0);

static __inline__ __attribute__((device)) void syncthreads(void);

static __inline__ __attribute__((device)) void prof_trigger(int e);

static __inline__ __attribute__((device)) void threadfence(bool global = true);

static __inline__ __attribute__((device)) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);
# 4183 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.hpp" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.hpp" 2
# 79 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.hpp"
static __inline__ __attribute__((device)) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline__ __attribute__((device)) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline__ __attribute__((device)) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline__ __attribute__((device)) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline__ __attribute__((device)) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline__ __attribute__((device)) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline__ __attribute__((device)) float saturate(float a)
{
  return __saturatef(a);
}

static __inline__ __attribute__((device)) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline__ __attribute__((device)) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline__ __attribute__((device)) void trap(void)
{
  __trap();
}


static __inline__ __attribute__((device)) void brkpt(int c)
{
  __brkpt(c);
}

static __inline__ __attribute__((device)) void syncthreads(void)
{
  __syncthreads();
}

static __inline__ __attribute__((device)) void prof_trigger(int e)
{
       if (e == 0) __prof_trigger( 0);
  else if (e == 1) __prof_trigger( 1);
  else if (e == 2) __prof_trigger( 2);
  else if (e == 3) __prof_trigger( 3);
  else if (e == 4) __prof_trigger( 4);
  else if (e == 5) __prof_trigger( 5);
  else if (e == 6) __prof_trigger( 6);
  else if (e == 7) __prof_trigger( 7);
  else if (e == 8) __prof_trigger( 8);
  else if (e == 9) __prof_trigger( 9);
  else if (e == 10) __prof_trigger(10);
  else if (e == 11) __prof_trigger(11);
  else if (e == 12) __prof_trigger(12);
  else if (e == 13) __prof_trigger(13);
  else if (e == 14) __prof_trigger(14);
  else if (e == 15) __prof_trigger(15);
}

static __inline__ __attribute__((device)) void threadfence(bool global)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline__ __attribute__((device)) int float2int(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf ? __float2int_ru(a) :
         mode == cudaRoundMinInf ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int float2uint(float a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf ? __float2uint_ru(a) :
         mode == cudaRoundMinInf ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline__ __attribute__((device)) float int2float(int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline__ __attribute__((device)) float uint2float(unsigned int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}
# 4184 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h" 2



extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicAdd(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicExch(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) float __fAtomicExch(float *address, float val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicMin(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicMax(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicAnd(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicOr(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicXor(int *address, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __iAtomicCAS(int *address, int compare, int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);

}
# 105 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
static __inline__ __attribute__((device)) int atomicAdd(int *address, int val);

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) int atomicSub(int *address, int val);

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) int atomicExch(int *address, int val);

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) float atomicExch(float *address, float val);

static __inline__ __attribute__((device)) int atomicMin(int *address, int val);

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) int atomicMax(int *address, int val);

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val);

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) int atomicOr(int *address, int val);

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) int atomicXor(int *address, int val);

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val);

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val);

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val);
# 156 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 157 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h" 2



extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);
extern __attribute__((device)) __attribute__((device_builtin)) int __any(int cond);
extern __attribute__((device)) __attribute__((device_builtin)) int __all(int cond);

}
# 178 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val);

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val);

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);

static __inline__ __attribute__((device)) bool any(bool cond);

static __inline__ __attribute__((device)) bool all(bool cond);
# 195 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp" 2
# 78 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp"
static __inline__ __attribute__((device)) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline__ __attribute__((device)) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline__ __attribute__((device)) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline__ __attribute__((device)) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline__ __attribute__((device)) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline__ __attribute__((device)) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline__ __attribute__((device)) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline__ __attribute__((device)) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline__ __attribute__((device)) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}
# 192 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 193 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp" 2
# 201 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.hpp"
static __inline__ __attribute__((device)) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline__ __attribute__((device)) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline__ __attribute__((device)) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline__ __attribute__((device)) bool all(bool cond)
{
  return (bool)__all((int)cond);
}
# 196 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_atomic_functions.h" 2
# 4187 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h" 1
# 73 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 74 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h" 2




extern "C"
{
# 89 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double_as_longlong(double x);
# 98 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __longlong_as_double(long long int x);
# 255 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rn(double x, double y, double z);
# 412 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rz(double x, double y, double z);
# 569 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_ru(double x, double y, double z);
# 726 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __fma_rd(double x, double y, double z);
# 738 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rn(double x, double y);
# 750 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rz(double x, double y);
# 762 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_ru(double x, double y);
# 774 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dadd_rd(double x, double y);
# 786 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rn(double x, double y);
# 798 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rz(double x, double y);
# 810 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_ru(double x, double y);
# 822 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsub_rd(double x, double y);
# 834 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rn(double x, double y);
# 846 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rz(double x, double y);
# 858 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_ru(double x, double y);
# 870 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dmul_rd(double x, double y);
# 879 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rn(double x);
# 888 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rz(double x);
# 897 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_ru(double x);
# 906 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) float __double2float_rd(double x);
# 915 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rn(double x);
# 924 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_ru(double x);
# 933 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2int_rd(double x);
# 942 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rn(double x);
# 951 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_ru(double x);
# 960 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __double2uint_rd(double x);
# 969 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rn(double x);
# 978 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_ru(double x);
# 987 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) long long int __double2ll_rd(double x);
# 996 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rn(double x);
# 1005 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_ru(double x);
# 1014 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long int __double2ull_rd(double x);







extern __attribute__((device)) __attribute__((device_builtin)) double __int2double_rn(int x);







extern __attribute__((device)) __attribute__((device_builtin)) double __uint2double_rn(unsigned int x);
# 1039 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rn(long long int x);
# 1048 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rz(long long int x);
# 1057 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_ru(long long int x);
# 1066 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ll2double_rd(long long int x);
# 1075 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rn(unsigned long long int x);
# 1084 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rz(unsigned long long int x);
# 1093 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_ru(unsigned long long int x);
# 1102 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ull2double_rd(unsigned long long int x);
# 1111 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2hiint(double x);
# 1120 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) int __double2loint(double x);
# 1130 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __hiloint2double(int hi, int lo);

}
# 1141 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode);

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero);

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest);

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest);
# 1191 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.hpp" 1
# 73 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 74 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.hpp" 2
# 83 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.hpp"
static __inline__ __attribute__((device)) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline__ __attribute__((device)) double dmul(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline__ __attribute__((device)) double dadd(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline__ __attribute__((device)) double dsub(double a, double b, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline__ __attribute__((device)) int double2int(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf ? __double2int_ru(a) :
         mode == cudaRoundMinInf ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline__ __attribute__((device)) unsigned int double2uint(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf ? __double2uint_ru(a) :
         mode == cudaRoundMinInf ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline__ __attribute__((device)) long long int double2ll(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf ? __double2ll_ru(a) :
         mode == cudaRoundMinInf ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline__ __attribute__((device)) unsigned long long int double2ull(double a, enum cudaRoundMode mode)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf ? __double2ull_ru(a) :
         mode == cudaRoundMinInf ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline__ __attribute__((device)) double ll2double(long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline__ __attribute__((device)) double ull2double(unsigned long long int a, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline__ __attribute__((device)) double int2double(int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double uint2double(unsigned int a, enum cudaRoundMode mode)
{
  return (double)a;
}

static __inline__ __attribute__((device)) double float2double(float a, enum cudaRoundMode mode)
{
  return (double)a;
}
# 1192 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_double_functions.h" 2
# 4188 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h" 2



extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) float __fAtomicAdd(float *address, float val);

}
# 85 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h"
static __inline__ __attribute__((device)) float atomicAdd(float *address, float val);






# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.hpp" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.hpp" 2
# 76 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.hpp"
static __inline__ __attribute__((device)) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}
# 93 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h" 2
# 4189 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h" 2



extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) long long __illAtomicMin(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) long long __illAtomicMax(long long *address, long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicMin(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicMax(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicAnd(unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicOr (unsigned long long *address, unsigned long long val);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned long long __ullAtomicXor(unsigned long long *address, unsigned long long val);

}
# 93 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
static __inline__ __attribute__((device)) long long atomicMin(long long *address, long long val);

static __inline__ __attribute__((device)) long long atomicMax(long long *address, long long val);

static __inline__ __attribute__((device)) unsigned long long atomicMin(unsigned long long *address, unsigned long long val);

static __inline__ __attribute__((device)) unsigned long long atomicMax(unsigned long long *address, unsigned long long val);

static __inline__ __attribute__((device)) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val);

static __inline__ __attribute__((device)) unsigned long long atomicOr(unsigned long long *address, unsigned long long val);

static __inline__ __attribute__((device)) unsigned long long atomicXor(unsigned long long *address, unsigned long long val);
# 114 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.hpp" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.hpp" 2
# 78 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.hpp"
static __inline__ __attribute__((device)) long long atomicMin(long long *address, long long val)
{
    return __illAtomicMin(address, val);
}

static __inline__ __attribute__((device)) long long atomicMax(long long *address, long long val)
{
    return __illAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicMin(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMin(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicMax(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMax(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicAnd(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicOr(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicOr(address, val);
}

static __inline__ __attribute__((device)) unsigned long long atomicXor(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicXor(address, val);
}
# 115 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h" 2
# 4190 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_35_atomic_functions.h" 1
# 4191 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h" 2




extern "C"
{

extern __attribute__((device)) __attribute__((device_builtin)) void __threadfence_system(void);
# 87 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rn(double x, double y);
# 99 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rz(double x, double y);
# 111 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_ru(double x, double y);
# 123 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __ddiv_rd(double x, double y);
# 157 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rn(double x);
# 191 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rz(double x);
# 225 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_ru(double x);
# 259 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __drcp_rd(double x);
# 291 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rn(double x);
# 323 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rz(double x);
# 355 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_ru(double x);
# 387 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern __attribute__((device)) __attribute__((device_builtin)) double __dsqrt_rd(double x);
extern __attribute__((device)) __attribute__((device_builtin)) unsigned int __ballot(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_count(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_and(int);
extern __attribute__((device)) __attribute__((device_builtin)) int __syncthreads_or(int);
extern __attribute__((device)) __attribute__((device_builtin)) long long int clock64(void);






extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rn(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rz(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_ru(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) float __fmaf_ieee_rd(float, float, float);
extern __attribute__((device)) __attribute__((device_builtin)) double __rcp64h(double);


}
# 415 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
static __inline__ __attribute__((device)) unsigned int ballot(bool pred);

static __inline__ __attribute__((device)) int syncthreads_count(bool pred);

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred);

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred);




static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr);






# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.hpp" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.hpp" 2
# 77 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.hpp"
static __inline__ __attribute__((device)) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline__ __attribute__((device)) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline__ __attribute__((device)) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline__ __attribute__((device)) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"

                  "} \n\t" : "=r"(ret) : "l"(ptr));




    return ret;
}
# 434 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h" 2
# 4192 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h" 2
# 91 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
static __attribute__((device)) __inline__ int __shfl(int var, int srcLane, int width=32);

static __attribute__((device)) __inline__ unsigned int __shfl(unsigned int var, int srcLane, int width=32);

static __attribute__((device)) __inline__ int __shfl_up(int var, unsigned int delta, int width=32);
static __attribute__((device)) __inline__ unsigned int __shfl_up(unsigned int var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ int __shfl_down(int var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ unsigned int __shfl_down(unsigned int var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ int __shfl_xor(int var, int laneMask, int width=32);

static __attribute__((device)) __inline__ unsigned int __shfl_xor(unsigned int var, int laneMask, int width=32);

static __attribute__((device)) __inline__ float __shfl(float var, int srcLane, int width=32);

static __attribute__((device)) __inline__ float __shfl_up(float var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ float __shfl_down(float var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ float __shfl_xor(float var, int laneMask, int width=32);


static __attribute__((device)) __inline__ long long __shfl(long long var, int srcLane, int width=32);

static __attribute__((device)) __inline__ unsigned long long __shfl(unsigned long long var, int srcLane, int width=32);

static __attribute__((device)) __inline__ long long __shfl_up(long long var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ long long __shfl_down(long long var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ long long __shfl_xor(long long var, int laneMask, int width=32);

static __attribute__((device)) __inline__ unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width=32);

static __attribute__((device)) __inline__ double __shfl(double var, int srcLane, int width=32);

static __attribute__((device)) __inline__ double __shfl_up(double var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ double __shfl_down(double var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ double __shfl_xor(double var, int laneMask, int width=32);



static __attribute__((device)) __inline__ long __shfl(long var, int srcLane, int width=32);

static __attribute__((device)) __inline__ unsigned long __shfl(unsigned long var, int srcLane, int width=32);

static __attribute__((device)) __inline__ long __shfl_up(long var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ unsigned long __shfl_up(unsigned long var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ long __shfl_down(long var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ unsigned long __shfl_down(unsigned long var, unsigned int delta, int width=32);

static __attribute__((device)) __inline__ long __shfl_xor(long var, int laneMask, int width=32);

static __attribute__((device)) __inline__ unsigned long __shfl_xor(unsigned long var, int laneMask, int width=32);
# 169 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.hpp" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.hpp" 2





extern "C"
{


}
# 99 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.hpp"
static __attribute__((device)) __inline__ int __shfl(int var, int srcLane, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(srcLane), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl(unsigned int var, int srcLane, int width) {
 return (unsigned int) __shfl((int)var, srcLane, width);
}

static __attribute__((device)) __inline__ int __shfl_up(int var, unsigned int delta, int width) {
 int ret;
 int c = (32 -width) << 8;
 asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
 return ret;
}
static __attribute__((device)) __inline__ unsigned int __shfl_up(unsigned int var, unsigned int delta, int width) {
 return (unsigned int) __shfl_up((int)var, delta, width);
}

static __attribute__((device)) __inline__ int __shfl_down(int var, unsigned int delta, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl_down(unsigned int var, unsigned int delta, int width) {
 return (unsigned int) __shfl_down((int)var, delta, width);
}

static __attribute__((device)) __inline__ int __shfl_xor(int var, int laneMask, int width) {
 int ret;
 int c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(laneMask), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ unsigned int __shfl_xor(unsigned int var, int laneMask, int width) {
 return (unsigned int) __shfl_xor((int)var, laneMask, width);
}

static __attribute__((device)) __inline__ float __shfl(float var, int srcLane, int width) {
 float ret;
    int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(srcLane), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_up(float var, unsigned int delta, int width) {
 float ret;
    int c;
 c = (32 -width) << 8;
 asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_down(float var, unsigned int delta, int width) {
 float ret;
    int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
 return ret;
}

static __attribute__((device)) __inline__ float __shfl_xor(float var, int laneMask, int width) {
 float ret;
    int c;
 c = ((32 -width) << 8) | 0x1f;
 asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(laneMask), "r"(c));
 return ret;
}


static __attribute__((device)) __inline__ long long __shfl(long long var, int srcLane, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl(hi, srcLane, width);
 lo = __shfl(lo, srcLane, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl(unsigned long long var, int srcLane, int width) {
 return (unsigned long long) __shfl((long long) var, srcLane, width);
}

static __attribute__((device)) __inline__ long long __shfl_up(long long var, unsigned int delta, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_up(hi, delta, width);
 lo = __shfl_up(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_up(unsigned long long var, unsigned int delta, int width) {
 return (unsigned long long) __shfl_up((long long) var, delta, width);
}

static __attribute__((device)) __inline__ long long __shfl_down(long long var, unsigned int delta, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_down(hi, delta, width);
 lo = __shfl_down(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_down(unsigned long long var, unsigned int delta, int width) {
 return (unsigned long long) __shfl_down((long long) var, delta, width);
}

static __attribute__((device)) __inline__ long long __shfl_xor(long long var, int laneMask, int width) {
 int lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=r"(lo), "=r"(hi) : "l"(var));
 hi = __shfl_xor(hi, laneMask, width);
 lo = __shfl_xor(lo, laneMask, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=l"(var) : "r"(lo), "r"(hi));
 return var;
}

static __attribute__((device)) __inline__ unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width) {
 return (unsigned long long) __shfl_xor((long long) var, laneMask, width);
}

static __attribute__((device)) __inline__ double __shfl(double var, int srcLane, int width) {
 float lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
 hi = __shfl(hi, srcLane, width);
 lo = __shfl(lo, srcLane, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_up(double var, unsigned int delta, int width) {
 float lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
 hi = __shfl_up(hi, delta, width);
 lo = __shfl_up(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_down(double var, unsigned int delta, int width) {
 float lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
 hi = __shfl_down(hi, delta, width);
 lo = __shfl_down(lo, delta, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
 return var;
}

static __attribute__((device)) __inline__ double __shfl_xor(double var, int laneMask, int width) {
 float lo, hi;
 asm volatile("mov.b64 {%0,%1}, %2;" : "=f"(lo), "=f"(hi) : "d"(var));
 hi = __shfl_xor(hi, laneMask, width);
 lo = __shfl_xor(lo, laneMask, width);
 asm volatile("mov.b64 %0, {%1,%2};" : "=d"(var) : "f"(lo), "f"(hi));
 return var;
}



static __attribute__((device)) __inline__ long __shfl(long var, int srcLane, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl((long long) var, srcLane, width) :
  __shfl((int) var, srcLane, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl(unsigned long var, int srcLane, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl((unsigned long long) var, srcLane, width) :
  __shfl((unsigned int) var, srcLane, width);
}

static __attribute__((device)) __inline__ long __shfl_up(long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_up((long long) var, delta, width) :
  __shfl_up((int) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_up(unsigned long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_up((unsigned long long) var, delta, width) :
  __shfl_up((unsigned int) var, delta, width);
}

static __attribute__((device)) __inline__ long __shfl_down(long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_down((long long) var, delta, width) :
  __shfl_down((int) var, delta, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_down(unsigned long var, unsigned int delta, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_down((unsigned long long) var, delta, width) :
  __shfl_down((unsigned int) var, delta, width);
}

static __attribute__((device)) __inline__ long __shfl_xor(long var, int laneMask, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_xor((long long) var, laneMask, width) :
  __shfl_xor((int) var, laneMask, width);
}

static __attribute__((device)) __inline__ unsigned long __shfl_xor(unsigned long var, int laneMask, int width) {
 return (sizeof(long) == sizeof(long long)) ?
  __shfl_xor((unsigned long long) var, laneMask, width) :
  __shfl_xor((unsigned int) var, laneMask, width);
}
# 170 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h" 2
# 4193 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h" 2
# 80 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
static __attribute__((device)) __inline__ long __ldg(const long *ptr);
static __attribute__((device)) __inline__ unsigned long __ldg(const unsigned long *ptr);


static __attribute__((device)) __inline__ char __ldg(const char *ptr);
static __attribute__((device)) __inline__ short __ldg(const short *ptr);
static __attribute__((device)) __inline__ int __ldg(const int *ptr);
static __attribute__((device)) __inline__ long long __ldg(const long long *ptr);
static __attribute__((device)) __inline__ char2 __ldg(const char2 *ptr);
static __attribute__((device)) __inline__ char4 __ldg(const char4 *ptr);
static __attribute__((device)) __inline__ short2 __ldg(const short2 *ptr);
static __attribute__((device)) __inline__ short4 __ldg(const short4 *ptr);
static __attribute__((device)) __inline__ int2 __ldg(const int2 *ptr);
static __attribute__((device)) __inline__ int4 __ldg(const int4 *ptr);
static __attribute__((device)) __inline__ longlong2 __ldg(const longlong2 *ptr);

static __attribute__((device)) __inline__ unsigned char __ldg(const unsigned char *ptr);
static __attribute__((device)) __inline__ unsigned short __ldg(const unsigned short *ptr);
static __attribute__((device)) __inline__ unsigned int __ldg(const unsigned int *ptr);
static __attribute__((device)) __inline__ unsigned long long __ldg(const unsigned long long *ptr);
static __attribute__((device)) __inline__ uchar2 __ldg(const uchar2 *ptr);
static __attribute__((device)) __inline__ uchar4 __ldg(const uchar4 *ptr);
static __attribute__((device)) __inline__ ushort2 __ldg(const ushort2 *ptr);
static __attribute__((device)) __inline__ ushort4 __ldg(const ushort4 *ptr);
static __attribute__((device)) __inline__ uint2 __ldg(const uint2 *ptr);
static __attribute__((device)) __inline__ uint4 __ldg(const uint4 *ptr);
static __attribute__((device)) __inline__ ulonglong2 __ldg(const ulonglong2 *ptr);

static __attribute__((device)) __inline__ float __ldg(const float *ptr);
static __attribute__((device)) __inline__ double __ldg(const double *ptr);
static __attribute__((device)) __inline__ float2 __ldg(const float2 *ptr);
static __attribute__((device)) __inline__ float4 __ldg(const float4 *ptr);
static __attribute__((device)) __inline__ double2 __ldg(const double2 *ptr);






static __attribute__((device)) __inline__ unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift);
static __attribute__((device)) __inline__ unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift);


static __attribute__((device)) __inline__ unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift);
static __attribute__((device)) __inline__ unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift);
# 134 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.hpp" 1
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.hpp" 2





extern "C"
{


}
# 99 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.hpp"
static __attribute__((device)) __inline__ long __ldg(const long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long)ret; }
static __attribute__((device)) __inline__ unsigned long __ldg(const unsigned long *ptr) { unsigned long ret; asm volatile ("ld.global.nc.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }






static __attribute__((device)) __inline__ char __ldg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __attribute__((device)) __inline__ short __ldg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.s16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __attribute__((device)) __inline__ int __ldg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __attribute__((device)) __inline__ long long __ldg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.s64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __attribute__((device)) __inline__ char2 __ldg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.nc.v2.s8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __attribute__((device)) __inline__ char4 __ldg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __attribute__((device)) __inline__ short2 __ldg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.nc.v2.s16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ short4 __ldg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int2 __ldg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.nc.v2.s32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ int4 __ldg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ longlong2 __ldg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.nc.v2.s64 %0, [%1];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ unsigned char __ldg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u8 %0, [%1];" : "=r"(ret) : "l" (ptr)); return (unsigned char)ret; }
static __attribute__((device)) __inline__ unsigned short __ldg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.u16 %0, [%1];" : "=h"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned int __ldg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u32 %0, [%1];" : "=r"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ unsigned long long __ldg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.u64 %0, [%1];" : "=l"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uchar2 __ldg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.nc.v2.u8 {%0,%1}, [%2];" : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __attribute__((device)) __inline__ uchar4 __ldg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __attribute__((device)) __inline__ ushort2 __ldg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.nc.v2.u16 {%0,%1}, [%2];" : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ushort4 __ldg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];" : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint2 __ldg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.nc.v2.u32 {%0,%1}, [%2];" : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ uint4 __ldg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];" : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ ulonglong2 __ldg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.nc.v2.u64 %0, [%1];" : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __attribute__((device)) __inline__ float __ldg(const float *ptr) { float ret; asm volatile ("ld.global.nc.f32 %0, [%1];" : "=f"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double __ldg(const double *ptr) { double ret; asm volatile ("ld.global.nc.f64 %0, [%1];" : "=d"(ret) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float2 __ldg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.nc.v2.f32 {%0,%1}, [%2];" : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ float4 __ldg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];" : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __attribute__((device)) __inline__ double2 __ldg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.nc.v2.f64 {%0,%1}, [%2];" : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }
# 144 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.hpp"
static __attribute__((device)) __inline__ unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __attribute__((device)) __inline__ unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


static __attribute__((device)) __inline__ unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __attribute__((device)) __inline__ unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
# 135 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h" 2
# 4194 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/sm_35_intrinsics.h" 1
# 4195 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h" 2
# 79 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1Dreadc1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1Dreadc2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1Dreadc4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1Dreads1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1Dreads2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1Dreads4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1Dreadu1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1Dreadu2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1Dreadu4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1Dreadl1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1Dreadl2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
# 105 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu2(surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu4(surf, x, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf1Dread(&tmp, surf, x, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf1Dread<T>(surf, x, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (char)((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadc1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc1(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreadc2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc2(surf, x, cudaBoundaryModeTrap ));

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadc2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc2(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreadc4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc4(surf, x, cudaBoundaryModeTrap ));

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadc4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadc4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadc4(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (short)((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreads1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads1(surf, x, cudaBoundaryModeClamp) : __surf1Dreads1(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreads2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads2(surf, x, cudaBoundaryModeClamp) : __surf1Dreads2(surf, x, cudaBoundaryModeTrap ));

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreads2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads2(surf, x, cudaBoundaryModeClamp) : __surf1Dreads2(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreads4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads4(surf, x, cudaBoundaryModeClamp) : __surf1Dreads4(surf, x, cudaBoundaryModeTrap ));

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreads4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreads4(surf, x, cudaBoundaryModeClamp) : __surf1Dreads4(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (int)((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu2(surf, x, cudaBoundaryModeTrap ));

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadu2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu2(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu4(surf, x, cudaBoundaryModeTrap ));

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadu4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu4(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)((mode == cudaBoundaryModeZero) ? __surf1Dreadl1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadl1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadl1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadl1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadl1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadl1(surf, x, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)((mode == cudaBoundaryModeZero) ? __surf1Dreadl1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadl1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadl1(surf, x, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadl1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadl1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadl1(surf, x, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreadl2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadl2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadl2(surf, x, cudaBoundaryModeTrap ));

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1Dreadl2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadl2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadl2(surf, x, cudaBoundaryModeTrap ));
}
# 392 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf1Dreadu1(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu1(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu1(surf, x, cudaBoundaryModeTrap )).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu2(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu2(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu2(surf, x, cudaBoundaryModeTrap ));

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf1Dreadu4(surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dreadu4(surf, x, cudaBoundaryModeClamp) : __surf1Dreadu4(surf, x, cudaBoundaryModeTrap ));

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 427 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2Dreadc1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2Dreadc2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2Dreadc4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2Dreads1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2Dreads2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2Dreads4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2Dreadu1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2Dreadu2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2Dreadu4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2Dreadl1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2Dreadl2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
# 453 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf2Dread<T>(surf, x, y, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (char)((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreadc2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap ));

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadc2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreadc4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap ));

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadc4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadc4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (short)((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreads2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap ));

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreads2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreads4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap ));

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreads4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreads4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (int)((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap ));

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap ));

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)((mode == cudaBoundaryModeZero) ? __surf2Dreadl1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadl1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadl1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadl1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)((mode == cudaBoundaryModeZero) ? __surf2Dreadl1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadl1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadl1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadl1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreadl2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadl2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap ));

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2Dreadl2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadl2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap ));
}
# 740 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu1(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap )).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu2(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap ));

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dreadu4(surf, x, y, cudaBoundaryModeClamp) : __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap ));

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 775 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf3Dreadc1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf3Dreadc2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf3Dreadc4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf3Dreads1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf3Dreads2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf3Dreads4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf3Dreadu1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf3Dreadu2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf3Dreadu4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf3Dreadl1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf3Dreadl2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
# 801 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf3Dread<T>(surf, x, y, z, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (char)((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (short)((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreads2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreads2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreads4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreads4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreads4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (int)((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)((mode == cudaBoundaryModeZero) ? __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)((mode == cudaBoundaryModeZero) ? __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap ));
}
# 1088 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap )).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap ));

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1123 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf1DLayeredreadc1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf1DLayeredreadc2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf1DLayeredreadc4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf1DLayeredreads1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf1DLayeredreads2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf1DLayeredreads4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf1DLayeredreadu1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf1DLayeredreadu2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf1DLayeredreadu4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf1DLayeredreadl1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf1DLayeredreadl2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
# 1149 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf1DLayeredread<T>(surf, x, layer, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (char)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap ));

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap ));

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (short)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap ));

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap ));

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (int)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap ));

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap ));

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap ));

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap ));
}
# 1436 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap )).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap ));

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap ));

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1471 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uchar1 __surf2DLayeredreadc1(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uchar2 __surf2DLayeredreadc2(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uchar4 __surf2DLayeredreadc4(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) ushort1 __surf2DLayeredreads1(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) ushort2 __surf2DLayeredreads2(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) ushort4 __surf2DLayeredreads4(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint1 __surf2DLayeredreadu1(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint2 __surf2DLayeredreadu2(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __surf2DLayeredreadu4(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong1 __surf2DLayeredreadl1(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) ulonglong2 __surf2DLayeredreadl2(T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
# 1508 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (short)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap ));
}
# 1795 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap )).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap ));

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 1844 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surfCubemapread<T>(surf, x, y, face, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (short)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeTrap ));
}
# 2131 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap )).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap ));

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 2181 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s == 1) ? (void)(*(uchar1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(*(ushort1*)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(*(uint1 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(*(uint2 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(*(uint4 *)res = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;

  surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode);

  return tmp;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) signed char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) char4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (short)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) short4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) int4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) uint4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) unsigned long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x;
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) longlong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) ulonglong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap ));
}
# 2468 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x);
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap )).x));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__inline__ __attribute__((always_inline)) __attribute__((device)) float4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = ((mode == cudaBoundaryModeZero) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap ));

  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}
# 2504 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec1( uchar1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec2( uchar2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritec4( uchar4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites1( ushort1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites2( ushort2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwrites4( ushort4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu1( uint1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu2( uint2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwriteu4( uint4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel1(ulonglong1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1Dwritel2(ulonglong2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
# 2530 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf1Dwrite(val, surf, x, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 2641 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 2657 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec1( uchar1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec2( uchar2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritec4( uchar4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites1( ushort1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites2( ushort2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwrites4( ushort4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu1( uint1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu2( uint2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwriteu4( uint4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel1(ulonglong1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2Dwritel2(ulonglong2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
# 2683 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 2794 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 2810 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec1( uchar1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec2( uchar2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritec4( uchar4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites1( ushort1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites2( ushort2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwrites4( ushort4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu1( uint1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu2( uint2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwriteu4( uint4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel1(ulonglong1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf3Dwritel2(ulonglong2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
# 2836 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 2947 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 2963 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec1( uchar1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec2( uchar2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritec4( uchar4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites1( ushort1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites2( ushort2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwrites4( ushort4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu1( uint1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu2( uint2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwriteu4( uint4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel1(ulonglong1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __attribute__((device)) __attribute__((device_builtin)) void __surf1DLayeredwritel2(ulonglong2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
# 2989 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 3100 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 3116 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec1( uchar1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec2( uchar2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritec4( uchar4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites1( ushort1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites2( ushort2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwrites4( ushort4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu1( uint1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu2( uint2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwriteu4( uint4 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel1(ulonglong1 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
template <typename T>
extern __attribute__((device)) __attribute__((device_builtin)) void __surf2DLayeredwritel2(ulonglong2 val, T t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
# 3153 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 3264 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 3295 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 3406 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 3437 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T val;
    uchar1 c1;
    ushort1 s1;
    uint1 u1;
    uint2 u2;
    uint4 u4;
  } tmp;

  tmp.val = val;

  (s == 1) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 2) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 4) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 8) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
  (s == 16) ? (void)(((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap ))) :
              (void)0;
}

template<class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode);
}


static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 3548 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap);
# 3681 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp" 2
# 94 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(make_uchar1((unsigned char)val.x), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(make_uchar1((unsigned char)val.x), surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(make_uchar1((unsigned char)val.x), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec1(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec1(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwritec1(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, cudaBoundaryModeClamp) : __surf1Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec2(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec2(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwritec2(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, cudaBoundaryModeClamp) : __surf1Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritec4(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritec4(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwritec4(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(make_ushort1((unsigned short)val.x), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(make_ushort1((unsigned short)val.x), surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(make_ushort1((unsigned short)val.x), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwrites1(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites1(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwrites1(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, cudaBoundaryModeClamp) : __surf1Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwrites2(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites2(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwrites2(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, cudaBoundaryModeClamp) : __surf1Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwrites4(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwrites4(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwrites4(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(make_uint1((unsigned int)val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(make_uint1((unsigned int)val), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(make_uint1((unsigned int)val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(make_uint1((unsigned int)val.x), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(make_uint1((unsigned int)val.x), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(make_uint1((unsigned int)val.x), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu2(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu2(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu2(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu4(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu4(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu4(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, cudaBoundaryModeClamp) : __surf1Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeClamp) : __surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, cudaBoundaryModeClamp) : __surf1Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritel1(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritel1(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwritel1(val, surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, cudaBoundaryModeClamp) : __surf1Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwritel2(val, surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwritel2(val, surf, x, cudaBoundaryModeClamp) : __surf1Dwritel2(val, surf, x, cudaBoundaryModeTrap ));
}
# 293 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, cudaBoundaryModeClamp) : __surf1Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, cudaBoundaryModeTrap ));
}
# 336 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec1(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec1(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec1(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec2(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec2(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec2(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritec4(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritec4(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritec4(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwrites1(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites1(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites1(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwrites2(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites2(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites2(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwrites4(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwrites4(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwrites4(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(make_uint1((unsigned int)val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(make_uint1((unsigned int)val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(make_uint1((unsigned int)val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritel1(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritel1(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritel1(val, surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwritel2(val, surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwritel2(val, surf, x, y, cudaBoundaryModeClamp) : __surf2Dwritel2(val, surf, x, y, cudaBoundaryModeTrap ));
}
# 535 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeClamp) : __surf2Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeTrap ));
}
# 578 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(make_uint1((unsigned int)val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(make_uint1((unsigned int)val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(make_uint1((unsigned int)val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeTrap ));
}
# 777 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, z, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf3Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf3Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeClamp) : __surf3Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeTrap ));
}
# 820 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeTrap ));
}
# 1019 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf1DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf1DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeClamp) : __surf1DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeTrap ));
}
# 1062 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeTrap ));
}
# 1261 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, layer, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeTrap ));
}
# 1305 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec2(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec2(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec2(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec4(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec4(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritec4(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites2(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites2(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites2(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites4(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites4(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwrites4(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(val, surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel2(val, surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel2(val, surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwritel2(val, surf, x, y, face, cudaBoundaryModeTrap ));
}
# 1504 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, face, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeTrap ));
}
# 1548 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeTrap ));
}
# 1747 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ((mode == cudaBoundaryModeZero) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeZero ) : (mode == cudaBoundaryModeClamp) ? __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeClamp) : __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap ));
}
# 3682 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_functions.h" 2
# 4196 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h" 2
# 80 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchi1D(T, int4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchi1D(T, int4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchi1D(T, int4);

template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetch1D(T, float4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetch2D(T, float4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetch3D(T, float4);

template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetch1D(T, float4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetch2D(T, float4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetch3D(T, float4);

template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetch1D(T, float4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetch2D(T, float4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetch3D(T, float4);

template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchcube(T, float4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchcube(T, float4);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchcube(T, float4);

template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchl1D(T, float4, int);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchl2D(T, float4, int);

template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchl1D(T, float4, int);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchl2D(T, float4, int);

template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchl1D(T, float4, int);
template <class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchl2D(T, float4, int);


template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlcube(T, float4, int);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlcube(T, float4, int);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlcube(T, float4, int);


template<class T, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchi(texture<T, 0x01, readMode> t, int4 i)
{
  return __utexfetchi1D(t, i);
}

template<class T, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchi(texture<T, 0x01, readMode> t, int4 i)
{
  return __itexfetchi1D(t, i);
}

template<class T, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchi(texture<T, 0x01, readMode> t, int4 i)
{
  return __ftexfetchi1D(t, i);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetch(texture<T, texType, readMode> t, float4 i, int d = texType)
{
  switch(d) {
  case 1: return __utexfetch1D(t, i);
  case 2: return __utexfetch2D(t, i);

  default: return __utexfetch3D(t, i);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetch(texture<T, texType, readMode> t, float4 i, int d = texType)
{
  switch(d) {
  case 1: return __itexfetch1D(t, i);
  case 2: return __itexfetch2D(t, i);

  default: return __itexfetch3D(t, i);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetch(texture<T, texType, readMode> t, float4 i, int d = texType)
{
  switch(d) {
  case 1: return __ftexfetch1D(t, i);
  case 2: return __ftexfetch2D(t, i);

  default: return __ftexfetch3D(t, i);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchc(texture<T, texType, readMode> t, float4 i)
{
  return __utexfetchcube(t, i);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchc(texture<T, texType, readMode> t, float4 i)
{
  return __itexfetchcube(t, i);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchc(texture<T, texType, readMode> t, float4 i)
{
  return __ftexfetchcube(t, i);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __utexfetchl1D(t, i, l);

  default: return __utexfetchl2D(t, i, l);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __itexfetchl1D(t, i, l);

  default: return __itexfetchl2D(t, i, l);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __ftexfetchl1D(t, i, l);

  default: return __ftexfetchl2D(t, i, l);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchlc(texture<T, texType, readMode> t, float4 i, int l)
{
  return __utexfetchlcube(t, i, l);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchlc(texture<T, texType, readMode> t, float4 i, int l)
{
  return __itexfetchlcube(t, i, l);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchlc(texture<T, texType, readMode> t, float4 i, int l)
{
  return __ftexfetchlcube(t, i, l);
}
# 280 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x);
# 374 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x);
# 534 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y);
# 688 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer);
# 842 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);
# 996 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z);
# 1150 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z);
# 1304 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);
# 1458 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer);
# 1551 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itex2Dgather0(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itex2Dgather1(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itex2Dgather2(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itex2Dgather3(T, float2);


template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utex2Dgather0(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utex2Dgather1(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utex2Dgather2(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utex2Dgather3(T, float2);


template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftex2Dgather0(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftex2Dgather1(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftex2Dgather2(T, float2);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftex2Dgather3(T, float2);


template<int comp, class T, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itex2Dgather(texture<T, 0x02, readMode> t, float2 i,
                    int c=comp)
{
  switch (c) {
  case 0: return __itex2Dgather0(t, i);
  case 1: return __itex2Dgather1(t, i);
  case 2: return __itex2Dgather2(t, i);

  default: return __itex2Dgather3(t, i);
  }
}

template<int comp, class T, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utex2Dgather(texture<T, 0x02, readMode> t, float2 i,
                     int c=comp)
{
  switch (c) {
  case 0: return __utex2Dgather0(t, i);
  case 1: return __utex2Dgather1(t, i);
  case 2: return __utex2Dgather2(t, i);

  default: return __utex2Dgather3(t, i);
  }
}

template<int comp, class T, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftex2Dgather(texture<T, 0x02, readMode> t, float2 i,
                      int c=comp)
{
  switch (c) {
  case 0: return __ftex2Dgather0(t, i);
  case 1: return __ftex2Dgather1(t, i);
  case 2: return __ftex2Dgather2(t, i);

  default: return __ftex2Dgather3(t, i);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<signed short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<short3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<signed int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<int3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<uint3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0);
# 1702 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<signed short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<short3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlod1D(T, float4, float);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlod2D(T, float4, float);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlod3D(T, float4, float);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlod1D(T, float4, float);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlod2D(T, float4, float);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlod3D(T, float4, float);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlod1D(T, float4, float);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlod2D(T, float4, float);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlod3D(T, float4, float);


template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlodcube(T, float4, float);
template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlodcube(T, float4, float);
template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlodcube(T, float4, float);

template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlodl1D(T, float4, int, float);
template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlodl2D(T, float4, int, float);

template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlodl1D(T, float4, int, float);
template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlodl2D(T, float4, int, float);

template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlodl1D(T, float4, int, float);
template<class T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlodl2D(T, float4, int, float);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchlodlcube(T, float4, int, float);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchlodlcube(T, float4, int, float);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchlodlcube(T, float4, int, float);


template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchgrad1D(T, float4, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchgrad2D(T, float4, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchgrad3D(T, float4, float4, float4);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchgrad1D(T, float4, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchgrad2D(T, float4, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchgrad3D(T, float4, float4, float4);


template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchgrad1D(T, float4, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchgrad2D(T, float4, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchgrad3D(T, float4, float4, float4);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchgradl1D(T, float4, int, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) uint4 __utexfetchgradl2D(T, float4, int, float4, float4);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchgradl1D(T, float4, int, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) int4 __itexfetchgradl2D(T, float4, int, float4, float4);

template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchgradl1D(T, float4, int, float4, float4);
template<typename T>
extern __attribute__((device)) __attribute__((device_builtin)) float4 __ftexfetchgradl2D(T, float4, int, float4, float4);


template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchlod(texture<T, texType, readMode> t, float4 i, float level,
                     int d = texType)
{
  switch (d) {
  case 1: return __utexfetchlod1D(t, i, level);
  case 2: return __utexfetchlod2D(t, i, level);

  default: return __utexfetchlod3D(t, i, level);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchlod(texture<T, texType, readMode> t, float4 i, float level,
                    int d = texType)
{
  switch (d) {
  case 1: return __itexfetchlod1D(t, i, level);
  case 2: return __itexfetchlod2D(t, i, level);

  default: return __itexfetchlod3D(t, i, level);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchlod(texture<T, texType, readMode> t, float4 i, float level,
                      int d = texType)
{
  switch (d) {
  case 1: return __ftexfetchlod1D(t, i, level);
  case 2: return __ftexfetchlod2D(t, i, level);

  default: return __ftexfetchlod3D(t, i, level);
  }
}


template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchlodc(texture<T, texType, readMode> t, float4 i, float level)
{
  return __utexfetchlodcube(t, i, level);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchlodc(texture<T, texType, readMode> t, float4 i, float level)
{
  return __itexfetchlodcube(t, i, level);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchlodc(texture<T, texType, readMode> t, float4 i, float level)
{
  return __ftexfetchlodcube(t, i, level);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchlodl(texture<T, texType, readMode> t, float4 i, int l,
                      float level, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __utexfetchlodl1D(t, i, l, level);

  default: return __utexfetchlodl2D(t, i, l, level);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchlodl(texture<T, texType, readMode> t, float4 i, int l,
                     float level, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __itexfetchlodl1D(t, i, l, level);

  default: return __itexfetchlodl2D(t, i, l, level);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchlodl(texture<T, texType, readMode> t, float4 i, int l,
                       float level, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __ftexfetchlodl1D(t, i, l, level);

  default: return __ftexfetchlodl2D(t, i, l, level);
  }
}


template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchlodlc(texture<T, texType, readMode> t, float4 i, int l,
                       float level)
{
  return __utexfetchlodlcube(t, i, l, level);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchlodlc(texture<T, texType, readMode> t, float4 i, int l,
                      float level)
{
  return __itexfetchlodlcube(t, i, l, level);
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchlodlc(texture<T, texType, readMode> t, float4 i, int l,
                        float level)
{
  return __ftexfetchlodlcube(t, i, l, level);
}
# 1963 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLod(texture<char, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLod(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLod(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLod(texture<char1, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLod(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLod(texture<char2, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLod(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLod(texture<char4, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLod(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLod(texture<short, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLod(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLod(texture<short1, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLod(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLod(texture<short2, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLod(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLod(texture<short4, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLod(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLod(texture<int, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLod(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLod(texture<int1, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLod(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLod(texture<int2, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLod(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLod(texture<int4, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLod(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float level);
# 2063 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<float, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<float1, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<float2, 0x01, cudaReadModeElementType> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<float4, 0x01, cudaReadModeElementType> t, float x, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLod(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLod(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLod(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLod(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLod(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLod(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLod(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLod(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLod(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLod(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLod(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLod(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLod(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLod(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLod(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLod(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLod(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLod(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLod(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLod(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLod(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLod(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLod(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLod(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLod(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float level);
# 2217 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLayeredLod(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLayeredLod(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLayeredLod(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLayeredLod(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLayeredLod(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLayeredLod(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLayeredLod(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLayeredLod(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLayeredLod(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLayeredLod(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);
# 2371 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLayeredLod(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLayeredLod(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLayeredLod(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLayeredLod(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLayeredLod(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLayeredLod(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLayeredLod(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLayeredLod(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLayeredLod(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLayeredLod(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);
# 2525 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex3DLod(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex3DLod(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex3DLod(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex3DLod(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex3DLod(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex3DLod(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex3DLod(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex3DLod(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex3DLod(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex3DLod(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex3DLod(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex3DLod(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex3DLod(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex3DLod(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex3DLod(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex3DLod(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex3DLod(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex3DLod(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex3DLod(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex3DLod(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex3DLod(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex3DLod(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex3DLod(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex3DLod(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex3DLod(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);
# 2679 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemapLod(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemapLod(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemapLod(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemapLod(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemapLod(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemapLod(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemapLod(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemapLod(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemapLod(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemapLod(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemapLod(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemapLod(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemapLod(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemapLod(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemapLod(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemapLod(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemapLod(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);
# 2833 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemapLayeredLod(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemapLayeredLod(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemapLayeredLod(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemapLayeredLod(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemapLayeredLod(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemapLayeredLod(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemapLayeredLod(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemapLayeredLod(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);
# 2987 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level);


template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchgrad(texture<T, texType, readMode> t, float4 i, float4 dPdx, float4 dPdy, int d = texType)
{
  switch(d) {
  case 1: return __utexfetchgrad1D(t, i, dPdx, dPdy);
  case 2: return __utexfetchgrad2D(t, i, dPdx, dPdy);

  default: return __utexfetchgrad3D(t, i, dPdx, dPdy);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchgrad(texture<T, texType, readMode> t, float4 i, float4 dPdx, float4 dPdy, int d = texType)
{
  switch(d) {
  case 1: return __itexfetchgrad1D(t, i, dPdx, dPdy);
  case 2: return __itexfetchgrad2D(t, i, dPdx, dPdy);

  default: return __itexfetchgrad3D(t, i, dPdx, dPdy);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchgrad(texture<T, texType, readMode> t, float4 i, float4 dPdx, float4 dPdy, int d = texType)
{
  switch(d) {
  case 1: return __ftexfetchgrad1D(t, i, dPdx, dPdy);
  case 2: return __ftexfetchgrad2D(t, i, dPdx, dPdy);

  default: return __ftexfetchgrad3D(t, i, dPdx, dPdy);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
uint4 __utexfetchgradl(texture<T, texType, readMode> t, float4 i, int l, float4 dPdx, float4 dPdy, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __utexfetchgradl1D(t, i, l, dPdx, dPdy);

  default: return __utexfetchgradl2D(t, i, l, dPdx, dPdy);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
int4 __itexfetchgradl(texture<T, texType, readMode> t, float4 i, int l, float4 dPdx, float4 dPdy, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __itexfetchgradl1D(t, i, l, dPdx, dPdy);

  default: return __itexfetchgradl2D(t, i, l, dPdx, dPdy);
  }
}

template<class T, int texType, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((always_inline)) __attribute__((device))
float4 __ftexfetchgradl(texture<T, texType, readMode> t, float4 i, int l, float4 dPdx, float4 dPdy, int d = (texType & 0xF))
{
  switch(d) {
  case 1: return __ftexfetchgradl1D(t, i, l, dPdx, dPdy);

  default: return __ftexfetchgradl2D(t, i, l, dPdx, dPdy);
  }
}
# 3118 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DGrad(texture<char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DGrad(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DGrad(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DGrad(texture<char1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DGrad(texture<char2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DGrad(texture<char4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DGrad(texture<short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DGrad(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DGrad(texture<short1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DGrad(texture<short2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DGrad(texture<short4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DGrad(texture<int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DGrad(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DGrad(texture<int1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DGrad(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DGrad(texture<int2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DGrad(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DGrad(texture<int4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DGrad(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);
# 3218 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<float, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<float1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<float2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<float4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DGrad(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DGrad(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DGrad(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DGrad(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DGrad(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DGrad(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DGrad(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DGrad(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DGrad(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DGrad(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DGrad(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DGrad(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DGrad(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DGrad(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DGrad(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DGrad(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DGrad(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DGrad(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DGrad(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);
# 3372 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLayeredGrad(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLayeredGrad(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLayeredGrad(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLayeredGrad(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLayeredGrad(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLayeredGrad(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLayeredGrad(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLayeredGrad(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);
# 3526 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLayeredGrad(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLayeredGrad(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLayeredGrad(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLayeredGrad(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLayeredGrad(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLayeredGrad(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLayeredGrad(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLayeredGrad(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);
# 3680 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex3DGrad(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex3DGrad(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex3DGrad(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex3DGrad(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex3DGrad(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex3DGrad(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex3DGrad(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex3DGrad(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex3DGrad(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex3DGrad(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex3DGrad(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex3DGrad(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex3DGrad(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex3DGrad(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex3DGrad(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex3DGrad(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex3DGrad(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex3DGrad(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex3DGrad(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);
# 3834 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy);
# 3947 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp" 1
# 67 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp" 2
# 80 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x)
{



  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 343 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{



  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x)
{



  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 798 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{



  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y)
{



  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 1247 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{



  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 1696 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 2145 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{



  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{



  int4 v = __itexfetch(t, make_float4(x, y, z, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 2594 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{



  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{



  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 3043 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{



  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{



  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 3492 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{



  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}
# 3703 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char3, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2Dgather(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<signed short, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<short3, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2Dgather(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<signed int, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<int3, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<uint3, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2Dgather(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return v; } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2Dgather(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return v; } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 1) { float4 v = __ftex2Dgather<1>(t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float3, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 2) { float4 v = __ftex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { float4 v = __ftex2Dgather<1>(t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, int comp)
{
  if (comp == 3) { float4 v = __ftex2Dgather<3>(t, make_float2(x, y)); return v; } else if (comp == 2) { float4 v = __ftex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { float4 v = __ftex2Dgather<1>(t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}
# 3890 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<signed short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<short3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}
# 4007 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLod(texture<char, 0x01, cudaReadModeElementType> t, float x, float level)
{



  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLod(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLod(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLod(texture<char1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLod(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLod(texture<char2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLod(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLod(texture<char4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLod(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLod(texture<short, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLod(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLod(texture<short1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLod(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLod(texture<short2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLod(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLod(texture<short4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLod(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLod(texture<int, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLod(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLod(texture<int1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLod(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLod(texture<int2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLod(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLod(texture<int4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLod(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 4276 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<float, 0x01, cudaReadModeElementType> t, float x, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<float1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<float2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<float4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{



  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLod(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLod(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLod(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLod(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLod(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{



  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLod(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLod(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLod(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLod(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLod(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLod(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLod(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLod(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLod(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLod(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLod(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLod(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLod(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLod(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLod(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLod(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLod(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLod(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLod(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLod(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLod(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLod(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLod(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLod(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 4725 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{



  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLod(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLod(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLod(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLod(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLayeredLod(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{



  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLayeredLod(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLayeredLod(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLayeredLod(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLayeredLod(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLayeredLod(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLayeredLod(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLayeredLod(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLayeredLod(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLayeredLod(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 5174 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{



  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLayeredLod(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{



  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLayeredLod(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLayeredLod(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLayeredLod(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLayeredLod(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLayeredLod(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLayeredLod(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLayeredLod(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLayeredLod(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLayeredLod(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 5623 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{



  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex3DLod(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{



  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex3DLod(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex3DLod(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex3DLod(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex3DLod(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex3DLod(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex3DLod(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex3DLod(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex3DLod(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex3DLod(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex3DLod(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex3DLod(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex3DLod(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex3DLod(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex3DLod(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex3DLod(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex3DLod(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex3DLod(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex3DLod(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex3DLod(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex3DLod(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex3DLod(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex3DLod(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex3DLod(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex3DLod(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 6072 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{



  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DLod(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DLod(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DLod(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DLod(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemapLod(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{



  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemapLod(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemapLod(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemapLod(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemapLod(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemapLod(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemapLod(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemapLod(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemapLod(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemapLod(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemapLod(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemapLod(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemapLod(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemapLod(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemapLod(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemapLod(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemapLod(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 6521 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{



  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{



  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int texCubemapLayeredLod(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int texCubemapLayeredLod(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 texCubemapLayeredLod(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 texCubemapLayeredLod(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 texCubemapLayeredLod(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 texCubemapLayeredLod(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 texCubemapLayeredLod(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 texCubemapLayeredLod(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 6970 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{



  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}
# 7157 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DGrad(texture<char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{



  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DGrad(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DGrad(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DGrad(texture<char1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DGrad(texture<char2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DGrad(texture<char4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DGrad(texture<short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DGrad(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DGrad(texture<short1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DGrad(texture<short2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DGrad(texture<short4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DGrad(texture<int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DGrad(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DGrad(texture<int1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DGrad(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DGrad(texture<int2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DGrad(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DGrad(texture<int4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DGrad(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 7426 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<float, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<float1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<float2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<float4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{



  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DGrad(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DGrad(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{



  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DGrad(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DGrad(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DGrad(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DGrad(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DGrad(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DGrad(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DGrad(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DGrad(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DGrad(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DGrad(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DGrad(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DGrad(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DGrad(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DGrad(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DGrad(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DGrad(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DGrad(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DGrad(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 7875 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{



  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DGrad(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{



  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex1DLayeredGrad(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex1DLayeredGrad(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex1DLayeredGrad(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex1DLayeredGrad(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex1DLayeredGrad(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex1DLayeredGrad(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex1DLayeredGrad(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex1DLayeredGrad(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 8324 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{



  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{



  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex2DLayeredGrad(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex2DLayeredGrad(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex2DLayeredGrad(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex2DLayeredGrad(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex2DLayeredGrad(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex2DLayeredGrad(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex2DLayeredGrad(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex2DLayeredGrad(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 8773 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{



  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) char tex3DGrad(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{



  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));


  return (char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) signed char tex3DGrad(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (signed char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned char tex3DGrad(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (unsigned char)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char1 tex3DGrad(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_char1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uchar1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char2 tex3DGrad(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_char2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uchar2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) char4 tex3DGrad(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uchar4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) short tex3DGrad(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned short tex3DGrad(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (unsigned short)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short1 tex3DGrad(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_short1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ushort1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short2 tex3DGrad(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_short2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ushort2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) short4 tex3DGrad(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) ushort4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) int tex3DGrad(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) unsigned int tex3DGrad(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (unsigned int)v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int1 tex3DGrad(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_int1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint1 tex3DGrad(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uint1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int2 tex3DGrad(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_int2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint2 tex3DGrad(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uint2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) int4 tex3DGrad(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) uint4 tex3DGrad(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}
# 9222 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return v.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_float1(v.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_float2(v.x, v.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{



  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float tex3DGrad(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) float4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}
# 3948 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_fetch_functions.h" 2
# 4197 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h" 1
# 65 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 66 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h" 2



extern "C" {
__attribute__((device)) void __tex_1d_v4f32_s32(cudaTextureObject_t, int, float *, float *, float *, float *);
__attribute__((device)) void __tex_1d_v4f32_f32(cudaTextureObject_t, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_1d_level_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_1d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_1d_v4s32_s32(cudaTextureObject_t, int, int *, int *, int *, int *);
__attribute__((device)) void __tex_1d_v4s32_f32(cudaTextureObject_t, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_1d_level_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_1d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_1d_v4u32_s32(cudaTextureObject_t, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_1d_v4u32_f32(cudaTextureObject_t, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_1d_level_v4u32_f32(cudaTextureObject_t, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_1d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

__attribute__((device)) void __tex_1d_array_v4f32_s32(cudaTextureObject_t, int, int, float *, float *, float *, float *);
__attribute__((device)) void __tex_1d_array_v4f32_f32(cudaTextureObject_t, int, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_1d_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_1d_array_grad_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_1d_array_v4s32_s32(cudaTextureObject_t, int, int, int *, int *, int *, int *);
__attribute__((device)) void __tex_1d_array_v4s32_f32(cudaTextureObject_t, int, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_1d_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_1d_array_grad_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_1d_array_v4u32_s32(cudaTextureObject_t, int, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_1d_array_v4u32_f32(cudaTextureObject_t, int, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_1d_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_1d_array_grad_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

__attribute__((device)) void __tex_2d_v4f32_s32(cudaTextureObject_t, int, int, float *, float *, float *, float *);
__attribute__((device)) void __tex_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_2d_level_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_2d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_2d_v4s32_s32(cudaTextureObject_t, int, int, int *, int *, int *, int *);
__attribute__((device)) void __tex_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_2d_level_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_2d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_2d_v4u32_s32(cudaTextureObject_t, int, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_2d_level_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_2d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

__attribute__((device)) void __tex_2d_array_v4f32_s32(cudaTextureObject_t, int, int, int, float *, float *, float *, float *);
__attribute__((device)) void __tex_2d_array_v4f32_f32(cudaTextureObject_t, int, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_2d_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_2d_array_grad_v4f32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_2d_array_v4s32_s32(cudaTextureObject_t, int, int, int, int *, int *, int *, int *);
__attribute__((device)) void __tex_2d_array_v4s32_f32(cudaTextureObject_t, int, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_2d_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_2d_array_grad_v4s32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_2d_array_v4u32_s32(cudaTextureObject_t, int, int, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_2d_array_v4u32_f32(cudaTextureObject_t, int, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_2d_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_2d_array_grad_v4u32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

__attribute__((device)) void __tex_3d_v4f32_s32(cudaTextureObject_t, int, int, int, float *, float *, float *, float *);
__attribute__((device)) void __tex_3d_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_3d_level_v4f32_f32(cudaTextureObject_t, float, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_3d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_3d_v4s32_s32(cudaTextureObject_t, int, int, int, int *, int *, int *, int *);
__attribute__((device)) void __tex_3d_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_3d_level_v4s32_f32(cudaTextureObject_t, float, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_3d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_3d_v4u32_s32(cudaTextureObject_t, int, int, int, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_3d_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_3d_level_v4u32_f32(cudaTextureObject_t, float, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_3d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

__attribute__((device)) void __tex_cube_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_cube_level_v4f32_f32(cudaTextureObject_t, float, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_cube_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_cube_level_v4s32_f32(cudaTextureObject_t, float, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_cube_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_cube_level_v4u32_f32(cudaTextureObject_t, float, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

__attribute__((device)) void __tex_cube_array_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_cube_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tex_cube_array_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_cube_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tex_cube_array_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tex_cube_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);

__attribute__((device)) void __tld4_r_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tld4_g_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tld4_b_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tld4_a_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *);
__attribute__((device)) void __tld4_r_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tld4_g_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tld4_b_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tld4_a_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *);
__attribute__((device)) void __tld4_r_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tld4_g_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tld4_b_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
__attribute__((device)) void __tld4_a_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(char *retVal, cudaTextureObject_t texObject, int x);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(signed char *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(char1 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(char2 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(char4 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(unsigned char *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uchar1 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uchar2 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uchar4 *retVal, cudaTextureObject_t texObject, int x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(short *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(short1 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(short2 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(short4 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(unsigned short *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(ushort1 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(ushort2 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(ushort4 *retVal, cudaTextureObject_t texObject, int x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(int *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(int1 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(int2 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(int4 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(unsigned int *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uint1 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uint2 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uint4 *retVal, cudaTextureObject_t texObject, int x);
# 263 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(float *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(float1 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(float2 *retVal, cudaTextureObject_t texObject, int x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(float4 *retVal, cudaTextureObject_t texObject, int x);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{
  T ret;
  tex1Dfetch(&ret, texObject, x);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(char *retVal, cudaTextureObject_t texObject, float x);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(signed char *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(char1 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(char2 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(char4 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(unsigned char *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uchar1 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uchar2 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uchar4 *retVal, cudaTextureObject_t texObject, float x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(short *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(short1 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(short2 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(short4 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(unsigned short *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(ushort1 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(ushort2 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(ushort4 *retVal, cudaTextureObject_t texObject, float x);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(int *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(int1 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(int2 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(int4 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(unsigned int *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uint1 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uint2 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uint4 *retVal, cudaTextureObject_t texObject, float x);
# 385 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(float *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(float1 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(float2 *retVal, cudaTextureObject_t texObject, float x);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(float4 *retVal, cudaTextureObject_t texObject, float x);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex1D(cudaTextureObject_t texObject, float x)
{
  T ret;
  tex1D(&ret, texObject, x);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(char *retVal, cudaTextureObject_t texObject, float x, float y);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(signed char *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(char1 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(char2 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(char4 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(short *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(short1 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(short2 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(short4 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(int *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(int1 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(int2 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(int4 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y);
# 507 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(float *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(float1 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(float2 *retVal, cudaTextureObject_t texObject, float x, float y);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(float4 *retVal, cudaTextureObject_t texObject, float x, float y);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex2D(cudaTextureObject_t texObject, float x, float y)
{
  T ret;
  tex2D(&ret, texObject, x, y);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(char *retVal, cudaTextureObject_t texObject, float x, float y, float z);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(short *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(int *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);
# 629 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(float *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  tex3D(&ret, texObject, x, y, z);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(char *retVal, cudaTextureObject_t texObject, float x, int layer);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(short *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(int *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer);
# 751 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(float *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, int layer);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{
  T ret;
  tex1DLayered(&ret, texObject, x, layer);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);
# 873 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{
  T ret;
  tex2DLayered(&ret, texObject, x, y, layer);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(char *retVal, cudaTextureObject_t texObject, float x, float y, float z);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(short *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(int *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);
# 995 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(float *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{
  T ret;
  texCubemap(&ret, texObject, x, y, z);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);
# 1117 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  T ret;
  texCubemapLayered(&ret, texObject, x, y, z, layer);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(short *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(int *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(long *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(float *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{
  T ret;
  tex2Dgather(&ret, to, x, y, comp);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(char *retVal, cudaTextureObject_t texObject, float x, float level);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(short *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(int *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float level);
# 1357 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(float *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float level);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{
  T ret;
  tex1DLod(&ret, texObject, x, level);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float level);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float level);
# 1479 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float level);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{
  T ret;
  tex2DLod(&ret, texObject, x, y, level);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);
# 1601 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  tex3DLod(&ret, texObject, x, y, z, level);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, int layer, float level);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);
# 1723 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{
  T ret;
  tex1DLayeredLod(&ret, texObject, x, layer, level);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);
# 1845 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  T ret;
  tex2DLayeredLod(&ret, texObject, x, y, layer, level);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);
# 1967 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  T ret;
  texCubemapLod(&ret, texObject, x, y, z, level);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);
# 2089 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  T ret;
  texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);
# 2211 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(float *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  T ret;
  tex1DGrad(&ret, texObject, x, dPdx, dPdy);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);
# 2333 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);
# 2455 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  T ret;
  tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);
# 2577 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  T ret;
  tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
  return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);
# 2699 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  T ret;
  tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
  return ret;
}






# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp" 1
# 65 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 66 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp" 2
# 75 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(char *retVal, cudaTextureObject_t texObject, int x)
{




  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(signed char *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(char1 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(char2 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(char4 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(unsigned char *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uchar1 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uchar2 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uchar4 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(short *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(short1 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(short2 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(short4 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(unsigned short *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(ushort1 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(ushort2 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(ushort4 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(int *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(int1 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(int2 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(int4 *retVal, cudaTextureObject_t texObject, int x)
{
  int4 tmp;
  __tex_1d_v4s32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(unsigned int *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uint1 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uint2 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(uint4 *retVal, cudaTextureObject_t texObject, int x)
{
  uint4 tmp;
  __tex_1d_v4u32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 339 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(float *retVal, cudaTextureObject_t texObject, int x)
{
  float4 tmp;
  __tex_1d_v4f32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(float1 *retVal, cudaTextureObject_t texObject, int x)
{
  float4 tmp;
  __tex_1d_v4f32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(float2 *retVal, cudaTextureObject_t texObject, int x)
{
  float4 tmp;
  __tex_1d_v4f32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1Dfetch(float4 *retVal, cudaTextureObject_t texObject, int x)
{
  float4 tmp;
  __tex_1d_v4f32_s32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(char *retVal, cudaTextureObject_t texObject, float x)
{




  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(signed char *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(char1 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(char2 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(char4 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(unsigned char *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uchar1 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uchar2 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uchar4 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(short *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(short1 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(short2 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(short4 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(unsigned short *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(ushort1 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(ushort2 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(ushort4 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(int *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(int1 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(int2 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(int4 *retVal, cudaTextureObject_t texObject, float x)
{
  int4 tmp;
  __tex_1d_v4s32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(unsigned int *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uint1 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uint2 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(uint4 *retVal, cudaTextureObject_t texObject, float x)
{
  uint4 tmp;
  __tex_1d_v4u32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 637 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(float *retVal, cudaTextureObject_t texObject, float x)
{
  float4 tmp;
  __tex_1d_v4f32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(float1 *retVal, cudaTextureObject_t texObject, float x)
{
  float4 tmp;
  __tex_1d_v4f32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(float2 *retVal, cudaTextureObject_t texObject, float x)
{
  float4 tmp;
  __tex_1d_v4f32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1D(float4 *retVal, cudaTextureObject_t texObject, float x)
{
  float4 tmp;
  __tex_1d_v4f32_f32(texObject, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(char *retVal, cudaTextureObject_t texObject, float x, float y)
{




  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(signed char *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(char1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(char2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(char4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(short *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(short1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(short2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(short4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(int *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(int1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(int2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(int4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  int4 tmp;
  __tex_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  uint4 tmp;
  __tex_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 935 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(float *retVal, cudaTextureObject_t texObject, float x, float y)
{
  float4 tmp;
  __tex_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(float1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  float4 tmp;
  __tex_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(float2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  float4 tmp;
  __tex_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2D(float4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
  float4 tmp;
  __tex_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{




  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(short *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(int *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_3d_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_3d_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 1233 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(float *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  float4 tmp;
  __tex_3d_v4f32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  float4 tmp;
  __tex_3d_v4f32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  float4 tmp;
  __tex_3d_v4f32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3D(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  float4 tmp;
  __tex_3d_v4f32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(char *retVal, cudaTextureObject_t texObject, float x, int layer)
{




  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(short *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(int *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  int4 tmp;
  __tex_1d_array_v4s32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  uint4 tmp;
  __tex_1d_array_v4u32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 1531 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(float *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  float4 tmp;
  __tex_1d_array_v4f32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  float4 tmp;
  __tex_1d_array_v4f32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  float4 tmp;
  __tex_1d_array_v4f32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
  float4 tmp;
  __tex_1d_array_v4f32_f32(texObject, layer, x, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{




  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  int4 tmp;
  __tex_2d_array_v4s32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  uint4 tmp;
  __tex_2d_array_v4u32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 1829 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  float4 tmp;
  __tex_2d_array_v4f32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  float4 tmp;
  __tex_2d_array_v4f32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  float4 tmp;
  __tex_2d_array_v4f32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
  float4 tmp;
  __tex_2d_array_v4f32_f32(texObject, layer, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{




  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(short *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(int *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  int4 tmp;
  __tex_cube_v4s32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  uint4 tmp;
  __tex_cube_v4u32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 2127 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(float *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  float4 tmp;
  __tex_cube_v4f32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  float4 tmp;
  __tex_cube_v4f32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  float4 tmp;
  __tex_cube_v4f32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemap(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
  float4 tmp;
  __tex_cube_v4f32_f32(texObject, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{




  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  int4 tmp;
  __tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  uint4 tmp;
  __tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 2425 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  float4 tmp;
  __tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  float4 tmp;
  __tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  float4 tmp;
  __tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
  float4 tmp;
  __tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(char *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(short *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(int *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(long *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (long)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_long1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_long2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  int4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4s32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (unsigned long)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_ulong1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_ulong2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  uint4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4u32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(float *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  float4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  float4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  float4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2Dgather(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp)
{
  float4 tmp;
  if (comp == 0) {
    __tld4_r_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 1) {
    __tld4_g_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 2) {
    __tld4_b_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  else if (comp == 3) {
    __tld4_a_2d_v4f32_f32(texObject, x, y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  }
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(char *retVal, cudaTextureObject_t texObject, float x, float level)
{




  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(short *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(int *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  int4 tmp;
  __tex_1d_level_v4s32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  uint4 tmp;
  __tex_1d_level_v4u32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 3419 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(float *retVal, cudaTextureObject_t texObject, float x, float level)
{
  float4 tmp;
  __tex_1d_level_v4f32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  float4 tmp;
  __tex_1d_level_v4f32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  float4 tmp;
  __tex_1d_level_v4f32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
  float4 tmp;
  __tex_1d_level_v4f32_f32(texObject, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{




  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  int4 tmp;
  __tex_2d_level_v4s32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  uint4 tmp;
  __tex_2d_level_v4u32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 3717 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  float4 tmp;
  __tex_2d_level_v4f32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  float4 tmp;
  __tex_2d_level_v4f32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  float4 tmp;
  __tex_2d_level_v4f32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
  float4 tmp;
  __tex_2d_level_v4f32_f32(texObject, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{




  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
*retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_3d_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_3d_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 4015 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  float4 tmp;
  __tex_3d_level_v4f32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  float4 tmp;
  __tex_3d_level_v4f32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  float4 tmp;
  __tex_3d_level_v4f32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  float4 tmp;
  __tex_3d_level_v4f32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{




  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  int4 tmp;
  __tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  uint4 tmp;
  __tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 4313 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  float4 tmp;
  __tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  float4 tmp;
  __tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  float4 tmp;
  __tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
  float4 tmp;
  __tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{




  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  int4 tmp;
  __tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  uint4 tmp;
  __tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 4611 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  float4 tmp;
  __tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  float4 tmp;
  __tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  float4 tmp;
  __tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
  float4 tmp;
  __tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{




  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  int4 tmp;
  __tex_cube_level_v4s32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  uint4 tmp;
  __tex_cube_level_v4u32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 4909 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  float4 tmp;
  __tex_cube_level_v4f32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  float4 tmp;
  __tex_cube_level_v4f32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  float4 tmp;
  __tex_cube_level_v4f32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
  float4 tmp;
  __tex_cube_level_v4f32_f32(texObject, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{




  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  int4 tmp;
  __tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  uint4 tmp;
  __tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 5207 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  float4 tmp;
  __tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  float4 tmp;
  __tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  float4 tmp;
  __tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void texCubemapLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
  float4 tmp;
  __tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{




  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 5505 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(float *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  float4 tmp;
  __tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  float4 tmp;
  __tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  float4 tmp;
  __tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
  float4 tmp;
  __tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{




  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 5803 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 tmp;
  __tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 tmp;
  __tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 tmp;
  __tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 tmp;
  __tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{




  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 tmp;
  __tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 tmp;
  __tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 6101 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 tmp;
  __tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 tmp;
  __tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 tmp;
  __tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex3DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 tmp;
  __tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{




  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  int4 tmp;
  __tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  uint4 tmp;
  __tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 6399 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  float4 tmp;
  __tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  float4 tmp;
  __tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  float4 tmp;
  __tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex1DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
  float4 tmp;
  __tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{




  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);

  *retVal = (char)tmp.x;
}
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (signed char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned char)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned short)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 tmp;
  __tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (unsigned int)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 tmp;
  __tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 6697 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 tmp;
  __tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = (float)(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 tmp;
  __tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 tmp;
  __tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float2(tmp.x, tmp.y);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void tex2DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 tmp;
  __tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &tmp.x, &tmp.y, &tmp.z, &tmp.w);
  *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}
# 2727 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/texture_indirect_functions.h" 2
# 4198 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.h" 1
# 65 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 66 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.h" 2
# 76 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
extern "C" {
__attribute__((device)) void __suld_1d_i8_clamp(char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i16_clamp(short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i32_clamp(int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i64_clamp(long long *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i8_clamp(char *, char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i16_clamp(short *, short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i32_clamp(int *, int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i64_clamp(long long *, long long *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_array_i8_clamp(char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i16_clamp(short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i32_clamp(int *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i64_clamp(long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i8_clamp(char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i16_clamp(short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i32_clamp(int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i64_clamp(long long *, long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i8_clamp(char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i16_clamp(short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i32_clamp(int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i64_clamp(long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i8_clamp(char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i16_clamp(short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i32_clamp(int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i64_clamp(long long *, long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_array_i8_clamp(char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i16_clamp(short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i32_clamp(int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i64_clamp(long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i8_clamp(char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i16_clamp(short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i32_clamp(int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i64_clamp(long long *, long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i8_clamp(char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i16_clamp(short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i32_clamp(int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i64_clamp(long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i8_clamp(char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i16_clamp(short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i32_clamp(int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i64_clamp(long long *, long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i8_clamp(char *, char *, char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i16_clamp(short *, short *, short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i32_clamp(int *, int *, int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_1d_i8_trap(char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i16_trap(short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i32_trap(int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i64_trap(long long *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i8_trap(char *, char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i16_trap(short *, short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i32_trap(int *, int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i64_trap(long long *, long long *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i8_trap(char *, char *, char *, char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i16_trap(short *, short *, short *, short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i32_trap(int *, int *, int *, int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_array_i8_trap(char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i16_trap(short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i32_trap(int *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i64_trap(long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i8_trap(char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i16_trap(short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i32_trap(int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i64_trap(long long *, long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i8_trap(char *, char *, char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i16_trap(short *, short *, short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i32_trap(int *, int *, int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i8_trap(char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i16_trap(short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i32_trap(int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i64_trap(long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i8_trap(char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i16_trap(short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i32_trap(int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i64_trap(long long *, long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i8_trap(char *, char *, char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i16_trap(short *, short *, short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i32_trap(int *, int *, int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_array_i8_trap(char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i16_trap(short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i32_trap(int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i64_trap(long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i8_trap(char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i16_trap(short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i32_trap(int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i64_trap(long long *, long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i8_trap(char *, char *, char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i16_trap(short *, short *, short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i32_trap(int *, int *, int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i8_trap(char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i16_trap(short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i32_trap(int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i64_trap(long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i8_trap(char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i16_trap(short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i32_trap(int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i64_trap(long long *, long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i8_trap(char *, char *, char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i16_trap(short *, short *, short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i32_trap(int *, int *, int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_1d_i8_zero(char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i16_zero(short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i32_zero(int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_i64_zero(long long *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i8_zero(char *, char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i16_zero(short *, short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i32_zero(int *, int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v2i64_zero(long long *, long long *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i8_zero(char *, char *, char *, char *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i16_zero(short *, short *, short *, short *, unsigned long long, int);
__attribute__((device)) void __suld_1d_v4i32_zero(int *, int *, int *, int *, unsigned long long, int);
__attribute__((device)) void __suld_1d_array_i8_zero(char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i16_zero(short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i32_zero(int *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_i64_zero(long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i8_zero(char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i16_zero(short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i32_zero(int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v2i64_zero(long long *, long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i8_zero(char *, char *, char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i16_zero(short *, short *, short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_1d_array_v4i32_zero(int *, int *, int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i8_zero(char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i16_zero(short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i32_zero(int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_i64_zero(long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i8_zero(char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i16_zero(short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i32_zero(int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v2i64_zero(long long *, long long *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i8_zero(char *, char *, char *, char *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i16_zero(short *, short *, short *, short *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_v4i32_zero(int *, int *, int *, int *, unsigned long long, int, int);
__attribute__((device)) void __suld_2d_array_i8_zero(char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i16_zero(short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i32_zero(int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_i64_zero(long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i8_zero(char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i16_zero(short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i32_zero(int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v2i64_zero(long long *, long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i8_zero(char *, char *, char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i16_zero(short *, short *, short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_2d_array_v4i32_zero(int *, int *, int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i8_zero(char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i16_zero(short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i32_zero(int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_i64_zero(long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i8_zero(char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i16_zero(short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i32_zero(int *, int *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v2i64_zero(long long *, long long *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i8_zero(char *, char *, char *, char *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i16_zero(short *, short *, short *, short *, unsigned long long, int, int, int);
__attribute__((device)) void __suld_3d_v4i32_zero(int *, int *, int *, int *, unsigned long long, int, int, int);

__attribute__((device)) void __sust_b_1d_i8_clamp(cudaSurfaceObject_t, int, unsigned char);
__attribute__((device)) void __sust_b_1d_i16_clamp(cudaSurfaceObject_t, int, unsigned short);
__attribute__((device)) void __sust_b_1d_i32_clamp(cudaSurfaceObject_t, int, unsigned int);
__attribute__((device)) void __sust_b_1d_i64_clamp(cudaSurfaceObject_t, int, unsigned long long);
__attribute__((device)) void __sust_b_1d_v2i8_clamp(cudaSurfaceObject_t, int, uchar2);
__attribute__((device)) void __sust_b_1d_v2i16_clamp(cudaSurfaceObject_t, int, ushort2);
__attribute__((device)) void __sust_b_1d_v2i32_clamp(cudaSurfaceObject_t, int, uint2);
__attribute__((device)) void __sust_b_1d_v2i64_clamp(cudaSurfaceObject_t, int, ulonglong2);
__attribute__((device)) void __sust_b_1d_v4i8_clamp(cudaSurfaceObject_t, int, uchar4);
__attribute__((device)) void __sust_b_1d_v4i16_clamp(cudaSurfaceObject_t, int, ushort4);
__attribute__((device)) void __sust_b_1d_v4i32_clamp(cudaSurfaceObject_t, int, uint4);
__attribute__((device)) void __sust_b_1d_array_i8_clamp(cudaSurfaceObject_t, int, int, unsigned char);
__attribute__((device)) void __sust_b_1d_array_i16_clamp(cudaSurfaceObject_t, int, int, unsigned short);
__attribute__((device)) void __sust_b_1d_array_i32_clamp(cudaSurfaceObject_t, int, int, unsigned int);
__attribute__((device)) void __sust_b_1d_array_i64_clamp(cudaSurfaceObject_t, int, int, unsigned long long);
__attribute__((device)) void __sust_b_1d_array_v2i8_clamp(cudaSurfaceObject_t, int, int, uchar2);
__attribute__((device)) void __sust_b_1d_array_v2i16_clamp(cudaSurfaceObject_t, int, int, ushort2);
__attribute__((device)) void __sust_b_1d_array_v2i32_clamp(cudaSurfaceObject_t, int, int, uint2);
__attribute__((device)) void __sust_b_1d_array_v2i64_clamp(cudaSurfaceObject_t, int, int, ulonglong2);
__attribute__((device)) void __sust_b_1d_array_v4i8_clamp(cudaSurfaceObject_t, int, int, uchar4);
__attribute__((device)) void __sust_b_1d_array_v4i16_clamp(cudaSurfaceObject_t, int, int, ushort4);
__attribute__((device)) void __sust_b_1d_array_v4i32_clamp(cudaSurfaceObject_t, int, int, uint4);
__attribute__((device)) void __sust_b_2d_i8_clamp(cudaSurfaceObject_t, int, int, unsigned char);
__attribute__((device)) void __sust_b_2d_i16_clamp(cudaSurfaceObject_t, int, int, unsigned short);
__attribute__((device)) void __sust_b_2d_i32_clamp(cudaSurfaceObject_t, int, int, unsigned int);
__attribute__((device)) void __sust_b_2d_i64_clamp(cudaSurfaceObject_t, int, int, unsigned long long);
__attribute__((device)) void __sust_b_2d_v2i8_clamp(cudaSurfaceObject_t, int, int, uchar2);
__attribute__((device)) void __sust_b_2d_v2i16_clamp(cudaSurfaceObject_t, int, int, ushort2);
__attribute__((device)) void __sust_b_2d_v2i32_clamp(cudaSurfaceObject_t, int, int, uint2);
__attribute__((device)) void __sust_b_2d_v2i64_clamp(cudaSurfaceObject_t, int, int, ulonglong2);
__attribute__((device)) void __sust_b_2d_v4i8_clamp(cudaSurfaceObject_t, int, int, uchar4);
__attribute__((device)) void __sust_b_2d_v4i16_clamp(cudaSurfaceObject_t, int, int, ushort4);
__attribute__((device)) void __sust_b_2d_v4i32_clamp(cudaSurfaceObject_t, int, int, uint4);
__attribute__((device)) void __sust_b_2d_array_i8_clamp(cudaSurfaceObject_t, int, int, int, unsigned char);
__attribute__((device)) void __sust_b_2d_array_i16_clamp(cudaSurfaceObject_t, int, int, int, unsigned short);
__attribute__((device)) void __sust_b_2d_array_i32_clamp(cudaSurfaceObject_t, int, int, int, unsigned int);
__attribute__((device)) void __sust_b_2d_array_i64_clamp(cudaSurfaceObject_t, int, int, int, unsigned long long);
__attribute__((device)) void __sust_b_2d_array_v2i8_clamp(cudaSurfaceObject_t, int, int, int, uchar2);
__attribute__((device)) void __sust_b_2d_array_v2i16_clamp(cudaSurfaceObject_t, int, int, int, ushort2);
__attribute__((device)) void __sust_b_2d_array_v2i32_clamp(cudaSurfaceObject_t, int, int, int, uint2);
__attribute__((device)) void __sust_b_2d_array_v2i64_clamp(cudaSurfaceObject_t, int, int, int, ulonglong2);
__attribute__((device)) void __sust_b_2d_array_v4i8_clamp(cudaSurfaceObject_t, int, int, int, uchar4);
__attribute__((device)) void __sust_b_2d_array_v4i16_clamp(cudaSurfaceObject_t, int, int, int, ushort4);
__attribute__((device)) void __sust_b_2d_array_v4i32_clamp(cudaSurfaceObject_t, int, int, int, uint4);
__attribute__((device)) void __sust_b_3d_i8_clamp(cudaSurfaceObject_t, int, int, int, unsigned char);
__attribute__((device)) void __sust_b_3d_i16_clamp(cudaSurfaceObject_t, int, int, int, unsigned short);
__attribute__((device)) void __sust_b_3d_i32_clamp(cudaSurfaceObject_t, int, int, int, unsigned int);
__attribute__((device)) void __sust_b_3d_i64_clamp(cudaSurfaceObject_t, int, int, int, unsigned long long);
__attribute__((device)) void __sust_b_3d_v2i8_clamp(cudaSurfaceObject_t, int, int, int, uchar2);
__attribute__((device)) void __sust_b_3d_v2i16_clamp(cudaSurfaceObject_t, int, int, int, ushort2);
__attribute__((device)) void __sust_b_3d_v2i32_clamp(cudaSurfaceObject_t, int, int, int, uint2);
__attribute__((device)) void __sust_b_3d_v2i64_clamp(cudaSurfaceObject_t, int, int, int, ulonglong2);
__attribute__((device)) void __sust_b_3d_v4i8_clamp(cudaSurfaceObject_t, int, int, int, uchar4);
__attribute__((device)) void __sust_b_3d_v4i16_clamp(cudaSurfaceObject_t, int, int, int, ushort4);
__attribute__((device)) void __sust_b_3d_v4i32_clamp(cudaSurfaceObject_t, int, int, int, uint4);
__attribute__((device)) void __sust_b_1d_i8_trap(cudaSurfaceObject_t, int, unsigned char);
__attribute__((device)) void __sust_b_1d_i16_trap(cudaSurfaceObject_t, int, unsigned short);
__attribute__((device)) void __sust_b_1d_i32_trap(cudaSurfaceObject_t, int, unsigned int);
__attribute__((device)) void __sust_b_1d_i64_trap(cudaSurfaceObject_t, int, unsigned long long);
__attribute__((device)) void __sust_b_1d_v2i8_trap(cudaSurfaceObject_t, int, uchar2);
__attribute__((device)) void __sust_b_1d_v2i16_trap(cudaSurfaceObject_t, int, ushort2);
__attribute__((device)) void __sust_b_1d_v2i32_trap(cudaSurfaceObject_t, int, uint2);
__attribute__((device)) void __sust_b_1d_v2i64_trap(cudaSurfaceObject_t, int, ulonglong2);
__attribute__((device)) void __sust_b_1d_v4i8_trap(cudaSurfaceObject_t, int, uchar4);
__attribute__((device)) void __sust_b_1d_v4i16_trap(cudaSurfaceObject_t, int, ushort4);
__attribute__((device)) void __sust_b_1d_v4i32_trap(cudaSurfaceObject_t, int, uint4);
__attribute__((device)) void __sust_b_1d_array_i8_trap(cudaSurfaceObject_t, int, int, unsigned char);
__attribute__((device)) void __sust_b_1d_array_i16_trap(cudaSurfaceObject_t, int, int, unsigned short);
__attribute__((device)) void __sust_b_1d_array_i32_trap(cudaSurfaceObject_t, int, int, unsigned int);
__attribute__((device)) void __sust_b_1d_array_i64_trap(cudaSurfaceObject_t, int, int, unsigned long long);
__attribute__((device)) void __sust_b_1d_array_v2i8_trap(cudaSurfaceObject_t, int, int, uchar2);
__attribute__((device)) void __sust_b_1d_array_v2i16_trap(cudaSurfaceObject_t, int, int, ushort2);
__attribute__((device)) void __sust_b_1d_array_v2i32_trap(cudaSurfaceObject_t, int, int, uint2);
__attribute__((device)) void __sust_b_1d_array_v2i64_trap(cudaSurfaceObject_t, int, int, ulonglong2);
__attribute__((device)) void __sust_b_1d_array_v4i8_trap(cudaSurfaceObject_t, int, int, uchar4);
__attribute__((device)) void __sust_b_1d_array_v4i16_trap(cudaSurfaceObject_t, int, int, ushort4);
__attribute__((device)) void __sust_b_1d_array_v4i32_trap(cudaSurfaceObject_t, int, int, uint4);
__attribute__((device)) void __sust_b_2d_i8_trap(cudaSurfaceObject_t, int, int, unsigned char);
__attribute__((device)) void __sust_b_2d_i16_trap(cudaSurfaceObject_t, int, int, unsigned short);
__attribute__((device)) void __sust_b_2d_i32_trap(cudaSurfaceObject_t, int, int, unsigned int);
__attribute__((device)) void __sust_b_2d_i64_trap(cudaSurfaceObject_t, int, int, unsigned long long);
__attribute__((device)) void __sust_b_2d_v2i8_trap(cudaSurfaceObject_t, int, int, uchar2);
__attribute__((device)) void __sust_b_2d_v2i16_trap(cudaSurfaceObject_t, int, int, ushort2);
__attribute__((device)) void __sust_b_2d_v2i32_trap(cudaSurfaceObject_t, int, int, uint2);
__attribute__((device)) void __sust_b_2d_v2i64_trap(cudaSurfaceObject_t, int, int, ulonglong2);
__attribute__((device)) void __sust_b_2d_v4i8_trap(cudaSurfaceObject_t, int, int, uchar4);
__attribute__((device)) void __sust_b_2d_v4i16_trap(cudaSurfaceObject_t, int, int, ushort4);
__attribute__((device)) void __sust_b_2d_v4i32_trap(cudaSurfaceObject_t, int, int, uint4);
__attribute__((device)) void __sust_b_2d_array_i8_trap(cudaSurfaceObject_t, int, int, int, unsigned char);
__attribute__((device)) void __sust_b_2d_array_i16_trap(cudaSurfaceObject_t, int, int, int, unsigned short);
__attribute__((device)) void __sust_b_2d_array_i32_trap(cudaSurfaceObject_t, int, int, int, unsigned int);
__attribute__((device)) void __sust_b_2d_array_i64_trap(cudaSurfaceObject_t, int, int, int, unsigned long long);
__attribute__((device)) void __sust_b_2d_array_v2i8_trap(cudaSurfaceObject_t, int, int, int, uchar2);
__attribute__((device)) void __sust_b_2d_array_v2i16_trap(cudaSurfaceObject_t, int, int, int, ushort2);
__attribute__((device)) void __sust_b_2d_array_v2i32_trap(cudaSurfaceObject_t, int, int, int, uint2);
__attribute__((device)) void __sust_b_2d_array_v2i64_trap(cudaSurfaceObject_t, int, int, int, ulonglong2);
__attribute__((device)) void __sust_b_2d_array_v4i8_trap(cudaSurfaceObject_t, int, int, int, uchar4);
__attribute__((device)) void __sust_b_2d_array_v4i16_trap(cudaSurfaceObject_t, int, int, int, ushort4);
__attribute__((device)) void __sust_b_2d_array_v4i32_trap(cudaSurfaceObject_t, int, int, int, uint4);
__attribute__((device)) void __sust_b_3d_i8_trap(cudaSurfaceObject_t, int, int, int, unsigned char);
__attribute__((device)) void __sust_b_3d_i16_trap(cudaSurfaceObject_t, int, int, int, unsigned short);
__attribute__((device)) void __sust_b_3d_i32_trap(cudaSurfaceObject_t, int, int, int, unsigned int);
__attribute__((device)) void __sust_b_3d_i64_trap(cudaSurfaceObject_t, int, int, int, unsigned long long);
__attribute__((device)) void __sust_b_3d_v2i8_trap(cudaSurfaceObject_t, int, int, int, uchar2);
__attribute__((device)) void __sust_b_3d_v2i16_trap(cudaSurfaceObject_t, int, int, int, ushort2);
__attribute__((device)) void __sust_b_3d_v2i32_trap(cudaSurfaceObject_t, int, int, int, uint2);
__attribute__((device)) void __sust_b_3d_v2i64_trap(cudaSurfaceObject_t, int, int, int, ulonglong2);
__attribute__((device)) void __sust_b_3d_v4i8_trap(cudaSurfaceObject_t, int, int, int, uchar4);
__attribute__((device)) void __sust_b_3d_v4i16_trap(cudaSurfaceObject_t, int, int, int, ushort4);
__attribute__((device)) void __sust_b_3d_v4i32_trap(cudaSurfaceObject_t, int, int, int, uint4);
__attribute__((device)) void __sust_b_1d_i8_zero(cudaSurfaceObject_t, int, unsigned char);
__attribute__((device)) void __sust_b_1d_i16_zero(cudaSurfaceObject_t, int, unsigned short);
__attribute__((device)) void __sust_b_1d_i32_zero(cudaSurfaceObject_t, int, unsigned int);
__attribute__((device)) void __sust_b_1d_i64_zero(cudaSurfaceObject_t, int, unsigned long long);
__attribute__((device)) void __sust_b_1d_v2i8_zero(cudaSurfaceObject_t, int, uchar2);
__attribute__((device)) void __sust_b_1d_v2i16_zero(cudaSurfaceObject_t, int, ushort2);
__attribute__((device)) void __sust_b_1d_v2i32_zero(cudaSurfaceObject_t, int, uint2);
__attribute__((device)) void __sust_b_1d_v2i64_zero(cudaSurfaceObject_t, int, ulonglong2);
__attribute__((device)) void __sust_b_1d_v4i8_zero(cudaSurfaceObject_t, int, uchar4);
__attribute__((device)) void __sust_b_1d_v4i16_zero(cudaSurfaceObject_t, int, ushort4);
__attribute__((device)) void __sust_b_1d_v4i32_zero(cudaSurfaceObject_t, int, uint4);
__attribute__((device)) void __sust_b_1d_array_i8_zero(cudaSurfaceObject_t, int, int, unsigned char);
__attribute__((device)) void __sust_b_1d_array_i16_zero(cudaSurfaceObject_t, int, int, unsigned short);
__attribute__((device)) void __sust_b_1d_array_i32_zero(cudaSurfaceObject_t, int, int, unsigned int);
__attribute__((device)) void __sust_b_1d_array_i64_zero(cudaSurfaceObject_t, int, int, unsigned long long);
__attribute__((device)) void __sust_b_1d_array_v2i8_zero(cudaSurfaceObject_t, int, int, uchar2);
__attribute__((device)) void __sust_b_1d_array_v2i16_zero(cudaSurfaceObject_t, int, int, ushort2);
__attribute__((device)) void __sust_b_1d_array_v2i32_zero(cudaSurfaceObject_t, int, int, uint2);
__attribute__((device)) void __sust_b_1d_array_v2i64_zero(cudaSurfaceObject_t, int, int, ulonglong2);
__attribute__((device)) void __sust_b_1d_array_v4i8_zero(cudaSurfaceObject_t, int, int, uchar4);
__attribute__((device)) void __sust_b_1d_array_v4i16_zero(cudaSurfaceObject_t, int, int, ushort4);
__attribute__((device)) void __sust_b_1d_array_v4i32_zero(cudaSurfaceObject_t, int, int, uint4);
__attribute__((device)) void __sust_b_2d_i8_zero(cudaSurfaceObject_t, int, int, unsigned char);
__attribute__((device)) void __sust_b_2d_i16_zero(cudaSurfaceObject_t, int, int, unsigned short);
__attribute__((device)) void __sust_b_2d_i32_zero(cudaSurfaceObject_t, int, int, unsigned int);
__attribute__((device)) void __sust_b_2d_i64_zero(cudaSurfaceObject_t, int, int, unsigned long long);
__attribute__((device)) void __sust_b_2d_v2i8_zero(cudaSurfaceObject_t, int, int, uchar2);
__attribute__((device)) void __sust_b_2d_v2i16_zero(cudaSurfaceObject_t, int, int, ushort2);
__attribute__((device)) void __sust_b_2d_v2i32_zero(cudaSurfaceObject_t, int, int, uint2);
__attribute__((device)) void __sust_b_2d_v2i64_zero(cudaSurfaceObject_t, int, int, ulonglong2);
__attribute__((device)) void __sust_b_2d_v4i8_zero(cudaSurfaceObject_t, int, int, uchar4);
__attribute__((device)) void __sust_b_2d_v4i16_zero(cudaSurfaceObject_t, int, int, ushort4);
__attribute__((device)) void __sust_b_2d_v4i32_zero(cudaSurfaceObject_t, int, int, uint4);
__attribute__((device)) void __sust_b_2d_array_i8_zero(cudaSurfaceObject_t, int, int, int, unsigned char);
__attribute__((device)) void __sust_b_2d_array_i16_zero(cudaSurfaceObject_t, int, int, int, unsigned short);
__attribute__((device)) void __sust_b_2d_array_i32_zero(cudaSurfaceObject_t, int, int, int, unsigned int);
__attribute__((device)) void __sust_b_2d_array_i64_zero(cudaSurfaceObject_t, int, int, int, unsigned long long);
__attribute__((device)) void __sust_b_2d_array_v2i8_zero(cudaSurfaceObject_t, int, int, int, uchar2);
__attribute__((device)) void __sust_b_2d_array_v2i16_zero(cudaSurfaceObject_t, int, int, int, ushort2);
__attribute__((device)) void __sust_b_2d_array_v2i32_zero(cudaSurfaceObject_t, int, int, int, uint2);
__attribute__((device)) void __sust_b_2d_array_v2i64_zero(cudaSurfaceObject_t, int, int, int, ulonglong2);
__attribute__((device)) void __sust_b_2d_array_v4i8_zero(cudaSurfaceObject_t, int, int, int, uchar4);
__attribute__((device)) void __sust_b_2d_array_v4i16_zero(cudaSurfaceObject_t, int, int, int, ushort4);
__attribute__((device)) void __sust_b_2d_array_v4i32_zero(cudaSurfaceObject_t, int, int, int, uint4);
__attribute__((device)) void __sust_b_3d_i8_zero(cudaSurfaceObject_t, int, int, int, unsigned char);
__attribute__((device)) void __sust_b_3d_i16_zero(cudaSurfaceObject_t, int, int, int, unsigned short);
__attribute__((device)) void __sust_b_3d_i32_zero(cudaSurfaceObject_t, int, int, int, unsigned int);
__attribute__((device)) void __sust_b_3d_i64_zero(cudaSurfaceObject_t, int, int, int, unsigned long long);
__attribute__((device)) void __sust_b_3d_v2i8_zero(cudaSurfaceObject_t, int, int, int, uchar2);
__attribute__((device)) void __sust_b_3d_v2i16_zero(cudaSurfaceObject_t, int, int, int, ushort2);
__attribute__((device)) void __sust_b_3d_v2i32_zero(cudaSurfaceObject_t, int, int, int, uint2);
__attribute__((device)) void __sust_b_3d_v2i64_zero(cudaSurfaceObject_t, int, int, int, ulonglong2);
__attribute__((device)) void __sust_b_3d_v4i8_zero(cudaSurfaceObject_t, int, int, int, uchar4);
__attribute__((device)) void __sust_b_3d_v4i16_zero(cudaSurfaceObject_t, int, int, int, ushort4);
__attribute__((device)) void __sust_b_3d_v4i32_zero(cudaSurfaceObject_t, int, int, int, uint4);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surfCubemapread(&ret, surfObject, face, x, y, boundaryMode);
   return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







template <class T>
static __inline__ __attribute__((always_inline)) __attribute__((device)) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, z, layerface, boundaryMode);
   return ret;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);
# 1301 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap);
# 1742 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.hpp" 1
# 65 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/builtin_types.h" 1
# 66 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.hpp" 2
# 76 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i8_trap(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i8_clamp(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i8_zero(&tmp, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  signed char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i8_trap((char *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i8_clamp((char *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i8_zero((char *)&tmp, surfObject, x);
  }
  *retVal = (signed char)(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  char1 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i8_trap((char *)&tmp.x, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i8_clamp((char *)&tmp.x, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i8_zero((char *)&tmp.x, surfObject, x);
  }
  *retVal = make_char1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i8_trap((char *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i8_clamp((char *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i8_zero((char *)&tmp, surfObject, x);
  }
  *retVal = (unsigned char)(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar1 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i8_trap((char *)&tmp.x, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i8_clamp((char *)&tmp.x, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i8_zero((char *)&tmp.x, surfObject, x);
  }
  *retVal = make_uchar1(tmp.x);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i16_trap(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i16_clamp(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i16_zero(&tmp, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i16_trap(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i16_clamp(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i16_zero(&tmp, surfObject, x);
  }
  *retVal = make_short1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i16_trap((short *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i16_clamp((short *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i16_zero((short *)&tmp, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i16_trap((short *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i16_clamp((short *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i16_zero((short *)&tmp, surfObject, x);
  }
  *retVal = make_ushort1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i32_trap(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i32_clamp(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i32_zero(&tmp, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i32_trap(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i32_clamp(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i32_zero(&tmp, surfObject, x);
  }
  *retVal = make_int1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i32_trap((int *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i32_clamp((int *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i32_zero((int *)&tmp, surfObject, x);
  }
  *retVal = (unsigned int)(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i32_trap((int *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i32_clamp((int *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i32_zero((int *)&tmp, surfObject, x);
  }
  *retVal = make_uint1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i64_trap(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i64_clamp(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i64_zero(&tmp, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i64_trap(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i64_clamp(&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i64_zero(&tmp, surfObject, x);
  }
  *retVal = make_longlong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i64_trap((long long *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i64_clamp((long long *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i64_zero((long long *)&tmp, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i64_trap((long long *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i64_clamp((long long *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i64_zero((long long *)&tmp, surfObject, x);
  }
  *retVal = make_ulonglong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i32_trap((int *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i32_clamp((int *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i32_zero((int *)&tmp, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_i32_trap((int *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_i32_clamp((int *)&tmp, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_i32_zero((int *)&tmp, surfObject, x);
  }
  *retVal = make_float1(tmp);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  char2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  short2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  int2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  uint2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  longlong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  ulonglong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  float2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  char4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  short4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  int4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  uint4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  float4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i8_trap(&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i8_clamp(&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i8_zero(&tmp, surfObject, x, y);
  }
  *retVal = (char)(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  signed char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i8_trap((char *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i8_clamp((char *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i8_zero((char *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i8_trap((char *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i8_clamp((char *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i8_zero((char *)&tmp, surfObject, x, y);
  }
  *retVal = make_char1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i8_trap((char *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i8_clamp((char *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i8_zero((char *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i8_trap((char *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i8_clamp((char *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i8_zero((char *)&tmp, surfObject, x, y);
  }
  *retVal = make_uchar1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i16_trap((short *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i16_clamp((short *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i16_zero((short *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i16_trap((short *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i16_clamp((short *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i16_zero((short *)&tmp, surfObject, x, y);
  }
  *retVal = make_short1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i16_trap((short *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i16_clamp((short *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i16_zero((short *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i16_trap((short *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i16_clamp((short *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i16_zero((short *)&tmp, surfObject, x, y);
  }
  *retVal = make_ushort1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i32_trap((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i32_clamp((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i32_zero((int *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i32_trap((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i32_clamp((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i32_zero((int *)&tmp, surfObject, x, y);
  }
  *retVal = make_int1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i32_trap((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i32_clamp((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i32_zero((int *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i32_trap((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i32_clamp((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i32_zero((int *)&tmp, surfObject, x, y);
  }
  *retVal = make_uint1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i64_trap((long long *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i64_clamp((long long *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i64_zero((long long *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i64_trap((long long *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i64_clamp((long long *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i64_zero((long long *)&tmp, surfObject, x, y);
  }
  *retVal = make_longlong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i64_trap((long long *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i64_clamp((long long *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i64_zero((long long *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i64_trap((long long *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i64_clamp((long long *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i64_zero((long long *)&tmp, surfObject, x, y);
  }
  *retVal = make_ulonglong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i32_trap((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i32_clamp((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i32_zero((int *)&tmp, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_i32_trap((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_i32_clamp((int *)&tmp, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_i32_zero((int *)&tmp, surfObject, x, y);
  }
  *retVal = make_float1(tmp);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  char2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  short2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  int2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  uint2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  longlong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  ulonglong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  float2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  char4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  short4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  int4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  uint4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  float4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i8_trap((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i8_clamp((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i8_zero((char *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  signed char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i8_trap((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i8_clamp((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i8_zero((char *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i8_trap((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i8_clamp((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i8_zero((char *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_char1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i8_trap((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i8_clamp((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i8_zero((char *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i8_trap((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i8_clamp((char *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i8_zero((char *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_uchar1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i16_trap((short *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i16_clamp((short *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i16_zero((short *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i16_trap((short *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i16_clamp((short *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i16_zero((short *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_short1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i16_trap((short *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i16_clamp((short *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i16_zero((short *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i16_trap((short *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i16_clamp((short *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i16_zero((short *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_ushort1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i32_trap((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i32_clamp((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i32_zero((int *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i32_trap((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i32_clamp((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i32_zero((int *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_int1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i32_trap((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i32_clamp((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i32_zero((int *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i32_trap((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i32_clamp((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i32_zero((int *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_uint1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i64_trap((long long *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i64_clamp((long long *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i64_zero((long long *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i64_trap((long long *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i64_clamp((long long *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i64_zero((long long *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_longlong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i64_trap((long long *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i64_clamp((long long *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i64_zero((long long *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i64_trap((long long *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i64_clamp((long long *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i64_zero((long long *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_ulonglong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i32_trap((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i32_clamp((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i32_zero((int *)&tmp, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_i32_trap((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_i32_clamp((int *)&tmp, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_i32_zero((int *)&tmp, surfObject, x, y, z);
  }
  *retVal = make_float1(tmp);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  char2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  short2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  int2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  uint2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  longlong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  ulonglong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  float2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, x, y, z);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  char4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  short4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  int4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  uint4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  float4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_3d_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_3d_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_3d_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, x, y, z);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i8_trap((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i8_clamp((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i8_zero((char *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  signed char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i8_trap((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i8_clamp((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i8_zero((char *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i8_trap((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i8_clamp((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i8_zero((char *)&tmp, surfObject, layer, x);
  }
  *retVal = make_char1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i8_trap((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i8_clamp((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i8_zero((char *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i8_trap((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i8_clamp((char *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i8_zero((char *)&tmp, surfObject, layer, x);
  }
  *retVal = make_uchar1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i16_trap((short *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i16_clamp((short *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i16_zero((short *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i16_trap((short *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i16_clamp((short *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i16_zero((short *)&tmp, surfObject, layer, x);
  }
  *retVal = make_short1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i16_trap((short *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i16_clamp((short *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i16_zero((short *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i16_trap((short *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i16_clamp((short *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i16_zero((short *)&tmp, surfObject, layer, x);
  }
  *retVal = make_ushort1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i32_trap((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i32_clamp((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i32_zero((int *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i32_trap((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i32_clamp((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i32_zero((int *)&tmp, surfObject, layer, x);
  }
  *retVal = make_int1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i32_trap((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i32_clamp((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i32_zero((int *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i32_trap((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i32_clamp((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i32_zero((int *)&tmp, surfObject, layer, x);
  }
  *retVal = make_uint1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i64_trap((long long *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i64_clamp((long long *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i64_zero((long long *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i64_trap((long long *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i64_clamp((long long *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i64_zero((long long *)&tmp, surfObject, layer, x);
  }
  *retVal = make_longlong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i64_trap((long long *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i64_clamp((long long *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i64_zero((long long *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i64_trap((long long *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i64_clamp((long long *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i64_zero((long long *)&tmp, surfObject, layer, x);
  }
  *retVal = make_ulonglong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i32_trap((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i32_clamp((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i32_zero((int *)&tmp, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_i32_trap((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_i32_clamp((int *)&tmp, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_i32_zero((int *)&tmp, surfObject, layer, x);
  }
  *retVal = make_float1(tmp);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  char2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  short2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  int2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  uint2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  longlong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  ulonglong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  float2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  char4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  short4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  int4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  uint4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  float4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_1d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_1d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_1d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  signed char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_char1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_uchar1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_short1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_ushort1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_int1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_uint1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_longlong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_ulonglong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layer, x, y);
  }
  *retVal = make_float1(tmp);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  char2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  short2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  int2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  uint2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  longlong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  ulonglong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  float2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layer, x, y);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  char4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  short4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  int4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  uint4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  float4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layer, x, y);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  signed char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_char1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_uchar1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_short1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_ushort1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_int1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_uint1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_longlong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_ulonglong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, face, x, y);
  }
  *retVal = make_float1(tmp);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  char2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  short2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  int2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  uint2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  longlong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  ulonglong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  float2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, face, x, y);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  char4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  short4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  int4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  uint4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  float4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, face, x, y);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  signed char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_char1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned char tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i8_trap((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i8_clamp((char *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i8_zero((char *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_uchar1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_short1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned short tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i16_trap((short *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i16_clamp((short *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i16_zero((short *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_ushort1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_int1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned int tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_uint1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_longlong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  unsigned long long tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i64_trap((long long *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i64_clamp((long long *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i64_zero((long long *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_ulonglong1(tmp);
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  float tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_i32_trap((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_i32_clamp((int *)&tmp, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_i32_zero((int *)&tmp, surfObject, layerface, x, y);
  }
  *retVal = make_float1(tmp);
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  char2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i8_trap((char *)&tmp.x, (char *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i8_clamp((char *)&tmp.x, (char *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i8_zero((char *)&tmp.x, (char *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  short2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i16_trap((short *)&tmp.x, (short *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i16_clamp((short *)&tmp.x, (short *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i16_zero((short *)&tmp.x, (short *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  int2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  uint2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  longlong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  ulonglong2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i64_trap((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i64_clamp((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i64_zero((long long *)&tmp.x, (long long *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  float2 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v2i32_trap((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v2i32_clamp((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v2i32_zero((int *)&tmp.x, (int *)&tmp.y, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  char4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  uchar4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i8_trap((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i8_clamp((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i8_zero((char *)&tmp.x, (char *)&tmp.y, (char *)&tmp.z, (char *)&tmp.w, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  short4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  ushort4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i16_trap((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i16_clamp((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i16_zero((short *)&tmp.x, (short *)&tmp.y, (short *)&tmp.z, (short *)&tmp.w, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  int4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  uint4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  float4 tmp;
  if (boundaryMode == cudaBoundaryModeTrap) {
    __suld_2d_array_v4i32_trap((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __suld_2d_array_v4i32_clamp((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __suld_2d_array_v4i32_zero((int *)&tmp.x, (int *)&tmp.y, (int *)&tmp.z, (int *)&tmp.w, surfObject, layerface, x, y);
  }
  *retVal = tmp;
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i8_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i8_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i8_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i8_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i8_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i8_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i8_trap(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i8_clamp(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i8_zero(surfObject, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i8_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i8_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i8_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i8_trap(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i8_clamp(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i8_zero(surfObject, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i16_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i16_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i16_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i16_trap(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i16_clamp(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i16_zero(surfObject, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i16_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i16_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i16_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i16_trap(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i16_clamp(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i16_zero(surfObject, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i32_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i32_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i32_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i32_trap(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i32_clamp(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i32_zero(surfObject, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i32_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i32_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i32_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i32_trap(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i32_clamp(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i32_zero(surfObject, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i64_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i64_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i64_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i64_trap(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i64_clamp(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i64_zero(surfObject, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i64_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i64_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i64_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i64_trap(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i64_clamp(surfObject, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i64_zero(surfObject, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i32_trap(surfObject, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i32_clamp(surfObject, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i32_zero(surfObject, x, cvt.i);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data.x;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_i32_trap(surfObject, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_i32_clamp(surfObject, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_i32_zero(surfObject, x, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i8_trap(surfObject, x, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i8_clamp(surfObject, x, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i8_zero(surfObject, x, make_uchar2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i8_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i8_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i8_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i16_trap(surfObject, x, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i16_clamp(surfObject, x, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i16_zero(surfObject, x, make_ushort2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i16_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i16_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i16_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i32_trap(surfObject, x, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i32_clamp(surfObject, x, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i32_zero(surfObject, x, make_uint2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i32_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i32_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i32_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i64_trap(surfObject, x, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i64_clamp(surfObject, x, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i64_zero(surfObject, x, make_ulonglong2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i64_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i64_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i64_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float2 f; uint2 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v2i32_trap(surfObject, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v2i32_clamp(surfObject, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v2i32_zero(surfObject, x, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v4i8_trap(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v4i8_clamp(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v4i8_zero(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v4i8_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v4i8_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v4i8_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v4i16_trap(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v4i16_clamp(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v4i16_zero(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v4i16_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v4i16_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v4i16_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v4i32_trap(surfObject, x, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v4i32_clamp(surfObject, x, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v4i32_zero(surfObject, x, make_uint4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v4i32_trap(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v4i32_clamp(surfObject, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v4i32_zero(surfObject, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float4 f; uint4 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_v4i32_trap(surfObject, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_v4i32_clamp(surfObject, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_v4i32_zero(surfObject, x, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i8_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i8_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i8_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i8_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i8_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i8_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i8_trap(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i8_clamp(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i8_zero(surfObject, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i8_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i8_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i8_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i8_trap(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i8_clamp(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i8_zero(surfObject, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i16_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i16_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i16_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i16_trap(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i16_clamp(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i16_zero(surfObject, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i16_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i16_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i16_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i16_trap(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i16_clamp(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i16_zero(surfObject, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i32_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i32_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i32_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i32_trap(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i32_clamp(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i32_zero(surfObject, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i32_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i32_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i32_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i32_trap(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i32_clamp(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i32_zero(surfObject, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i64_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i64_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i64_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i64_trap(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i64_clamp(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i64_zero(surfObject, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i64_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i64_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i64_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i64_trap(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i64_clamp(surfObject, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i64_zero(surfObject, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i32_trap(surfObject, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i32_clamp(surfObject, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i32_zero(surfObject, x, y, cvt.i);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data.x;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_i32_trap(surfObject, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_i32_clamp(surfObject, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_i32_zero(surfObject, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i8_trap(surfObject, x, y, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i8_clamp(surfObject, x, y, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i8_zero(surfObject, x, y, make_uchar2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i8_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i8_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i8_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i16_trap(surfObject, x, y, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i16_clamp(surfObject, x, y, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i16_zero(surfObject, x, y, make_ushort2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i16_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i16_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i16_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i32_trap(surfObject, x, y, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i32_clamp(surfObject, x, y, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i32_zero(surfObject, x, y, make_uint2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i32_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i32_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i32_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i64_trap(surfObject, x, y, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i64_clamp(surfObject, x, y, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i64_zero(surfObject, x, y, make_ulonglong2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i64_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i64_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i64_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float2 f; uint2 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v2i32_trap(surfObject, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v2i32_clamp(surfObject, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v2i32_zero(surfObject, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v4i8_trap(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v4i8_clamp(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v4i8_zero(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v4i8_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v4i8_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v4i8_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v4i16_trap(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v4i16_clamp(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v4i16_zero(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v4i16_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v4i16_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v4i16_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v4i32_trap(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v4i32_clamp(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v4i32_zero(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v4i32_trap(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v4i32_clamp(surfObject, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v4i32_zero(surfObject, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float4 f; uint4 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_v4i32_trap(surfObject, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_v4i32_clamp(surfObject, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_v4i32_zero(surfObject, x, y, cvt.i);
  }
}
# 4848 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.hpp"
static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i8_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i8_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i8_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i8_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i8_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i8_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i8_trap(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i8_clamp(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i8_zero(surfObject, x, y, z, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i8_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i8_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i8_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i8_trap(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i8_clamp(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i8_zero(surfObject, x, y, z, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i16_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i16_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i16_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i16_trap(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i16_clamp(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i16_zero(surfObject, x, y, z, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i16_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i16_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i16_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i16_trap(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i16_clamp(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i16_zero(surfObject, x, y, z, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i32_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i32_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i32_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i32_trap(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i32_clamp(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i32_zero(surfObject, x, y, z, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i32_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i32_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i32_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i32_trap(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i32_clamp(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i32_zero(surfObject, x, y, z, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i64_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i64_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i64_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i64_trap(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i64_clamp(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i64_zero(surfObject, x, y, z, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i64_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i64_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i64_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i64_trap(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i64_clamp(surfObject, x, y, z, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i64_zero(surfObject, x, y, z, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i32_trap(surfObject, x, y, z, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i32_clamp(surfObject, x, y, z, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i32_zero(surfObject, x, y, z, cvt.i);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data.x;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_i32_trap(surfObject, x, y, z, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_i32_clamp(surfObject, x, y, z, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_i32_zero(surfObject, x, y, z, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i8_trap(surfObject, x, y, z, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i8_clamp(surfObject, x, y, z, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i8_zero(surfObject, x, y, z, make_uchar2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i8_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i8_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i8_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i16_trap(surfObject, x, y, z, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i16_clamp(surfObject, x, y, z, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i16_zero(surfObject, x, y, z, make_ushort2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i16_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i16_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i16_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i32_trap(surfObject, x, y, z, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i32_clamp(surfObject, x, y, z, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i32_zero(surfObject, x, y, z, make_uint2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i32_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i32_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i32_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i64_trap(surfObject, x, y, z, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i64_clamp(surfObject, x, y, z, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i64_zero(surfObject, x, y, z, make_ulonglong2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i64_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i64_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i64_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float2 f; uint2 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v2i32_trap(surfObject, x, y, z, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v2i32_clamp(surfObject, x, y, z, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v2i32_zero(surfObject, x, y, z, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v4i8_trap(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v4i8_clamp(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v4i8_zero(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v4i8_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v4i8_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v4i8_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v4i16_trap(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v4i16_clamp(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v4i16_zero(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v4i16_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v4i16_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v4i16_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v4i32_trap(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v4i32_clamp(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v4i32_zero(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v4i32_trap(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v4i32_clamp(surfObject, x, y, z, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v4i32_zero(surfObject, x, y, z, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf3Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float4 f; uint4 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_3d_v4i32_trap(surfObject, x, y, z, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_3d_v4i32_clamp(surfObject, x, y, z, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_3d_v4i32_zero(surfObject, x, y, z, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i8_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i8_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i8_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i8_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i8_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i8_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i8_trap(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i8_clamp(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i8_zero(surfObject, layer, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i8_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i8_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i8_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i8_trap(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i8_clamp(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i8_zero(surfObject, layer, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i16_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i16_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i16_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i16_trap(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i16_clamp(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i16_zero(surfObject, layer, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i16_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i16_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i16_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i16_trap(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i16_clamp(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i16_zero(surfObject, layer, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i32_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i32_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i32_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i32_trap(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i32_clamp(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i32_zero(surfObject, layer, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i32_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i32_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i32_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i32_trap(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i32_clamp(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i32_zero(surfObject, layer, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i64_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i64_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i64_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i64_trap(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i64_clamp(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i64_zero(surfObject, layer, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i64_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i64_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i64_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i64_trap(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i64_clamp(surfObject, layer, x, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i64_zero(surfObject, layer, x, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i32_trap(surfObject, layer, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i32_clamp(surfObject, layer, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i32_zero(surfObject, layer, x, cvt.i);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data.x;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_i32_trap(surfObject, layer, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_i32_clamp(surfObject, layer, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_i32_zero(surfObject, layer, x, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i8_trap(surfObject, layer, x, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i8_clamp(surfObject, layer, x, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i8_zero(surfObject, layer, x, make_uchar2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i8_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i8_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i8_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i16_trap(surfObject, layer, x, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i16_clamp(surfObject, layer, x, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i16_zero(surfObject, layer, x, make_ushort2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i16_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i16_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i16_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i32_trap(surfObject, layer, x, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i32_clamp(surfObject, layer, x, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i32_zero(surfObject, layer, x, make_uint2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i32_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i32_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i32_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i64_trap(surfObject, layer, x, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i64_clamp(surfObject, layer, x, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i64_zero(surfObject, layer, x, make_ulonglong2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i64_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i64_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i64_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float2 f; uint2 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v2i32_trap(surfObject, layer, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v2i32_clamp(surfObject, layer, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v2i32_zero(surfObject, layer, x, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v4i8_trap(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v4i8_clamp(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v4i8_zero(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v4i8_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v4i8_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v4i8_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v4i16_trap(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v4i16_clamp(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v4i16_zero(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v4i16_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v4i16_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v4i16_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v4i32_trap(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v4i32_clamp(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v4i32_zero(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v4i32_trap(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v4i32_clamp(surfObject, layer, x, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v4i32_zero(surfObject, layer, x, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf1DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float4 f; uint4 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_1d_array_v4i32_trap(surfObject, layer, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_1d_array_v4i32_clamp(surfObject, layer, x, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_1d_array_v4i32_zero(surfObject, layer, x, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layer, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layer, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, layer, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, layer, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layer, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layer, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, layer, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, layer, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layer, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layer, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layer, x, y, cvt.i);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data.x;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layer, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layer, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layer, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i8_trap(surfObject, layer, x, y, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i8_clamp(surfObject, layer, x, y, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i8_zero(surfObject, layer, x, y, make_uchar2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i8_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i8_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i8_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i16_trap(surfObject, layer, x, y, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i16_clamp(surfObject, layer, x, y, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i16_zero(surfObject, layer, x, y, make_ushort2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i16_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i16_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i16_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, make_uint2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i64_trap(surfObject, layer, x, y, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i64_clamp(surfObject, layer, x, y, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i64_zero(surfObject, layer, x, y, make_ulonglong2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i64_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i64_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i64_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float2 f; uint2 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i8_trap(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i8_clamp(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i8_zero(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i8_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i8_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i8_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i16_trap(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i16_clamp(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i16_zero(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i16_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i16_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i16_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surf2DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float4 f; uint4 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, face, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, face, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, face, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, face, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, face, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, face, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, face, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, face, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, face, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, face, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, face, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, face, x, y, cvt.i);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data.x;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, face, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, face, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, face, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i8_trap(surfObject, face, x, y, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i8_clamp(surfObject, face, x, y, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i8_zero(surfObject, face, x, y, make_uchar2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i8_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i8_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i8_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i16_trap(surfObject, face, x, y, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i16_clamp(surfObject, face, x, y, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i16_zero(surfObject, face, x, y, make_ushort2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i16_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i16_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i16_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, face, x, y, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, face, x, y, make_uint2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i64_trap(surfObject, face, x, y, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i64_clamp(surfObject, face, x, y, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i64_zero(surfObject, face, x, y, make_ulonglong2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i64_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i64_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i64_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float2 f; uint2 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, face, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, face, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i8_trap(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i8_clamp(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i8_zero(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i8_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i8_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i8_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i16_trap(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i16_clamp(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i16_zero(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i16_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i16_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i16_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, face, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float4 f; uint4 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, face, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, face, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data.x);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data.x);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layerface, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layerface, x, y, cvt.i);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float f; unsigned int i; } cvt;
  cvt.f = data.x;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_i32_trap(surfObject, layerface, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_i32_zero(surfObject, layerface, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i8_trap(surfObject, layerface, x, y, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i8_clamp(surfObject, layerface, x, y, make_uchar2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i8_zero(surfObject, layerface, x, y, make_uchar2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i8_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i8_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i8_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i16_trap(surfObject, layerface, x, y, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i16_clamp(surfObject, layerface, x, y, make_ushort2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i16_zero(surfObject, layerface, x, y, make_ushort2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i16_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i16_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i16_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, make_uint2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, make_uint2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i64_trap(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i64_clamp(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i64_zero(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i64_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i64_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i64_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float2 f; uint2 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, cvt.i);
  }
}







static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i8_trap(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i8_clamp(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i8_zero(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i8_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i8_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i8_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i16_trap(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i16_clamp(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i16_zero(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i16_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i16_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i16_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w));
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, data);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, data);
  }
}

static __inline__ __attribute__((always_inline)) __attribute__((device)) void surfCubemapLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode)
{
  union { float4 f; uint4 i; } cvt;
  cvt.f = data;

  if (boundaryMode == cudaBoundaryModeTrap) {
    __sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeClamp) {
    __sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, cvt.i);
  }
  else if (boundaryMode == cudaBoundaryModeZero) {
    __sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, cvt.i);
  }
}
# 1743 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/surface_indirect_functions.h" 2
# 4199 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_functions.h" 2
# 108 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_launch_parameters.h" 1
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/device_launch_parameters.h"
extern "C" {


uint3 __attribute__((device_builtin)) extern const threadIdx;
uint3 __attribute__((device_builtin)) extern const blockIdx;
dim3 __attribute__((device_builtin)) extern const blockDim;
dim3 __attribute__((device_builtin)) extern const gridDim;
int __attribute__((device_builtin)) extern const warpSize;




}
# 109 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h" 2
# 164 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}
# 202 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaSetupArgument(
  T arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}
# 241 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaEventCreate(
  cudaEvent_t *event,
  unsigned int flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
# 304 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  void **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostAlloc(
  T **ptr,
  size_t size,
  unsigned int flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaHostGetDevicePointer(
  T **pDevice,
  void *pHost,
  unsigned int flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}
# 402 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocManaged(
  T **devPtr,
  size_t size,
  unsigned int flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}
# 478 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t stream,
  T *devPtr,
  size_t length = 0,
  unsigned int flags = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMalloc(
  T **devPtr,
  size_t size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocHost(
  T **ptr,
  size_t size,
  unsigned int flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMallocPitch(
  T **devPtr,
  size_t *pitch,
  size_t width,
  size_t height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}
# 554 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbol(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}
# 606 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyToSymbolAsync(
  const T &symbol,
  const void *src,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyHostToDevice,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}
# 652 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbol(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}
# 704 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaMemcpyFromSymbolAsync(
        void *dst,
  const T &symbol,
        size_t count,
        size_t offset = 0,
        enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost,
        cudaStream_t stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}
# 737 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}
# 766 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}
# 809 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
        size_t size = (2147483647 * 2U + 1U)
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}
# 854 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
        size_t size = (2147483647 * 2U + 1U)
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}
# 910 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  const struct cudaChannelFormatDesc &desc,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}
# 968 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTexture2D(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex,
  const void *devPtr,
  size_t width,
  size_t height,
  size_t pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}
# 1010 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}
# 1048 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}
# 1089 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}
# 1127 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t levelArray;
  cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);

  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}
# 1166 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}
# 1200 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim, enum cudaTextureReadMode readMode>
static __inline__ __attribute__((host)) cudaError_t cudaGetTextureAlignmentOffset(
        size_t *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}
# 1252 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetCacheConfig(
  T *func,
  enum cudaFuncCache cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncSetSharedMemConfig(
  T *func,
  enum cudaSharedMemConfig config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}
# 1297 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, 0x00);
}
# 1348 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
    int *numBlocks,
    T func,
    int blockSize,
    size_t dynamicSMemSize,
    unsigned int flags)
{
    return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void*)func, blockSize, dynamicSMemSize, flags);
}




class __cudaOccupancyB2DHelper {
  size_t n;
public:
  inline __attribute__((host)) __attribute__((device)) __cudaOccupancyB2DHelper(size_t n_) : n(n_) {}
  inline __attribute__((host)) __attribute__((device)) size_t operator()(int)
  {
      return n;
  }
};
# 1417 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    cudaError_t status;


    int device;
    struct cudaFuncAttributes attr;


    int maxThreadsPerMultiProcessor;
    int warpSize;
    int devMaxThreadsPerBlock;
    int multiProcessorCount;
    int funcMaxThreadsPerBlock;
    int occupancyLimit;
    int granularity;


    int maxBlockSize = 0;
    int numBlocks = 0;
    int maxOccupancy = 0;


    int blockSizeToTryAligned;
    int blockSizeToTry;
    int blockSizeLimitAligned;
    int occupancyInBlocks;
    int occupancyInThreads;
    int dynamicSMemSize;





    if (!minGridSize || !blockSize || !func) {
        return cudaErrorInvalidValue;
    }





    status = ::cudaGetDevice(&device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &maxThreadsPerMultiProcessor,
        cudaDevAttrMaxThreadsPerMultiProcessor,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &warpSize,
        cudaDevAttrWarpSize,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &devMaxThreadsPerBlock,
        cudaDevAttrMaxThreadsPerBlock,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaDeviceGetAttribute(
        &multiProcessorCount,
        cudaDevAttrMultiProcessorCount,
        device);
    if (status != cudaSuccess) {
        return status;
    }

    status = cudaFuncGetAttributes(&attr, func);
    if (status != cudaSuccess) {
        return status;
    }

    funcMaxThreadsPerBlock = attr.maxThreadsPerBlock;





    occupancyLimit = maxThreadsPerMultiProcessor;
    granularity = warpSize;

    if (blockSizeLimit == 0) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (devMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = devMaxThreadsPerBlock;
    }

    if (funcMaxThreadsPerBlock < blockSizeLimit) {
        blockSizeLimit = funcMaxThreadsPerBlock;
    }

    blockSizeLimitAligned = ((blockSizeLimit + (granularity - 1)) / granularity) * granularity;

    for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) {



        if (blockSizeLimit < blockSizeToTryAligned) {
            blockSizeToTry = blockSizeLimit;
        } else {
            blockSizeToTry = blockSizeToTryAligned;
        }

        dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry);

        status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
            &occupancyInBlocks,
            func,
            blockSizeToTry,
            dynamicSMemSize,
            flags);

        if (status != cudaSuccess) {
            return status;
        }

        occupancyInThreads = blockSizeToTry * occupancyInBlocks;

        if (occupancyInThreads > maxOccupancy) {
            maxBlockSize = blockSizeToTry;
            numBlocks = occupancyInBlocks;
            maxOccupancy = occupancyInThreads;
        }



        if (occupancyLimit == maxOccupancy) {
            break;
        }
    }







    *minGridSize = numBlocks * multiProcessorCount;
    *blockSize = maxBlockSize;

    return status;
}
# 1615 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSize(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0)
{
  return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, 0x00);
}
# 1674 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags(
    int *minGridSize,
    int *blockSize,
    T func,
    size_t dynamicSMemSize = 0,
    int blockSizeLimit = 0,
    unsigned int flags = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, __cudaOccupancyB2DHelper(dynamicSMemSize), blockSizeLimit, flags);
}
# 1717 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<typename UnaryFunction, class T>
static __inline__ __attribute__((host)) __attribute__((device)) cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem(
    int *minGridSize,
    int *blockSize,
    T func,
    UnaryFunction blockSizeToDynamicSMemSize,
    int blockSizeLimit = 0)
{
    return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0x00);
}
# 1764 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}
# 1801 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T>
static __inline__ __attribute__((host)) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}
# 1830 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}
# 1859 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template<class T, int dim>
static __inline__ __attribute__((host)) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}
# 1 "<command-line>" 2
# 1 "main.cu"
# 23 "main.cu"
# 1 "/usr/include/c++/4.8/vector" 1 3
# 58 "/usr/include/c++/4.8/vector" 3
       
# 59 "/usr/include/c++/4.8/vector" 3

# 1 "/usr/include/c++/4.8/bits/stl_algobase.h" 1 3
# 60 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/4.8/bits/functexcept.h" 1 3
# 40 "/usr/include/c++/4.8/bits/functexcept.h" 3
# 1 "/usr/include/c++/4.8/bits/exception_defines.h" 1 3
# 41 "/usr/include/c++/4.8/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "/usr/include/c++/4.8/bits/stl_algobase.h" 2 3


# 1 "/usr/include/c++/4.8/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/4.8/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/4.8/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 54 "/usr/include/c++/4.8/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "/usr/include/c++/4.8/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "/usr/include/c++/4.8/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_pair.h" 1 3
# 59 "/usr/include/c++/4.8/bits/stl_pair.h" 3
# 1 "/usr/include/c++/4.8/bits/move.h" 1 3
# 34 "/usr/include/c++/4.8/bits/move.h" 3
# 1 "/usr/include/c++/4.8/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/4.8/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/4.8/bits/concept_check.h" 3
# 35 "/usr/include/c++/4.8/bits/move.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r)
    {
      return reinterpret_cast<_Tp*>
 (&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
    }


}
# 149 "/usr/include/c++/4.8/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 164 "/usr/include/c++/4.8/bits/move.h" 3
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)




    {

     

      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])



    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "/usr/include/c++/4.8/bits/stl_pair.h" 2 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 95 "/usr/include/c++/4.8/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }



      template<class _U1, class _U2>
 pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }
# 209 "/usr/include/c++/4.8/bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 284 "/usr/include/c++/4.8/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }





}
# 65 "/usr/include/c++/4.8/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h" 1 3
# 62 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h" 3
       
# 63 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 89 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 162 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h" 3
  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };



  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }





  template<typename _Iterator, bool _HasBase>
    struct _Iter_base
    {
      typedef _Iterator iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct _Iter_base<_Iterator, true>
    {
      typedef typename _Iterator::iterator_type iterator_type;
      static iterator_type _S_base(_Iterator __it)
      { return __it.base(); }
    };
# 232 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h" 3

}
# 66 "/usr/include/c++/4.8/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_iterator_base_funcs.h" 1 3
# 62 "/usr/include/c++/4.8/bits/stl_iterator_base_funcs.h" 3
       
# 63 "/usr/include/c++/4.8/bits/stl_iterator_base_funcs.h" 3


# 1 "/usr/include/c++/4.8/debug/debug.h" 1 3
# 46 "/usr/include/c++/4.8/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 66 "/usr/include/c++/4.8/bits/stl_iterator_base_funcs.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }
# 112 "/usr/include/c++/4.8/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 171 "/usr/include/c++/4.8/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }
# 202 "/usr/include/c++/4.8/bits/stl_iterator_base_funcs.h" 3

}
# 67 "/usr/include/c++/4.8/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_iterator.h" 1 3
# 67 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 95 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 159 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 289 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 401 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 428 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 451 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 477 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 492 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 518 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 541 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 567 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 586 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 629 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 655 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 681 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 705 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 803 "/usr/include/c++/4.8/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}
# 68 "/usr/include/c++/4.8/bits/stl_algobase.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{






  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 117 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     



      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;

     

     


      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);



    }
# 163 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 191 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 214 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 237 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 258 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    struct _Niter_base
    : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Niter_base<_Iterator>::iterator_type
    __niter_base(_Iterator __it)
    { return std::_Niter_base<_Iterator>::_S_base(__it); }


  template<typename _Iterator>
    struct _Miter_base
    : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
    { };

  template<typename _Iterator>
    inline typename _Miter_base<_Iterator>::iterator_type
    __miter_base(_Iterator __it)
    { return std::_Miter_base<_Iterator>::_S_base(__it); }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 325 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 363 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 448 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 500 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 528 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 558 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 617 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 675 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 719 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 779 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }
# 941 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {




      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
      ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }



  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }




# 1019 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1051 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1082 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1118 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;


     
     
      ;
      ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1158 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1195 "/usr/include/c++/4.8/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }


}
# 61 "/usr/include/c++/4.8/vector" 2 3
# 1 "/usr/include/c++/4.8/bits/allocator.h" 1 3
# 46 "/usr/include/c++/4.8/bits/allocator.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++allocator.h" 1 3
# 33 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++allocator.h" 3
# 1 "/usr/include/c++/4.8/ext/new_allocator.h" 1 3
# 40 "/usr/include/c++/4.8/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "/usr/include/c++/4.8/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };







      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }
# 128 "/usr/include/c++/4.8/ext/new_allocator.h" 3
      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }

      void
      destroy(pointer __p) { __p->~_Tp(); }

    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++allocator.h" 2 3
# 47 "/usr/include/c++/4.8/bits/allocator.h" 2 3
# 1 "/usr/include/c++/4.8/bits/memoryfwd.h" 1 3
# 46 "/usr/include/c++/4.8/bits/memoryfwd.h" 3
       
# 47 "/usr/include/c++/4.8/bits/memoryfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/4.8/bits/memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 48 "/usr/include/c++/4.8/bits/allocator.h" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{








  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };






    };
# 91 "/usr/include/c++/4.8/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };







      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };
# 218 "/usr/include/c++/4.8/bits/allocator.h" 3

}
# 62 "/usr/include/c++/4.8/vector" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_construct.h" 1 3
# 61 "/usr/include/c++/4.8/bits/stl_construct.h" 3
# 1 "/usr/include/c++/4.8/ext/alloc_traits.h" 1 3
# 32 "/usr/include/c++/4.8/ext/alloc_traits.h" 3
       
# 33 "/usr/include/c++/4.8/ext/alloc_traits.h" 3
# 41 "/usr/include/c++/4.8/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 120 "/usr/include/c++/4.8/ext/alloc_traits.h" 3
template<typename _Alloc>
  struct __alloc_traits



  {
    typedef _Alloc allocator_type;
# 199 "/usr/include/c++/4.8/ext/alloc_traits.h" 3
    typedef typename _Alloc::pointer pointer;
    typedef typename _Alloc::const_pointer const_pointer;
    typedef typename _Alloc::value_type value_type;
    typedef typename _Alloc::reference reference;
    typedef typename _Alloc::const_reference const_reference;
    typedef typename _Alloc::size_type size_type;
    typedef typename _Alloc::difference_type difference_type;

    static pointer
    allocate(_Alloc& __a, size_type __n)
    { return __a.allocate(__n); }

    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
    { __a.deallocate(__p, __n); }

    template<typename _Tp>
      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
      { __a.construct(__p, __arg); }

    static void destroy(_Alloc& __a, pointer __p)
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    {


      std::__alloc_swap<_Alloc>::_S_do_it(__a, __b);
    }

    template<typename _Tp>
      struct rebind
      { typedef typename _Alloc::template rebind<_Tp>::other other; };

  };


}
# 62 "/usr/include/c++/4.8/bits/stl_construct.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 77 "/usr/include/c++/4.8/bits/stl_construct.h" 3
  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    {


      ::new(static_cast<void*>(__p)) _T1(__value);
    }





  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }


}
# 63 "/usr/include/c++/4.8/vector" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_uninitialized.h" 1 3
# 59 "/usr/include/c++/4.8/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 105 "/usr/include/c++/4.8/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_trivial(_ValueType1)
     && __is_trivial(_ValueType2))>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 162 "/usr/include/c++/4.8/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_trivial(_ValueType)>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 216 "/usr/include/c++/4.8/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a((__first),
      (__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 ((__first),
  (__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 346 "/usr/include/c++/4.8/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }
# 653 "/usr/include/c++/4.8/bits/stl_uninitialized.h" 3

}
# 64 "/usr/include/c++/4.8/vector" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_vector.h" 1 3
# 66 "/usr/include/c++/4.8/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
# 101 "/usr/include/c++/4.8/bits/stl_vector.h" 3
 void _M_swap_data(_Vector_impl& __x)
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }
# 159 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 209 "/usr/include/c++/4.8/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 294 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 310 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 397 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }
# 414 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 426 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 478 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 501 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 529 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }
# 644 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 703 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 if (__new_size > size())
   insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 724 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 754 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 769 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 784 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 809 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 827 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 876 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      pointer

      data()
      { return std::__addressof(front()); }




      const_pointer

      data() const
      { return std::__addressof(front()); }
# 900 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
                              __x);
     ++this->_M_impl._M_finish;
   }
 else



   _M_insert_aux(end(), __x);

      }
# 936 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      }
# 972 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 1022 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 1048 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 1074 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 1095 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1107 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      void
      swap(vector& __x)



      {
 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
                           __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1159 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)



     push_back(*__first);

 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1237 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1277 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
# 1322 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      void
      _M_insert_aux(iterator __position, const value_type& __x);
# 1335 "/usr/include/c++/4.8/bits/stl_vector.h" 3
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
# 1389 "/usr/include/c++/4.8/bits/stl_vector.h" 3
    };
# 1402 "/usr/include/c++/4.8/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1419 "/usr/include/c++/4.8/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }


}
# 65 "/usr/include/c++/4.8/vector" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_bvector.h" 1 3
# 63 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };
# 136 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }







      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }
# 465 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate(_S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }

      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };


}




namespace std __attribute__ ((__visibility__ ("default")))
{

# 517 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;





  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_S_nword;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }
# 572 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }


    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
# 611 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }


    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }
# 661 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }
# 672 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }
# 687 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }
# 737 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n)
    {
      if (__n > max_size())
 __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
 _M_reallocate(__n);
    }

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void
    swap(vector& __x)
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }
# 877 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }


    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }






    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }







    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }

    void
    _M_reallocate(size_type __n);
# 977 "/usr/include/c++/4.8/bits/stl_bvector.h" 3
    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };


}
# 66 "/usr/include/c++/4.8/vector" 2 3
# 1 "/usr/include/c++/4.8/bits/range_access.h" 1 3
# 33 "/usr/include/c++/4.8/bits/range_access.h" 3
       
# 34 "/usr/include/c++/4.8/bits/range_access.h" 3
# 67 "/usr/include/c++/4.8/vector" 2 3


# 1 "/usr/include/c++/4.8/bits/vector.tcc" 1 3
# 59 "/usr/include/c++/4.8/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     (this->_M_impl._M_start),
     (this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }
# 105 "/usr/include/c++/4.8/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {
# 127 "/usr/include/c++/4.8/bits/vector.tcc" 3
     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::copy(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
# 184 "/usr/include/c++/4.8/bits/vector.tcc" 3
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }
# 316 "/usr/include/c++/4.8/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)

    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
              (*(this->_M_impl._M_finish - 1))
                            );
   ++this->_M_impl._M_finish;

   _Tp __x_copy = __x;

   std::copy_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                  ;

   *__position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       _Alloc_traits::construct(this->_M_impl,
                         __new_start + __elems_before,



                                __x);

       __new_finish = 0;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (this->_M_impl._M_start, __position.base(),
   __new_start, _M_get_Tp_allocator());

       ++__new_finish;

       __new_finish
  = std::__uninitialized_move_if_noexcept_a
  (__position.base(), this->_M_impl._M_finish,
   __new_finish, _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  _Alloc_traits::destroy(this->_M_impl,
                         __new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }
# 439 "/usr/include/c++/4.8/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::copy_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }
# 591 "/usr/include/c++/4.8/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::copy_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
      iterator(__q, 0));
      this->_M_deallocate();
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }
# 811 "/usr/include/c++/4.8/bits/vector.tcc" 3

}
# 70 "/usr/include/c++/4.8/vector" 2 3
# 24 "main.cu" 2
# 1 "/usr/include/c++/4.8/fstream" 1 3
# 36 "/usr/include/c++/4.8/fstream" 3
       
# 37 "/usr/include/c++/4.8/fstream" 3

# 1 "/usr/include/c++/4.8/istream" 1 3
# 36 "/usr/include/c++/4.8/istream" 3
       
# 37 "/usr/include/c++/4.8/istream" 3

# 1 "/usr/include/c++/4.8/ios" 1 3
# 36 "/usr/include/c++/4.8/ios" 3
       
# 37 "/usr/include/c++/4.8/ios" 3

# 1 "/usr/include/c++/4.8/iosfwd" 1 3
# 36 "/usr/include/c++/4.8/iosfwd" 3
       
# 37 "/usr/include/c++/4.8/iosfwd" 3


# 1 "/usr/include/c++/4.8/bits/stringfwd.h" 1 3
# 37 "/usr/include/c++/4.8/bits/stringfwd.h" 3
       
# 38 "/usr/include/c++/4.8/bits/stringfwd.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{








  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;


  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;


  typedef basic_string<wchar_t> wstring;
# 86 "/usr/include/c++/4.8/bits/stringfwd.h" 3

}
# 40 "/usr/include/c++/4.8/iosfwd" 2 3
# 1 "/usr/include/c++/4.8/bits/postypes.h" 1 3
# 38 "/usr/include/c++/4.8/bits/postypes.h" 3
       
# 39 "/usr/include/c++/4.8/bits/postypes.h" 3

# 1 "/usr/include/c++/4.8/cwchar" 1 3
# 39 "/usr/include/c++/4.8/cwchar" 3
       
# 40 "/usr/include/c++/4.8/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 39 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdarg.h" 1 3 4
# 40 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 42 "/usr/include/wchar.h" 2 3 4
# 51 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 353 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 52 "/usr/include/wchar.h" 2 3 4
# 104 "/usr/include/wchar.h" 3 4


typedef __mbstate_t mbstate_t;






# 132 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;









extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();


extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)
     throw () __attribute__ ((__pure__));

extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));




extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) throw ();


extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         const wchar_t *__restrict __s2, size_t __n) throw ();








extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (const wchar_t *__s) throw () __attribute__ ((__malloc__));





extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));









extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,
         const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (const wchar_t *__s) throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,
        const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 306 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));






extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,
         size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         const char *__restrict __s, size_t __n,
         mbstate_t *__restrict __p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();








extern wint_t __btowc_alias (int __c) __asm ("btowc");
extern __inline __attribute__ ((__gnu_inline__)) wint_t
__attribute__ ((__leaf__)) btowc (int __c) throw ()
{ return (__builtin_constant_p (__c) && __c >= '\0' && __c <= '\x7f'
   ? (wint_t) __c : __btowc_alias (__c)); }

extern int __wctob_alias (wint_t __c) __asm ("wctob");
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) wctob (wint_t __wc) throw ()
{ return (__builtin_constant_p (__wc) && __wc >= L'\0' && __wc <= L'\x7f'
   ? (int) __wc : __wctob_alias (__wc)); }

extern __inline __attribute__ ((__gnu_inline__)) size_t
__attribute__ ((__leaf__)) mbrlen (const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps) throw ()

{ return (__ps != __null
   ? mbrtowc (__null, __s, __n, __ps) : __mbrlen (__s, __n, __null)); }





extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (const wchar_t *__s, size_t __n) throw ();






extern double wcstod (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 530 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    const wchar_t *__restrict __src, size_t __n)
     throw ();






extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (const wchar_t *__restrict __s,
      const wchar_t *__restrict __format, ...)
     throw () ;
# 680 "/usr/include/wchar.h" 3 4









extern int vfwscanf (__FILE *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (const wchar_t *__restrict __s,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 736 "/usr/include/wchar.h" 3 4









extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);

# 801 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 827 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 837 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   const wchar_t *__restrict __format,
   const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     const wchar_t *__restrict __format,
     const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 884 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/wchar2.h" 3 4
extern wchar_t *__wmemcpy_chk (wchar_t *__restrict __s1,
          const wchar_t *__restrict __s2, size_t __n,
          size_t __ns1) throw ();
extern wchar_t *__wmemcpy_alias (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) throw () __asm__ ("" "wmemcpy")


            ;
extern wchar_t *__wmemcpy_chk_warn (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n, size_t __ns1) throw () __asm__ ("" "__wmemcpy_chk")



     __attribute__((__warning__ ("wmemcpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemcpy (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) throw ()

{
  if (__builtin_object_size (__s1, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wmemcpy_chk (__s1, __s2, __n,
         __builtin_object_size (__s1, 0) / sizeof (wchar_t));

      if (__n > __builtin_object_size (__s1, 0) / sizeof (wchar_t))
 return __wmemcpy_chk_warn (__s1, __s2, __n,
       __builtin_object_size (__s1, 0) / sizeof (wchar_t));
    }
  return __wmemcpy_alias (__s1, __s2, __n);
}


extern wchar_t *__wmemmove_chk (wchar_t *__s1, const wchar_t *__s2,
    size_t __n, size_t __ns1) throw ();
extern wchar_t *__wmemmove_alias (wchar_t *__s1, const wchar_t *__s2, size_t __n) throw () __asm__ ("" "wmemmove")

                               ;
extern wchar_t *__wmemmove_chk_warn (wchar_t *__s1, const wchar_t *__s2, size_t __n, size_t __ns1) throw () __asm__ ("" "__wmemmove_chk")


     __attribute__((__warning__ ("wmemmove called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n) throw ()
{
  if (__builtin_object_size (__s1, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wmemmove_chk (__s1, __s2, __n,
          __builtin_object_size (__s1, 0) / sizeof (wchar_t));

      if (__n > __builtin_object_size (__s1, 0) / sizeof (wchar_t))
 return __wmemmove_chk_warn (__s1, __s2, __n,
        __builtin_object_size (__s1, 0) / sizeof (wchar_t));
    }
  return __wmemmove_alias (__s1, __s2, __n);
}



extern wchar_t *__wmempcpy_chk (wchar_t *__restrict __s1,
    const wchar_t *__restrict __s2, size_t __n,
    size_t __ns1) throw ();
extern wchar_t *__wmempcpy_alias (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) throw () __asm__ ("" "wmempcpy")


                           ;
extern wchar_t *__wmempcpy_chk_warn (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n, size_t __ns1) throw () __asm__ ("" "__wmempcpy_chk")



     __attribute__((__warning__ ("wmempcpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmempcpy (wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n) throw ()

{
  if (__builtin_object_size (__s1, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wmempcpy_chk (__s1, __s2, __n,
          __builtin_object_size (__s1, 0) / sizeof (wchar_t));

      if (__n > __builtin_object_size (__s1, 0) / sizeof (wchar_t))
 return __wmempcpy_chk_warn (__s1, __s2, __n,
        __builtin_object_size (__s1, 0) / sizeof (wchar_t));
    }
  return __wmempcpy_alias (__s1, __s2, __n);
}



extern wchar_t *__wmemset_chk (wchar_t *__s, wchar_t __c, size_t __n,
          size_t __ns) throw ();
extern wchar_t *__wmemset_alias (wchar_t *__s, wchar_t __c, size_t __n) throw () __asm__ ("" "wmemset")
                             ;
extern wchar_t *__wmemset_chk_warn (wchar_t *__s, wchar_t __c, size_t __n, size_t __ns) throw () __asm__ ("" "__wmemset_chk")


     __attribute__((__warning__ ("wmemset called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ()
{
  if (__builtin_object_size (__s, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wmemset_chk (__s, __c, __n, __builtin_object_size (__s, 0) / sizeof (wchar_t));

      if (__n > __builtin_object_size (__s, 0) / sizeof (wchar_t))
 return __wmemset_chk_warn (__s, __c, __n,
       __builtin_object_size (__s, 0) / sizeof (wchar_t));
    }
  return __wmemset_alias (__s, __c, __n);
}


extern wchar_t *__wcscpy_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __n) throw ();
extern wchar_t *__wcscpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw () __asm__ ("" "wcscpy")

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcscpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    return __wcscpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcscpy_alias (__dest, __src);
}


extern wchar_t *__wcpcpy_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __destlen) throw ();
extern wchar_t *__wcpcpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw () __asm__ ("" "wcpcpy")

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcpcpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    return __wcpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcpcpy_alias (__dest, __src);
}


extern wchar_t *__wcsncpy_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src, size_t __n,
          size_t __destlen) throw ();
extern wchar_t *__wcsncpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw () __asm__ ("" "wcsncpy")


                          ;
extern wchar_t *__wcsncpy_chk_warn (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n, size_t __destlen) throw () __asm__ ("" "__wcsncpy_chk")



     __attribute__((__warning__ ("wcsncpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcsncpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw ()

{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wcsncpy_chk (__dest, __src, __n,
         __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
      if (__n > __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t))
 return __wcsncpy_chk_warn (__dest, __src, __n,
       __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
    }
  return __wcsncpy_alias (__dest, __src, __n);
}


extern wchar_t *__wcpncpy_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src, size_t __n,
          size_t __destlen) throw ();
extern wchar_t *__wcpncpy_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw () __asm__ ("" "wcpncpy")


                          ;
extern wchar_t *__wcpncpy_chk_warn (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n, size_t __destlen) throw () __asm__ ("" "__wcpncpy_chk")



     __attribute__((__warning__ ("wcpncpy called with length bigger than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcpncpy (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw ()

{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n))
 return __wcpncpy_chk (__dest, __src, __n,
         __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
      if (__n > __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t))
 return __wcpncpy_chk_warn (__dest, __src, __n,
       __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
    }
  return __wcpncpy_alias (__dest, __src, __n);
}


extern wchar_t *__wcscat_chk (wchar_t *__restrict __dest,
         const wchar_t *__restrict __src,
         size_t __destlen) throw ();
extern wchar_t *__wcscat_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw () __asm__ ("" "wcscat")

                                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcscat (wchar_t *__restrict __dest, const wchar_t *__restrict __src) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    return __wcscat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcscat_alias (__dest, __src);
}


extern wchar_t *__wcsncat_chk (wchar_t *__restrict __dest,
          const wchar_t *__restrict __src,
          size_t __n, size_t __destlen) throw ();
extern wchar_t *__wcsncat_alias (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw () __asm__ ("" "wcsncat")


                          ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) wchar_t *
__attribute__ ((__leaf__)) wcsncat (wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n) throw ()

{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1)
    return __wcsncat_chk (__dest, __src, __n,
     __builtin_object_size (__dest, 2 > 1) / sizeof (wchar_t));
  return __wcsncat_alias (__dest, __src, __n);
}


extern int __swprintf_chk (wchar_t *__restrict __s, size_t __n,
      int __flag, size_t __s_len,
      const wchar_t *__restrict __format, ...)
     throw () ;

extern int __swprintf_alias (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, ...) throw () __asm__ ("" "swprintf")


             ;


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) swprintf (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, ...) throw ()

{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 || 2 > 1)
    return __swprintf_chk (__s, __n, 2 - 1,
      __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
      __fmt, __builtin_va_arg_pack ());
  return __swprintf_alias (__s, __n, __fmt, __builtin_va_arg_pack ());
}
# 303 "/usr/include/x86_64-linux-gnu/bits/wchar2.h" 3 4
extern int __vswprintf_chk (wchar_t *__restrict __s, size_t __n,
       int __flag, size_t __s_len,
       const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;

extern int __vswprintf_alias (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, __gnuc_va_list __ap) throw () __asm__ ("" "vswprintf")


                                     ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vswprintf (wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 || 2 > 1)
    return __vswprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t), __fmt, __ap);
  return __vswprintf_alias (__s, __n, __fmt, __ap);
}




extern int __fwprintf_chk (__FILE *__restrict __stream, int __flag,
      const wchar_t *__restrict __format, ...);
extern int __wprintf_chk (int __flag, const wchar_t *__restrict __format,
     ...);
extern int __vfwprintf_chk (__FILE *__restrict __stream, int __flag,
       const wchar_t *__restrict __format,
       __gnuc_va_list __ap);
extern int __vwprintf_chk (int __flag, const wchar_t *__restrict __format,
      __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
wprintf (const wchar_t *__restrict __fmt, ...)
{
  return __wprintf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fwprintf (__FILE *__restrict __stream, const wchar_t *__restrict __fmt, ...)
{
  return __fwprintf_chk (__stream, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vwprintf (const wchar_t *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vwprintf_chk (2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfwprintf (__FILE *__restrict __stream,
    const wchar_t *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfwprintf_chk (__stream, 2 - 1, __fmt, __ap);
}



extern wchar_t *__fgetws_chk (wchar_t *__restrict __s, size_t __size, int __n,
         __FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_alias (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) __asm__ ("" "fgetws")

                                              __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_chk_warn (wchar_t *__restrict __s, size_t __size, int __n, __FILE *__restrict __stream) __asm__ ("" "__fgetws_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgetws called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) wchar_t *
fgetws (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgetws_chk (__s, __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
        __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t))
 return __fgetws_chk_warn (__s, __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
      __n, __stream);
    }
  return __fgetws_alias (__s, __n, __stream);
}


extern wchar_t *__fgetws_unlocked_chk (wchar_t *__restrict __s, size_t __size,
           int __n, __FILE *__restrict __stream)
  __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_unlocked_alias (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) __asm__ ("" "fgetws_unlocked")


  __attribute__ ((__warn_unused_result__));
extern wchar_t *__fgetws_unlocked_chk_warn (wchar_t *__restrict __s, size_t __size, int __n, __FILE *__restrict __stream) __asm__ ("" "__fgetws_unlocked_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgetws_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) wchar_t *
fgetws_unlocked (wchar_t *__restrict __s, int __n, __FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgetws_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
          __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t))
 return __fgetws_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1) / sizeof (wchar_t),
        __n, __stream);
    }
  return __fgetws_unlocked_alias (__s, __n, __stream);
}



extern size_t __wcrtomb_chk (char *__restrict __s, wchar_t __wchar,
        mbstate_t *__restrict __p,
        size_t __buflen) throw () __attribute__ ((__warn_unused_result__));
extern size_t __wcrtomb_alias (char *__restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps) throw () __asm__ ("" "wcrtomb")

                                                __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
__attribute__ ((__leaf__)) wcrtomb (char *__restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps) throw ()

{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wcrtomb_chk (__s, __wchar, __ps, __builtin_object_size (__s, 2 > 1));
  return __wcrtomb_alias (__s, __wchar, __ps);
}


extern size_t __mbsrtowcs_chk (wchar_t *__restrict __dst,
          const char **__restrict __src,
          size_t __len, mbstate_t *__restrict __ps,
          size_t __dstlen) throw ();
extern size_t __mbsrtowcs_alias (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw () __asm__ ("" "mbsrtowcs")



                   ;
extern size_t __mbsrtowcs_chk_warn (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) throw () __asm__ ("" "__mbsrtowcs_chk")




     __attribute__((__warning__ ("mbsrtowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbsrtowcs (wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbsrtowcs_chk (__dst, __src, __len, __ps,
    __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbsrtowcs_chk_warn (__dst, __src, __len, __ps,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbsrtowcs_alias (__dst, __src, __len, __ps);
}


extern size_t __wcsrtombs_chk (char *__restrict __dst,
          const wchar_t **__restrict __src,
          size_t __len, mbstate_t *__restrict __ps,
          size_t __dstlen) throw ();
extern size_t __wcsrtombs_alias (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw () __asm__ ("" "wcsrtombs")



                   ;
extern size_t __wcsrtombs_chk_warn (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) throw () __asm__ ("" "__wcsrtombs_chk")




    __attribute__((__warning__ ("wcsrtombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcsrtombs (char *__restrict __dst, const wchar_t **__restrict __src, size_t __len, mbstate_t *__restrict __ps) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcsrtombs_chk (__dst, __src, __len, __ps, __builtin_object_size (__dst, 2 > 1));

      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcsrtombs_chk_warn (__dst, __src, __len, __ps, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcsrtombs_alias (__dst, __src, __len, __ps);
}



extern size_t __mbsnrtowcs_chk (wchar_t *__restrict __dst,
    const char **__restrict __src, size_t __nmc,
    size_t __len, mbstate_t *__restrict __ps,
    size_t __dstlen) throw ();
extern size_t __mbsnrtowcs_alias (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps) throw () __asm__ ("" "mbsnrtowcs")



                    ;
extern size_t __mbsnrtowcs_chk_warn (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) throw () __asm__ ("" "__mbsnrtowcs_chk")




     __attribute__((__warning__ ("mbsnrtowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbsnrtowcs (wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc, size_t __len, mbstate_t *__restrict __ps) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbsnrtowcs_chk (__dst, __src, __nmc, __len, __ps,
     __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbsnrtowcs_chk_warn (__dst, __src, __nmc, __len, __ps,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbsnrtowcs_alias (__dst, __src, __nmc, __len, __ps);
}


extern size_t __wcsnrtombs_chk (char *__restrict __dst,
    const wchar_t **__restrict __src,
    size_t __nwc, size_t __len,
    mbstate_t *__restrict __ps, size_t __dstlen)
     throw ();
extern size_t __wcsnrtombs_alias (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps) throw () __asm__ ("" "wcsnrtombs")



                                                  ;
extern size_t __wcsnrtombs_chk_warn (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps, size_t __dstlen) throw () __asm__ ("" "__wcsnrtombs_chk")





     __attribute__((__warning__ ("wcsnrtombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcsnrtombs (char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcsnrtombs_chk (__dst, __src, __nwc, __len, __ps,
     __builtin_object_size (__dst, 2 > 1));

      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcsnrtombs_chk_warn (__dst, __src, __nwc, __len, __ps,
          __builtin_object_size (__dst, 2 > 1));
    }
  return __wcsnrtombs_alias (__dst, __src, __nwc, __len, __ps);
}
# 885 "/usr/include/wchar.h" 2 3 4






}
# 45 "/usr/include/c++/4.8/cwchar" 2 3
# 62 "/usr/include/c++/4.8/cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "/usr/include/c++/4.8/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;

  using ::swprintf;

  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;


  using ::vswprintf;


  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 232 "/usr/include/c++/4.8/cwchar" 3

}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "/usr/include/c++/4.8/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 41 "/usr/include/c++/4.8/bits/postypes.h" 2 3
# 68 "/usr/include/c++/4.8/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 88 "/usr/include/c++/4.8/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/4.8/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/4.8/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/4.8/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 239 "/usr/include/c++/4.8/bits/postypes.h" 3

}
# 41 "/usr/include/c++/4.8/iosfwd" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 74 "/usr/include/c++/4.8/iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 39 "/usr/include/c++/4.8/ios" 2 3

# 1 "/usr/include/c++/4.8/bits/char_traits.h" 1 3
# 37 "/usr/include/c++/4.8/bits/char_traits.h" 3
       
# 38 "/usr/include/c++/4.8/bits/char_traits.h" 3



# 1 "/usr/include/c++/4.8/cwchar" 1 3
# 39 "/usr/include/c++/4.8/cwchar" 3
       
# 40 "/usr/include/c++/4.8/cwchar" 3




# 1 "/usr/include/wchar.h" 1 3 4
# 45 "/usr/include/c++/4.8/cwchar" 2 3
# 42 "/usr/include/c++/4.8/bits/char_traits.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/4.8/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 82 "/usr/include/c++/4.8/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std __attribute__ ((__visibility__ ("default")))
{

# 226 "/usr/include/c++/4.8/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>(-1); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}
# 41 "/usr/include/c++/4.8/ios" 2 3
# 1 "/usr/include/c++/4.8/bits/localefwd.h" 1 3
# 37 "/usr/include/c++/4.8/bits/localefwd.h" 3
       
# 38 "/usr/include/c++/4.8/bits/localefwd.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++locale.h" 1 3
# 39 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++locale.h" 3
       
# 40 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++locale.h" 3

# 1 "/usr/include/c++/4.8/clocale" 1 3
# 39 "/usr/include/c++/4.8/clocale" 3
       
# 40 "/usr/include/c++/4.8/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 28 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 29 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/locale.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4

extern "C" {
# 50 "/usr/include/locale.h" 3 4



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 120 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();


# 151 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, const char *__locale,
        __locale_t __base) throw ();
# 186 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 43 "/usr/include/c++/4.8/clocale" 2 3
# 51 "/usr/include/c++/4.8/clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{


  extern "C" __typeof(uselocale) __uselocale;


}


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 88 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }


}
# 41 "/usr/include/c++/4.8/bits/localefwd.h" 2 3

# 1 "/usr/include/c++/4.8/cctype" 1 3
# 39 "/usr/include/c++/4.8/cctype" 3
       
# 40 "/usr/include/c++/4.8/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 28 "/usr/include/ctype.h" 3 4
extern "C" {
# 46 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 104 "/usr/include/ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 271 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 347 "/usr/include/ctype.h" 3 4
}
# 43 "/usr/include/c++/4.8/cctype" 2 3
# 62 "/usr/include/c++/4.8/cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}
# 43 "/usr/include/c++/4.8/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/4.8/bits/localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;


}
# 42 "/usr/include/c++/4.8/ios" 2 3
# 1 "/usr/include/c++/4.8/bits/ios_base.h" 1 3
# 37 "/usr/include/c++/4.8/bits/ios_base.h" 3
       
# 38 "/usr/include/c++/4.8/bits/ios_base.h" 3

# 1 "/usr/include/c++/4.8/ext/atomicity.h" 1 3
# 32 "/usr/include/c++/4.8/ext/atomicity.h" 3
       
# 33 "/usr/include/c++/4.8/ext/atomicity.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr.h" 1 3
# 30 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 148 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 23 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 28 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 29 "/usr/include/sched.h" 2 3 4
# 41 "/usr/include/sched.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sched.h" 1 3 4
# 72 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


extern int setns (int __fd, int __nstype) throw ();



}







struct __sched_param
  {
    int __sched_priority;
  };
# 118 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 201 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () __attribute__ ((__warn_unused_result__));
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 42 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 116 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 24 "/usr/include/pthread.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 28 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 125 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 166 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 201 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 239 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)
  throw () __attribute__ ((__const__));







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));


extern int pthread_getattr_default_np (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_setattr_default_np (const pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getname_np (pthread_t __target_thread, char *__buf,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int pthread_setname_np (pthread_t __target_thread, const char *__name)
     throw () __attribute__ ((__nonnull__ (2)));





extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 505 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 517 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 551 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 753 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
        const struct timespec *__restrict
        __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_getprioceiling (const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));




extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 817 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 899 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         const pthread_condattr_t *__restrict __cond_attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 1011 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       const struct timespec *__restrict __abstime)
     __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (const pthread_condattr_t *
     __restrict __attr,
     int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
     int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1055 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
        int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1122 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1156 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();




extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ()
{
  return __thread1 == __thread2;
}


}
# 36 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 2 3
# 47 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 3
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 101 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));

static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));

static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));

static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));

static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_init) __gthrw_pthread_cond_init __attribute__ ((__weakref__("pthread_cond_init")));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));

static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 236 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 3
static __typeof(pthread_key_create) __gthrw___pthread_key_create __attribute__ ((__weakref__("__pthread_key_create")));
# 246 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
# 658 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    __gthrw_pthread_mutex_init (__mutex, __null);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}


static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}


static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 807 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}


static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}


static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_destroy (__mutex);
}
# 849 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr-default.h" 3
static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 149 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/gthr.h" 2 3


#pragma GCC visibility pop
# 36 "/usr/include/c++/4.8/ext/atomicity.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h" 1 3
# 32 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 37 "/usr/include/c++/4.8/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "/usr/include/c++/4.8/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "/usr/include/c++/4.8/bits/ios_base.h" 2 3

# 1 "/usr/include/c++/4.8/bits/locale_classes.h" 1 3
# 37 "/usr/include/c++/4.8/bits/locale_classes.h" 3
       
# 38 "/usr/include/c++/4.8/bits/locale_classes.h" 3


# 1 "/usr/include/c++/4.8/string" 1 3
# 36 "/usr/include/c++/4.8/string" 3
       
# 37 "/usr/include/c++/4.8/string" 3







# 1 "/usr/include/c++/4.8/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/4.8/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/4.8/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/4.8/bits/cxxabi_forced.h" 1 3
# 34 "/usr/include/c++/4.8/bits/cxxabi_forced.h" 3
       
# 35 "/usr/include/c++/4.8/bits/cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/4.8/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "/usr/include/c++/4.8/string" 2 3



# 1 "/usr/include/c++/4.8/bits/stl_function.h" 1 3
# 59 "/usr/include/c++/4.8/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 100 "/usr/include/c++/4.8/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 139 "/usr/include/c++/4.8/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 203 "/usr/include/c++/4.8/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 267 "/usr/include/c++/4.8/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 350 "/usr/include/c++/4.8/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 421 "/usr/include/c++/4.8/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
# 508 "/usr/include/c++/4.8/bits/stl_function.h" 3
    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 541 "/usr/include/c++/4.8/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "/usr/include/c++/4.8/backward/binders.h" 1 3
# 59 "/usr/include/c++/4.8/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 103 "/usr/include/c++/4.8/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}
# 732 "/usr/include/c++/4.8/bits/stl_function.h" 2 3
# 49 "/usr/include/c++/4.8/string" 2 3



# 1 "/usr/include/c++/4.8/bits/basic_string.h" 1 3
# 37 "/usr/include/c++/4.8/bits/basic_string.h" 3
       
# 38 "/usr/include/c++/4.8/bits/basic_string.h" 3







namespace std __attribute__ ((__visibility__ ("default")))
{

# 111 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 148 "/usr/include/c++/4.8/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 173 "/usr/include/c++/4.8/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {
       this->_M_set_sharable();
       this->_M_length = __n;
       traits_type::assign(this->_M_refdata()[__n], _S_terminal);


     }
 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     {

       ;
       if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
        -1) <= 0)
  {
    ;
    _M_destroy(__a);
  }
     }
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      basic_string()

      : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }







      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 483 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 531 "/usr/include/c++/4.8/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 564 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 604 "/usr/include/c++/4.8/bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }
# 710 "/usr/include/c++/4.8/bits/basic_string.h" 3
    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 739 "/usr/include/c++/4.8/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 752 "/usr/include/c++/4.8/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }
# 775 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 796 "/usr/include/c++/4.8/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }





      bool
      empty() const
      { return this->size() == 0; }
# 825 "/usr/include/c++/4.8/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
 ;
 return _M_data()[__pos];
      }
# 842 "/usr/include/c++/4.8/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

 ;

 ;
 _M_leak();
 return _M_data()[__pos];
      }
# 863 "/usr/include/c++/4.8/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 882 "/usr/include/c++/4.8/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }
# 931 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 972 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 988 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
 ;
 return this->append(__s, traits_type::length(__s));
      }
# 1020 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 1042 "/usr/include/c++/4.8/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 1099 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 1115 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 1127 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return this->assign(__s, traits_type::length(__s));
      }
# 1143 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1155 "/usr/include/c++/4.8/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1184 "/usr/include/c++/4.8/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1200 "/usr/include/c++/4.8/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1232 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1254 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1277 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1295 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1318 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1336 "/usr/include/c++/4.8/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1361 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1377 "/usr/include/c++/4.8/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {

                               ;
 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1397 "/usr/include/c++/4.8/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 1428 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1450 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1475 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1495 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1519 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1537 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1556 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {

                          ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1577 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1598 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {

                          ;
 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1621 "/usr/include/c++/4.8/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                            ;
   ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                          ;
 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1697 "/usr/include/c++/4.8/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct_aux_2(static_cast<size_type>(__beg),
        __end, __a); }

      static _CharT*
      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)
      { return _S_construct(__req, __c, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1779 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1789 "/usr/include/c++/4.8/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1799 "/usr/include/c++/4.8/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1832 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1845 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const

      { return this->find(__str.data(), __pos, __str.size()); }
# 1860 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1877 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const ;
# 1890 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const

      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1907 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1920 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1937 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const ;
# 1951 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const

      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1968 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1981 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2000 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 2015 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const

      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2032 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 2045 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2064 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 2078 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const

      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2095 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 2109 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2126 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
 ;
# 2141 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const

      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2158 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 2172 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2189 "/usr/include/c++/4.8/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
 ;
# 2205 "/usr/include/c++/4.8/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2224 "/usr/include/c++/4.8/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2256 "/usr/include/c++/4.8/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2282 "/usr/include/c++/4.8/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2300 "/usr/include/c++/4.8/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2324 "/usr/include/c++/4.8/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2351 "/usr/include/c++/4.8/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };
# 2363 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2484 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2530 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2567 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2604 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2641 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2678 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2715 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2733 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2751 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2774 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2791 "/usr/include/c++/4.8/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}
# 53 "/usr/include/c++/4.8/string" 2 3
# 1 "/usr/include/c++/4.8/bits/basic_string.tcc" 1 3
# 40 "/usr/include/c++/4.8/bits/basic_string.tcc" 3
       
# 41 "/usr/include/c++/4.8/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 try
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   __throw_logic_error(("basic_string::_S_construct null not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 try
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 240 "/usr/include/c++/4.8/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
      ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
      ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
       ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     typename basic_string<_CharT, _Traits, _Alloc>::iterator
     basic_string<_CharT, _Traits, _Alloc>::
     erase(iterator __first, iterator __last)
     {
      
                           ;




       const size_type __size = __last - __first;
       if (__size)
  {
    const size_type __pos = __first - _M_ibegin();
    _M_mutate(__pos, __size, size_type(0));
    _M_rep()->_M_set_leaked();
    return iterator(_M_data() + __pos);
  }
       else
  return __first;
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
       ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 577 "/usr/include/c++/4.8/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }




  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "/usr/include/c++/4.8/string" 2 3
# 41 "/usr/include/c++/4.8/bits/locale_classes.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{

# 62 "/usr/include/c++/4.8/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    locale() throw();
# 126 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 164 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 177 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 191 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 206 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 225 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 253 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 269 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 304 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 338 "/usr/include/c++/4.8/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 369 "/usr/include/c++/4.8/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 436 "/usr/include/c++/4.8/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 583 "/usr/include/c++/4.8/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 610 "/usr/include/c++/4.8/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 624 "/usr/include/c++/4.8/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 641 "/usr/include/c++/4.8/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 660 "/usr/include/c++/4.8/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 674 "/usr/include/c++/4.8/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 703 "/usr/include/c++/4.8/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 717 "/usr/include/c++/4.8/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 730 "/usr/include/c++/4.8/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "/usr/include/c++/4.8/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/4.8/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/4.8/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "/usr/include/c++/4.8/bits/locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "/usr/include/c++/4.8/bits/locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 788 "/usr/include/c++/4.8/bits/locale_classes.h" 2 3
# 42 "/usr/include/c++/4.8/bits/ios_base.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 2147483647,
      _S_ios_fmtflags_min = ~2147483647
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 2147483647,
      _S_ios_openmode_min = ~2147483647
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 2147483647,
      _S_ios_iostate_min = ~2147483647
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 205 "/usr/include/c++/4.8/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 261 "/usr/include/c++/4.8/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 336 "/usr/include/c++/4.8/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 367 "/usr/include/c++/4.8/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 399 "/usr/include/c++/4.8/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 425 "/usr/include/c++/4.8/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 442 "/usr/include/c++/4.8/bits/ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 454 "/usr/include/c++/4.8/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 567 "/usr/include/c++/4.8/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 583 "/usr/include/c++/4.8/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 600 "/usr/include/c++/4.8/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 626 "/usr/include/c++/4.8/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 677 "/usr/include/c++/4.8/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 689 "/usr/include/c++/4.8/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 700 "/usr/include/c++/4.8/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 711 "/usr/include/c++/4.8/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 730 "/usr/include/c++/4.8/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 746 "/usr/include/c++/4.8/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 767 "/usr/include/c++/4.8/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 784 "/usr/include/c++/4.8/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }


}
# 43 "/usr/include/c++/4.8/ios" 2 3
# 1 "/usr/include/c++/4.8/streambuf" 1 3
# 36 "/usr/include/c++/4.8/streambuf" 3
       
# 37 "/usr/include/c++/4.8/streambuf" 3
# 45 "/usr/include/c++/4.8/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 119 "/usr/include/c++/4.8/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 208 "/usr/include/c++/4.8/streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 225 "/usr/include/c++/4.8/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 238 "/usr/include/c++/4.8/streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 250 "/usr/include/c++/4.8/streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 262 "/usr/include/c++/4.8/streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 283 "/usr/include/c++/4.8/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 297 "/usr/include/c++/4.8/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 315 "/usr/include/c++/4.8/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 337 "/usr/include/c++/4.8/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 356 "/usr/include/c++/4.8/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 371 "/usr/include/c++/4.8/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 396 "/usr/include/c++/4.8/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 423 "/usr/include/c++/4.8/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 449 "/usr/include/c++/4.8/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 463 "/usr/include/c++/4.8/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 481 "/usr/include/c++/4.8/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 497 "/usr/include/c++/4.8/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 508 "/usr/include/c++/4.8/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 528 "/usr/include/c++/4.8/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 544 "/usr/include/c++/4.8/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 554 "/usr/include/c++/4.8/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 575 "/usr/include/c++/4.8/streambuf" 3
      virtual void
      imbue(const locale& __loc)
      { }
# 590 "/usr/include/c++/4.8/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 601 "/usr/include/c++/4.8/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 613 "/usr/include/c++/4.8/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 626 "/usr/include/c++/4.8/streambuf" 3
      virtual int
      sync() { return 0; }
# 648 "/usr/include/c++/4.8/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 664 "/usr/include/c++/4.8/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 686 "/usr/include/c++/4.8/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 699 "/usr/include/c++/4.8/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 723 "/usr/include/c++/4.8/streambuf" 3
      virtual int_type
      pbackfail(int_type __c = traits_type::eof())
      { return traits_type::eof(); }
# 741 "/usr/include/c++/4.8/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 767 "/usr/include/c++/4.8/streambuf" 3
      virtual int_type
      overflow(int_type __c = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 782 "/usr/include/c++/4.8/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }

    private:


      basic_streambuf(const basic_streambuf& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      basic_streambuf&
      operator=(const basic_streambuf&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);



}

# 1 "/usr/include/c++/4.8/bits/streambuf.tcc" 1 3
# 37 "/usr/include/c++/4.8/bits/streambuf.tcc" 3
       
# 38 "/usr/include/c++/4.8/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 829 "/usr/include/c++/4.8/streambuf" 2 3
# 44 "/usr/include/c++/4.8/ios" 2 3
# 1 "/usr/include/c++/4.8/bits/basic_ios.h" 1 3
# 33 "/usr/include/c++/4.8/bits/basic_ios.h" 3
       
# 34 "/usr/include/c++/4.8/bits/basic_ios.h" 3



# 1 "/usr/include/c++/4.8/bits/locale_facets.h" 1 3
# 37 "/usr/include/c++/4.8/bits/locale_facets.h" 3
       
# 38 "/usr/include/c++/4.8/bits/locale_facets.h" 3

# 1 "/usr/include/c++/4.8/cwctype" 1 3
# 39 "/usr/include/c++/4.8/cwctype" 3
       
# 40 "/usr/include/c++/4.8/cwctype" 3
# 50 "/usr/include/c++/4.8/cwctype" 3
# 1 "/usr/include/wctype.h" 1 3 4
# 33 "/usr/include/wctype.h" 3 4
# 1 "/usr/include/wchar.h" 1 3 4
# 34 "/usr/include/wctype.h" 2 3 4
# 49 "/usr/include/wctype.h" 3 4



typedef unsigned long int wctype_t;

# 71 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {








extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 171 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();










typedef const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 213 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();








extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 51 "/usr/include/c++/4.8/cwctype" 2 3
# 80 "/usr/include/c++/4.8/cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "/usr/include/c++/4.8/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.8/cctype" 1 3
# 39 "/usr/include/c++/4.8/cctype" 3
       
# 40 "/usr/include/c++/4.8/cctype" 3
# 41 "/usr/include/c++/4.8/bits/locale_facets.h" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/ctype_base.h" 1 3
# 36 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };


}
# 42 "/usr/include/c++/4.8/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/4.8/bits/streambuf_iterator.h" 1 3
# 33 "/usr/include/c++/4.8/bits/streambuf_iterator.h" 3
       
# 34 "/usr/include/c++/4.8/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 49 "/usr/include/c++/4.8/bits/streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
                      _CharT*,




        _CharT&>

    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }
# 112 "/usr/include/c++/4.8/bits/streambuf_iterator.h" 3
      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {


                        ;
 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {


                        ;

 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }




}
# 49 "/usr/include/c++/4.8/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 64 "/usr/include/c++/4.8/bits/locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 142 "/usr/include/c++/4.8/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 462 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 495 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 535 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 556 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 581 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 604 "/usr/include/c++/4.8/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/usr/include/c++/4.8/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1021 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1054 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const
      { return __c; }
# 1149 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/usr/include/c++/4.8/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1242 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1331 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1364 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1406 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1429 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1455 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/ctype_inline.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }


}
# 1512 "/usr/include/c++/4.8/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1640 "/usr/include/c++/4.8/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1678 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1692 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1706 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1719 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1750 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1763 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1776 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1793 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1805 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1818 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1831 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1844 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };


# 1914 "/usr/include/c++/4.8/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1935 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1961 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1998 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2058 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2101 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2172 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2235 "/usr/include/c++/4.8/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2253 "/usr/include/c++/4.8/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2274 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2292 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2334 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2397 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2422 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2470 "/usr/include/c++/4.8/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "/usr/include/c++/4.8/bits/locale_facets.tcc" 1 3
# 33 "/usr/include/c++/4.8/bits/locale_facets.tcc" 3
       
# 34 "/usr/include/c++/4.8/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   _M_grouping_size = __np.grouping().size();
   __grouping = new char[_M_grouping_size];
   __np.grouping().copy(__grouping, _M_grouping_size);
   _M_grouping = __grouping;
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(_M_grouping[0]) > 0
        && (_M_grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   _M_truename_size = __np.truename().size();
   __truename = new _CharT[_M_truename_size];
   __np.truename().copy(__truename, _M_truename_size);
   _M_truename = __truename;

   _M_falsename_size = __np.falsename().size();
   __falsename = new _CharT[_M_falsename_size];
   __np.falsename().copy(__falsename, _M_falsename_size);
   _M_falsename = __falsename;

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 136 "/usr/include/c++/4.8/bits/locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 730 "/usr/include/c++/4.8/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 966 "/usr/include/c++/4.8/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1027 "/usr/include/c++/4.8/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1152 "/usr/include/c++/4.8/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1189 "/usr/include/c++/4.8/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2609 "/usr/include/c++/4.8/bits/locale_facets.h" 2 3
# 38 "/usr/include/c++/4.8/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 65 "/usr/include/c++/4.8/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 130 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 141 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 194 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 215 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 250 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 288 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 300 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 340 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 354 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 383 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 403 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 423 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 442 "/usr/include/c++/4.8/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "/usr/include/c++/4.8/bits/basic_ios.tcc" 1 3
# 33 "/usr/include/c++/4.8/bits/basic_ios.tcc" 3
       
# 34 "/usr/include/c++/4.8/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "/usr/include/c++/4.8/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 476 "/usr/include/c++/4.8/bits/basic_ios.h" 2 3
# 45 "/usr/include/c++/4.8/ios" 2 3
# 39 "/usr/include/c++/4.8/istream" 2 3
# 1 "/usr/include/c++/4.8/ostream" 1 3
# 36 "/usr/include/c++/4.8/ostream" 3
       
# 37 "/usr/include/c++/4.8/ostream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/4.8/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "/usr/include/c++/4.8/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      flush();
# 357 "/usr/include/c++/4.8/ostream" 3
      pos_type
      tellp();
# 368 "/usr/include/c++/4.8/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "/usr/include/c++/4.8/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 399 "/usr/include/c++/4.8/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 418 "/usr/include/c++/4.8/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 428 "/usr/include/c++/4.8/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 449 "/usr/include/c++/4.8/ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 469 "/usr/include/c++/4.8/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 511 "/usr/include/c++/4.8/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 562 "/usr/include/c++/4.8/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 574 "/usr/include/c++/4.8/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }
# 609 "/usr/include/c++/4.8/ostream" 3

}

# 1 "/usr/include/c++/4.8/bits/ostream.tcc" 1 3
# 37 "/usr/include/c++/4.8/bits/ostream.tcc" 3
       
# 38 "/usr/include/c++/4.8/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 613 "/usr/include/c++/4.8/ostream" 2 3
# 40 "/usr/include/c++/4.8/istream" 2 3

namespace std __attribute__ ((__visibility__ ("default")))
{

# 57 "/usr/include/c++/4.8/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "/usr/include/c++/4.8/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "/usr/include/c++/4.8/istream" 3
      int_type
      get();
# 315 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "/usr/include/c++/4.8/istream" 3
      int_type
      peek();
# 485 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "/usr/include/c++/4.8/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      unget();
# 555 "/usr/include/c++/4.8/istream" 3
      int
      sync();
# 570 "/usr/include/c++/4.8/istream" 3
      pos_type
      tellg();
# 585 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "/usr/include/c++/4.8/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 656 "/usr/include/c++/4.8/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 692 "/usr/include/c++/4.8/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 705 "/usr/include/c++/4.8/istream" 3
      operator bool() const
      { return _M_ok; }
    };
# 721 "/usr/include/c++/4.8/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 763 "/usr/include/c++/4.8/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 794 "/usr/include/c++/4.8/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 854 "/usr/include/c++/4.8/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);
# 879 "/usr/include/c++/4.8/istream" 3

}

# 1 "/usr/include/c++/4.8/bits/istream.tcc" 1 3
# 37 "/usr/include/c++/4.8/bits/istream.tcc" 3
       
# 38 "/usr/include/c++/4.8/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 513 "/usr/include/c++/4.8/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 883 "/usr/include/c++/4.8/istream" 2 3
# 39 "/usr/include/c++/4.8/fstream" 2 3

# 1 "/usr/include/c++/4.8/bits/codecvt.h" 1 3
# 39 "/usr/include/c++/4.8/bits/codecvt.h" 3
       
# 40 "/usr/include/c++/4.8/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default")))
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "/usr/include/c++/4.8/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "/usr/include/c++/4.8/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "/usr/include/c++/4.8/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "/usr/include/c++/4.8/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "/usr/include/c++/4.8/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 275 "/usr/include/c++/4.8/bits/codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs),
 _M_c_locale_codecvt(0)
      { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };




  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);




}
# 41 "/usr/include/c++/4.8/fstream" 2 3
# 1 "/usr/include/c++/4.8/cstdio" 1 3
# 39 "/usr/include/c++/4.8/cstdio" 3
       
# 40 "/usr/include/c++/4.8/cstdio" 3
# 94 "/usr/include/c++/4.8/cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 150 "/usr/include/c++/4.8/cstdio" 3
namespace __gnu_cxx
{
# 168 "/usr/include/c++/4.8/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 42 "/usr/include/c++/4.8/fstream" 2 3
# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/basic_file.h" 1 3
# 37 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/basic_file.h" 3
       
# 38 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/basic_file.h" 3


# 1 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++io.h" 1 3
# 35 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++io.h" 3
# 1 "/usr/include/c++/4.8/cstdio" 1 3
# 39 "/usr/include/c++/4.8/cstdio" 3
       
# 40 "/usr/include/c++/4.8/cstdio" 3
# 36 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/basic_file.h" 2 3


namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();

      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 43 "/usr/include/c++/4.8/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 71 "/usr/include/c++/4.8/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 133 "/usr/include/c++/4.8/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();




      virtual
      ~basic_filebuf()
      { this->close(); }





      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 269 "/usr/include/c++/4.8/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 296 "/usr/include/c++/4.8/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 328 "/usr/include/c++/4.8/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 348 "/usr/include/c++/4.8/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 394 "/usr/include/c++/4.8/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
  const bool __testin = _M_mode & ios_base::in;
  const bool __testout = _M_mode & ios_base::out;

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 426 "/usr/include/c++/4.8/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 453 "/usr/include/c++/4.8/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 466 "/usr/include/c++/4.8/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 498 "/usr/include/c++/4.8/fstream" 3
      ~basic_ifstream()
      { }
# 508 "/usr/include/c++/4.8/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 537 "/usr/include/c++/4.8/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 575 "/usr/include/c++/4.8/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 598 "/usr/include/c++/4.8/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 625 "/usr/include/c++/4.8/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 639 "/usr/include/c++/4.8/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 673 "/usr/include/c++/4.8/fstream" 3
      ~basic_ofstream()
      { }
# 683 "/usr/include/c++/4.8/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 712 "/usr/include/c++/4.8/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 752 "/usr/include/c++/4.8/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 775 "/usr/include/c++/4.8/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 803 "/usr/include/c++/4.8/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 815 "/usr/include/c++/4.8/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 846 "/usr/include/c++/4.8/fstream" 3
      ~basic_fstream()
      { }
# 856 "/usr/include/c++/4.8/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 885 "/usr/include/c++/4.8/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 925 "/usr/include/c++/4.8/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };


}

# 1 "/usr/include/c++/4.8/bits/fstream.tcc" 1 3
# 37 "/usr/include/c++/4.8/bits/fstream.tcc" 3
       
# 38 "/usr/include/c++/4.8/bits/fstream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default")))
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 try
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     _M_file.close();
     throw;
   }
 catch(...)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid")

                          );
   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file")
                                       );
     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file")
                                    );
   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file")
                             );
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = _M_mode & ios_base::out;
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                           );

   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                        );
     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
    if (overflow() == traits_type::eof())
      return __ret;
    _M_set_buffer(-1);
    _M_writing = false;
  }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
     && __testin)
   {

     const streamsize __avail = this->egptr() - this->gptr();
     if (__avail != 0)
       {
        traits_type::copy(__s, this->gptr(), __avail);
         __s += __avail;
        this->setg(this->eback(), this->gptr() + __avail,
     this->egptr());
        __ret += __avail;
        __n -= __avail;
       }



     streamsize __len;
     for (;;)
       {
         __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
           __n);
         if (__len == -1)
    __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file")
                                );
         if (__len == 0)
    break;

         __n -= __len;
         __ret += __len;
         if (__n == 0)
    break;

         __s += __len;
       }

     if (__n == 0)
       {
         _M_set_buffer(0);
         _M_reading = true;
       }
     else if (__len == 0)
       {



         _M_set_buffer(-1);
         _M_reading = false;
       }
   }
      else
   __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = _M_mode & ios_base::out;
      if (__check_facet(_M_codecvt).always_noconv()
     && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 700 "/usr/include/c++/4.8/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

        off_type __file_off = _M_file.seekoff(0, ios_base::cur);
        if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 937 "/usr/include/c++/4.8/fstream" 2 3
# 25 "main.cu" 2
# 1 "/usr/include/c++/4.8/cstdio" 1 3
# 39 "/usr/include/c++/4.8/cstdio" 3
       
# 40 "/usr/include/c++/4.8/cstdio" 3
# 26 "main.cu" 2
# 1 "/usr/include/c++/4.8/cstdlib" 1 3
# 39 "/usr/include/c++/4.8/cstdlib" 3
       
# 40 "/usr/include/c++/4.8/cstdlib" 3
# 27 "main.cu" 2
# 1 "/usr/include/c++/4.8/iostream" 1 3
# 36 "/usr/include/c++/4.8/iostream" 3
       
# 37 "/usr/include/c++/4.8/iostream" 3





namespace std __attribute__ ((__visibility__ ("default")))
{

# 60 "/usr/include/c++/4.8/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 28 "main.cu" 2
# 1 "/usr/include/c++/4.8/algorithm" 1 3
# 58 "/usr/include/c++/4.8/algorithm" 3
       
# 59 "/usr/include/c++/4.8/algorithm" 3

# 1 "/usr/include/c++/4.8/utility" 1 3
# 58 "/usr/include/c++/4.8/utility" 3
       
# 59 "/usr/include/c++/4.8/utility" 3
# 69 "/usr/include/c++/4.8/utility" 3
# 1 "/usr/include/c++/4.8/bits/stl_relops.h" 1 3
# 67 "/usr/include/c++/4.8/bits/stl_relops.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{
  namespace rel_ops
  {
 
# 85 "/usr/include/c++/4.8/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y); }
# 98 "/usr/include/c++/4.8/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x; }
# 111 "/usr/include/c++/4.8/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x); }
# 124 "/usr/include/c++/4.8/bits/stl_relops.h" 3
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y); }

 
  }

}
# 70 "/usr/include/c++/4.8/utility" 2 3
# 61 "/usr/include/c++/4.8/algorithm" 2 3

# 1 "/usr/include/c++/4.8/bits/stl_algo.h" 1 3
# 59 "/usr/include/c++/4.8/bits/stl_algo.h" 3
# 1 "/usr/include/c++/4.8/cstdlib" 1 3
# 39 "/usr/include/c++/4.8/cstdlib" 3
       
# 40 "/usr/include/c++/4.8/cstdlib" 3
# 60 "/usr/include/c++/4.8/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.8/bits/algorithmfwd.h" 1 3
# 33 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
       
# 34 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
# 42 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 203 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);
# 232 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);

  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
# 271 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);
# 334 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);
# 419 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);
# 436 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);
# 457 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 540 "/usr/include/c++/4.8/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&)




    ;

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])



    ;

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);





  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);

  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter,



     _Generator&);


  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);


}
# 61 "/usr/include/c++/4.8/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_heap.h" 1 3
# 61 "/usr/include/c++/4.8/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  template<typename _RandomAccessIterator, typename _Distance>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    { return std::__is_heap_until(__first, __n) == __n; }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    { return std::__is_heap_until(__first, __n, __comp) == __n; }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 154 "/usr/include/c++/4.8/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;
      ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 204 "/usr/include/c++/4.8/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)))
                                  ;
   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value));
    }

  template<typename _RandomAccessIterator>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value));
    }
# 279 "/usr/include/c++/4.8/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)))
                                  ;
   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value), __comp);
    }
# 357 "/usr/include/c++/4.8/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;
      ;

      if (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 384 "/usr/include/c++/4.8/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 424 "/usr/include/c++/4.8/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 463 "/usr/include/c++/4.8/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }
# 492 "/usr/include/c++/4.8/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 589 "/usr/include/c++/4.8/bits/stl_heap.h" 3

}
# 62 "/usr/include/c++/4.8/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_tempbuf.h" 1 3
# 62 "/usr/include/c++/4.8/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 83 "/usr/include/c++/4.8/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/usr/include/c++/4.8/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };


  template<bool>
    struct __uninitialized_construct_buf_dispatch
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer __first, _Pointer __last,
       _ForwardIterator __seed)
        {
   if(__first == __last)
     return;

   _Pointer __cur = __first;
   try
     {
       std::_Construct(std::__addressof(*__first),
         (*__seed));
       _Pointer __prev = __cur;
       ++__cur;
       for(; __cur != __last; ++__cur, ++__prev)
  std::_Construct(std::__addressof(*__cur),
    (*__prev));
       *__seed = (*__prev);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_construct_buf_dispatch<true>
    {
      template<typename _Pointer, typename _ForwardIterator>
        static void
        __ucr(_Pointer, _Pointer, _ForwardIterator) { }
    };
# 229 "/usr/include/c++/4.8/bits/stl_tempbuf.h" 3
  template<typename _Pointer, typename _ForwardIterator>
    inline void
    __uninitialized_construct_buf(_Pointer __first, _Pointer __last,
      _ForwardIterator __seed)
    {
      typedef typename std::iterator_traits<_Pointer>::value_type
 _ValueType;

      std::__uninitialized_construct_buf_dispatch<
        __has_trivial_constructor(_ValueType)>::
   __ucr(__first, __last, __seed);
    }

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (_M_buffer)
     std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len,
            __first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }


}
# 63 "/usr/include/c++/4.8/bits/stl_algo.h" 2 3
# 71 "/usr/include/c++/4.8/bits/stl_algo.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  template<typename _Iterator>
    void
    __move_median_to_first(_Iterator __result, _Iterator __a,
      _Iterator __b, _Iterator __c)
    {

     


      if (*__a < *__b)
 {
   if (*__b < *__c)
     std::iter_swap(__result, __b);
   else if (*__a < *__c)
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (*__a < *__c)
       std::iter_swap(__result, __a);
      else if (*__b < *__c)
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }


  template<typename _Iterator, typename _Compare>
    void
    __move_median_to_first(_Iterator __result, _Iterator __a,
      _Iterator __b, _Iterator __c,
      _Compare __comp)
    {

     



      if (__comp(*__a, *__b))
 {
   if (__comp(*__b, *__c))
     std::iter_swap(__result, __b);
   else if (__comp(*__a, *__c))
     std::iter_swap(__result, __c);
   else
     std::iter_swap(__result, __a);
 }
      else if (__comp(*__a, *__c))
 std::iter_swap(__result, __a);
      else if (__comp(*__b, *__c))
 std::iter_swap(__result, __c);
      else
 std::iter_swap(__result, __b);
    }




  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if_not(_RandomAccessIterator __first, _RandomAccessIterator __last,
    _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;

   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 2:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 1:
   if (!bool(__pred(*__first)))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if_not(_InputIterator __first, _InputIterator __last,
    _Predicate __pred)
    {
      return std::__find_if_not(__first, __last, __pred,
    std::__iterator_category(__first));
    }




  template<typename _InputIterator, typename _Predicate, typename _Distance>
    _InputIterator
    __find_if_not_n(_InputIterator __first, _Distance& __len, _Predicate __pred)
    {
      for (; __len; --__len, ++__first)
 if (!bool(__pred(*__first)))
   break;
      return __first;
    }
# 351 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }






  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (*--__backTrack == __val)
     {
       if (--__remainder == 0)
         return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }
# 421 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !bool(__binary_pred(*__first, __val)))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last
   && !bool(__binary_pred(*__first, __val)))
     ++__first;
 }
      return __last;
    }







  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      _DistanceType __remainder = __count;

      while (__remainder <= __tailSize)
 {
   __first += __remainder;
   __tailSize -= __remainder;


   _RandomAccessIter __backTrack = __first;
   while (__binary_pred(*--__backTrack, __val))
     {
       if (--__remainder == 0)
         return (__first - __count);
     }
   __remainder = __count + 1 - (__first - __backTrack);
 }
      return __last;
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2,
      __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1),
             __rlast1,
             _RevIterator2(__last2),
             __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 645 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 692 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }
# 871 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 908 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (!bool(__pred(*__first)))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 1089 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      __first = std::find(__first, __last, __value);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!(*__first == __value))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 1132 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      __first = std::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 1172 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = (*__first);
      return ++__dest;
    }
# 1212 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {

     

     


      ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__dest, *__first)))
   *++__dest = (*__first);
      return ++__dest;
    }






  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag)
    {

      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!(*__first == *__next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {

     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!bool(__binary_pred(*__first, *__next)))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!bool(__binary_pred(__value, *__first)))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {

     



      *__result = *__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__result, *__first)))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1440 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1467 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      _Distance __n = __last - __first;
      _Distance __k = __middle - __first;

      if (__k == __n - __k)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      _RandomAccessIterator __p = __first;

      for (;;)
 {
   if (__k < __n - __k)
     {
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = (*__p);
    std::copy(__p + 1, __p + __n, __p);
    *(__p + __n - 1) = (__t);
    return;
  }
       _RandomAccessIterator __q = __p + __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    std::iter_swap(__p, __q);
    ++__p;
    ++__q;
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
       __k = __n - __k;
     }
   else
     {
       __k = __n - __k;
       if (__is_pod(_ValueType) && __k == 1)
  {
    _ValueType __t = (*(__p + __n - 1));
    std::copy_backward(__p, __p + __n - 1, __p + __n);
    *__p = (__t);
    return;
  }
       _RandomAccessIterator __q = __p + __n;
       __p = __q - __k;
       for (_Distance __i = 0; __i < __n - __k; ++ __i)
  {
    --__p;
    --__q;
    std::iter_swap(__p, __q);
  }
       __n %= __k;
       if (__n == 0)
  return;
       std::swap(__n, __k);
     }
 }
    }
# 1673 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1709 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }






  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __left_split =
 std::__inplace_stable_partition(__first, __pred, __len / 2);


      _Distance __right_len = __len - __len / 2;
      _ForwardIterator __right_split =
 std::__find_if_not_n(__middle, __right_len, __pred);
      if (__right_len)
 __right_split = std::__inplace_stable_partition(__middle,
       __pred,
       __right_len);
      std::rotate(__left_split, __middle, __right_split);
      std::advance(__left_split, std::distance(__middle, __right_split));
      return __left_split;
    }







  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;



   *__result2 = (*__first);
   ++__result2;
   ++__first;
   for (; __first != __last; ++__first)
     if (__pred(*__first))
       {
  *__result1 = (*__first);
  ++__result1;
       }
     else
       {
  *__result2 = (*__first);
  ++__result2;
       }
   std::copy(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __left_split =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);


   _Distance __right_len = __len - __len / 2;
   _ForwardIterator __right_split =
     std::__find_if_not_n(__middle, __right_len, __pred);
   if (__right_len)
     __right_split =
       std::__stable_partition_adaptive(__right_split, __last, __pred,
            __right_len,
            __buffer, __buffer_size);
   std::rotate(__left_split, __middle, __right_split);
   std::advance(__left_split, std::distance(__middle, __right_split));
   return __left_split;
 }
    }
# 1888 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      __first = std::__find_if_not(__first, __last, __pred);

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(),
       _DistanceType(__buf.size()));
 else
   return
     std::__inplace_stable_partition(__first, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }


  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }
# 1972 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     
      ;
      ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2038 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     

     

      ;
      ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }


  template<typename _RandomAccessIterator>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = (*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = (*__next);
   __last = __next;
   --__next;
 }
      *__last = (__val);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last,
         _Compare __comp)
    {
      typename iterator_traits<_RandomAccessIterator>::value_type
 __val = (*__last);
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = (*__next);
   __last = __next;
   --__next;
 }
      *__last = (__val);
    }


  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (*__i < *__first)
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = (*__i);
       std::copy_backward(__first, __i, __i + 1);
       *__first = (__val);
     }
   else
     std::__unguarded_linear_insert(__i);
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   if (__comp(*__i, *__first))
     {
       typename iterator_traits<_RandomAccessIterator>::value_type
  __val = (*__i);
       std::copy_backward(__first, __i, __i + 1);
       *__first = (__val);
     }
   else
     std::__unguarded_linear_insert(__i, __comp);
 }
    }


  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, __comp);
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, const _Tp& __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     const _Tp& __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1);
      return std::__unguarded_partition(__first + 1, __last, *__first);
    }



  template<typename _RandomAccessIterator, typename _Compare>
    inline _RandomAccessIterator
    __unguarded_partition_pivot(_RandomAccessIterator __first,
    _RandomAccessIterator __last, _Compare __comp)
    {
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
      __comp);
      return std::__unguarded_partition(__first + 1, __last, *__first, __comp);
    }


  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }



  template<typename _RandomAccessIterator, typename _Size>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last);


       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition_pivot(__first, __last, __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2423 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

     
                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2470 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
      ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2519 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

     
                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2572 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
     
      ;
      ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2634 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

     

     
                    ;
     
                    ;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       _ForwardIterator __left = std::lower_bound(__first, __middle,
        __val, __comp);
       std::advance(__first, __len);
       _ForwardIterator __right = std::upper_bound(++__middle, __first,
         __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2695 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     
      ;
      ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 2728 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     

     
                    ;
     
                    ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::copy(__first1, __last1, __result);
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    void
    __move_merge_adaptive(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      if (__first1 != __last1)
 std::copy(__first1, __last1, __result);
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 {
   std::copy_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = (*__last1);
       if (__first1 == __last1)
  {
    std::copy_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = (*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    void
    __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 {
   std::copy_backward(__first2, __last2, __result);
   return;
 }
      else if (__first2 == __last2)
 return;

      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = (*__last1);
       if (__first1 == __last1)
  {
    std::copy_backward(__first2, ++__last2, __result);
    return;
  }
       --__last1;
     }
   else
     {
       *--__result = (*__last2);
       if (__first2 == __last2)
  return;
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   if (__len2)
     {
       __buffer_end = std::copy(__middle, __last, __buffer);
       std::copy_backward(__first, __middle, __last);
       return std::copy(__buffer, __buffer_end, __first);
     }
   else
     return __first;
 }
      else if (__len1 <= __buffer_size)
 {
   if (__len1)
     {
       __buffer_end = std::copy(__first, __middle, __buffer);
       std::copy(__middle, __last, __first);
       return std::copy_backward(__buffer, __buffer_end, __last);
     }
   else
     return __last;
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last,
         __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__move_merge_adaptive_backward(__first, __middle, __buffer,
           __buffer_end, __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }
# 3152 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;


     

     
      ;
      ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3207 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;


     

     

      ;
      ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }



  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1, __result))

                  ;
    }


  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    __move_merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = (*__first2);
       ++__first2;
     }
   else
     {
       *__result = (*__first1);
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1, __result))

                  ;
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step, __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::__move_merge(__first, __first + __step_size,
   __first + __step_size, __last, __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::__move_merge(__first, __first + __step_size,
           __first + __step_size,
           __first + __two_step,
           __result, __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::__move_merge(__first,__first + __step_size,
   __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3547 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3597 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3652 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3709 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*__i, *--__j)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3765 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3822 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*--__j, *__i)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3882 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3919 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 4393 "/usr/include/c++/4.8/bits/stl_algo.h" 3



# 4409 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return (__f);
    }
# 4430 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {

     
     

      ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 4454 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 4484 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 4524 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4556 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4588 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4620 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 4645 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 4687 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4758 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4833 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 4870 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !bool(__binary_pred(*__first, __val)))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 4912 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4949 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4982 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 5014 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 5046 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 5077 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, ++__first)
 *__first = __gen();
      return __first;
    }
# 5114 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5153 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result, __binary_pred,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 5185 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   {
     _RandomAccessIterator __j = __first
     + std::rand() % ((__i - __first) + 1);
     if (__i != __j)
       std::iter_swap(__i, __j);
   }
    }
# 5218 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,



     _RandomNumberGenerator& __rand)

    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
   if (__i != __j)
     std::iter_swap(__i, __j);
 }
    }
# 5258 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 5292 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      std::__heap_select(__first, __middle, __last);
      std::sort_heap(__first, __middle);
    }
# 5331 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;
      ;

      std::__heap_select(__first, __middle, __last, __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 5368 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2);
    }
# 5407 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2, __comp);
    }
# 5445 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 5481 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2, __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 5523 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5587 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5647 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     

     
      ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()));
    }
# 5689 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     

     


      ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5735 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5802 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5869 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5926 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5984 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 6045 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 6103 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 6169 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 6226 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 6254 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 6282 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 6310 "/usr/include/c++/4.8/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first))
   __result = __first;
      return __result;
    }


}
# 63 "/usr/include/c++/4.8/algorithm" 2 3
# 29 "main.cu" 2

# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/omp.h" 1 3 4
# 34 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/omp.h" 3 4
typedef struct
{
  unsigned char _x[4]
    __attribute__((__aligned__(4)));
} omp_lock_t;

typedef struct
{

  unsigned char _x[8 + sizeof (void *)]
    __attribute__((__aligned__(sizeof (void *))));




} omp_nest_lock_t;


typedef enum omp_sched_t
{
  omp_sched_static = 1,
  omp_sched_dynamic = 2,
  omp_sched_guided = 3,
  omp_sched_auto = 4
} omp_sched_t;


extern "C" {





extern void omp_set_num_threads (int) throw ();
extern int omp_get_num_threads (void) throw ();
extern int omp_get_max_threads (void) throw ();
extern int omp_get_thread_num (void) throw ();
extern int omp_get_num_procs (void) throw ();

extern int omp_in_parallel (void) throw ();

extern void omp_set_dynamic (int) throw ();
extern int omp_get_dynamic (void) throw ();

extern void omp_set_nested (int) throw ();
extern int omp_get_nested (void) throw ();

extern void omp_init_lock (omp_lock_t *) throw ();
extern void omp_destroy_lock (omp_lock_t *) throw ();
extern void omp_set_lock (omp_lock_t *) throw ();
extern void omp_unset_lock (omp_lock_t *) throw ();
extern int omp_test_lock (omp_lock_t *) throw ();

extern void omp_init_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_destroy_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_set_nest_lock (omp_nest_lock_t *) throw ();
extern void omp_unset_nest_lock (omp_nest_lock_t *) throw ();
extern int omp_test_nest_lock (omp_nest_lock_t *) throw ();

extern double omp_get_wtime (void) throw ();
extern double omp_get_wtick (void) throw ();

void omp_set_schedule (omp_sched_t, int) throw ();
void omp_get_schedule (omp_sched_t *, int *) throw ();
int omp_get_thread_limit (void) throw ();
void omp_set_max_active_levels (int) throw ();
int omp_get_max_active_levels (void) throw ();
int omp_get_level (void) throw ();
int omp_get_ancestor_thread_num (int) throw ();
int omp_get_team_size (int) throw ();
int omp_get_active_level (void) throw ();

int omp_in_final (void) throw ();


}
# 31 "main.cu" 2

# 1 "/usr/include/c++/4.8/sstream" 1 3
# 36 "/usr/include/c++/4.8/sstream" 3
       
# 37 "/usr/include/c++/4.8/sstream" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 63 "/usr/include/c++/4.8/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 97 "/usr/include/c++/4.8/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 110 "/usr/include/c++/4.8/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
      { _M_stringbuf_init(__mode); }
# 125 "/usr/include/c++/4.8/sstream" 3
      __string_type
      str() const
      {
 __string_type __ret;
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret = __string_type(this->pbase(), this->pptr());
     else
        __ret = __string_type(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 149 "/usr/include/c++/4.8/sstream" 3
      void
      str(const __string_type& __s)
      {

 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 201 "/usr/include/c++/4.8/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);
    };
# 271 "/usr/include/c++/4.8/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 307 "/usr/include/c++/4.8/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 325 "/usr/include/c++/4.8/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }
# 347 "/usr/include/c++/4.8/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 386 "/usr/include/c++/4.8/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 422 "/usr/include/c++/4.8/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 440 "/usr/include/c++/4.8/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }
# 462 "/usr/include/c++/4.8/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 501 "/usr/include/c++/4.8/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 536 "/usr/include/c++/4.8/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 552 "/usr/include/c++/4.8/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }
# 574 "/usr/include/c++/4.8/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };


}

# 1 "/usr/include/c++/4.8/bits/sstream.tcc" 1 3
# 37 "/usr/include/c++/4.8/bits/sstream.tcc" 3
       
# 38 "/usr/include/c++/4.8/bits/sstream.tcc" 3

namespace std __attribute__ ((__visibility__ ("default")))
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();
      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 110 "/usr/include/c++/4.8/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp;
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}
# 601 "/usr/include/c++/4.8/sstream" 2 3
# 33 "main.cu" 2


# 1 "structs.cuh" 1
# 31 "structs.cuh"
struct Entry {
    int doc_id;
    int term_id;
    int tf;
    float tf_idf;

    __attribute__((host)) __attribute__((device)) Entry(int doc_id, int term_id, int tf = 0, float tf_idf = 0.0) : doc_id(doc_id), term_id(term_id), tf(tf), tf_idf(tf_idf) {}

    bool operator < (const Entry& e) const {
        if(doc_id != e.doc_id) return doc_id < e.doc_id;
        return term_id < e.term_id;
    }
};

struct cuSimilarity {
    int doc_id;
    float distance;

    cuSimilarity() {}
    __attribute__((host)) __attribute__((device)) cuSimilarity(int doc_id, float distance) : doc_id(doc_id), distance(distance) {}

    __attribute__((host)) __attribute__((device)) bool operator < (const cuSimilarity &sim) const {
        return distance > sim.distance;
    }

    __attribute__((host)) __attribute__((device)) bool operator > (const cuSimilarity &sim) const {
        return distance < sim.distance;
    }
};

struct DeviceVariables{
 int *d_count, *d_index;
    Entry *d_query;
    cuSimilarity *d_dist, *d_nearestK, *h_nearestK;
    float *d_qnorms;
};
# 36 "main.cu" 2
# 1 "utils.cuh" 1
# 32 "utils.cuh"
# 1 "/usr/include/c++/4.8/cstdio" 1 3
# 39 "/usr/include/c++/4.8/cstdio" 3
       
# 40 "/usr/include/c++/4.8/cstdio" 3
# 33 "utils.cuh" 2



extern int WARP_SIZE;

std::vector<std::string> split(const std::string &s, char delim);

double gettime();

void get_grid_config(dim3 &grid, dim3 &threads);





void __gpuAssert(cudaError_t stat, int line, std::string file);
# 37 "main.cu" 2
# 1 "inverted_index.cuh" 1
# 28 "inverted_index.cuh"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
       

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config.h" 1
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config.h"
       

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/simple_defines.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/simple_defines.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/compiler.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/compiler.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h" 1
# 198 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
extern "C" {
# 208 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
typedef unsigned long long CUdeviceptr;






typedef int CUdevice;
typedef struct CUctx_st *CUcontext;
typedef struct CUmod_st *CUmodule;
typedef struct CUfunc_st *CUfunction;
typedef struct CUarray_st *CUarray;
typedef struct CUmipmappedArray_st *CUmipmappedArray;
typedef struct CUtexref_st *CUtexref;
typedef struct CUsurfref_st *CUsurfref;
typedef struct CUevent_st *CUevent;
typedef struct CUstream_st *CUstream;
typedef struct CUgraphicsResource_st *CUgraphicsResource;
typedef unsigned long long CUtexObject;
typedef unsigned long long CUsurfObject;

typedef struct CUuuid_st {
    char bytes[16];
} CUuuid;
# 244 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
typedef struct CUipcEventHandle_st {
    char reserved[64];
} CUipcEventHandle;




typedef struct CUipcMemHandle_st {
    char reserved[64];
} CUipcMemHandle;




typedef enum CUipcMem_flags_enum {
    CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0x1
} CUipcMem_flags;






typedef enum CUmemAttach_flags_enum {
    CU_MEM_ATTACH_GLOBAL = 0x1,
    CU_MEM_ATTACH_HOST = 0x2,
    CU_MEM_ATTACH_SINGLE = 0x4
} CUmemAttach_flags;




typedef enum CUctx_flags_enum {
    CU_CTX_SCHED_AUTO = 0x00,
    CU_CTX_SCHED_SPIN = 0x01,
    CU_CTX_SCHED_YIELD = 0x02,
    CU_CTX_SCHED_BLOCKING_SYNC = 0x04,
    CU_CTX_BLOCKING_SYNC = 0x04,


    CU_CTX_SCHED_MASK = 0x07,
    CU_CTX_MAP_HOST = 0x08,
    CU_CTX_LMEM_RESIZE_TO_MAX = 0x10,
    CU_CTX_FLAGS_MASK = 0x1f
} CUctx_flags;




typedef enum CUstream_flags_enum {
    CU_STREAM_DEFAULT = 0x0,
    CU_STREAM_NON_BLOCKING = 0x1
} CUstream_flags;
# 321 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
typedef enum CUevent_flags_enum {
    CU_EVENT_DEFAULT = 0x0,
    CU_EVENT_BLOCKING_SYNC = 0x1,
    CU_EVENT_DISABLE_TIMING = 0x2,
    CU_EVENT_INTERPROCESS = 0x4
} CUevent_flags;




typedef enum CUoccupancy_flags_enum {
    CU_OCCUPANCY_DEFAULT = 0x0,
    CU_OCCUPANCY_DISABLE_CACHING_OVERRIDE = 0x1
} CUoccupancy_flags;




typedef enum CUarray_format_enum {
    CU_AD_FORMAT_UNSIGNED_INT8 = 0x01,
    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02,
    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03,
    CU_AD_FORMAT_SIGNED_INT8 = 0x08,
    CU_AD_FORMAT_SIGNED_INT16 = 0x09,
    CU_AD_FORMAT_SIGNED_INT32 = 0x0a,
    CU_AD_FORMAT_HALF = 0x10,
    CU_AD_FORMAT_FLOAT = 0x20
} CUarray_format;




typedef enum CUaddress_mode_enum {
    CU_TR_ADDRESS_MODE_WRAP = 0,
    CU_TR_ADDRESS_MODE_CLAMP = 1,
    CU_TR_ADDRESS_MODE_MIRROR = 2,
    CU_TR_ADDRESS_MODE_BORDER = 3
} CUaddress_mode;




typedef enum CUfilter_mode_enum {
    CU_TR_FILTER_MODE_POINT = 0,
    CU_TR_FILTER_MODE_LINEAR = 1
} CUfilter_mode;




typedef enum CUdevice_attribute_enum {
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,
    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,
    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,
    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,
    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,
    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,
    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,
    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,
    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,
    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,
    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,
    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29,
    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,
    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,
    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,
    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,
    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,
    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,
    CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,
    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,
    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,
    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,
    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,
    CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49,
    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,
    CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77,
    CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,
    CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,
    CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,
    CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,
    CU_DEVICE_ATTRIBUTE_MAX
} CUdevice_attribute;




typedef struct CUdevprop_st {
    int maxThreadsPerBlock;
    int maxThreadsDim[3];
    int maxGridSize[3];
    int sharedMemPerBlock;
    int totalConstantMemory;
    int SIMDWidth;
    int memPitch;
    int regsPerBlock;
    int clockRate;
    int textureAlign;
} CUdevprop;




typedef enum CUpointer_attribute_enum {
    CU_POINTER_ATTRIBUTE_CONTEXT = 1,
    CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,
    CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3,
    CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,
    CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,
    CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,
    CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,
    CU_POINTER_ATTRIBUTE_IS_MANAGED = 8
} CUpointer_attribute;




typedef enum CUfunction_attribute_enum {





    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,






    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,





    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,




    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,




    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,
# 536 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,
# 545 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,





    CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,

    CU_FUNC_ATTRIBUTE_MAX
} CUfunction_attribute;




typedef enum CUfunc_cache_enum {
    CU_FUNC_CACHE_PREFER_NONE = 0x00,
    CU_FUNC_CACHE_PREFER_SHARED = 0x01,
    CU_FUNC_CACHE_PREFER_L1 = 0x02,
    CU_FUNC_CACHE_PREFER_EQUAL = 0x03
} CUfunc_cache;




typedef enum CUsharedconfig_enum {
    CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE = 0x00,
    CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE = 0x01,
    CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0x02
} CUsharedconfig;




typedef enum CUmemorytype_enum {
    CU_MEMORYTYPE_HOST = 0x01,
    CU_MEMORYTYPE_DEVICE = 0x02,
    CU_MEMORYTYPE_ARRAY = 0x03,
    CU_MEMORYTYPE_UNIFIED = 0x04
} CUmemorytype;




typedef enum CUcomputemode_enum {
    CU_COMPUTEMODE_DEFAULT = 0,
    CU_COMPUTEMODE_EXCLUSIVE = 1,
    CU_COMPUTEMODE_PROHIBITED = 2,
    CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3
} CUcomputemode;




typedef enum CUjit_option_enum
{





    CU_JIT_MAX_REGISTERS = 0,
# 620 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_THREADS_PER_BLOCK,







    CU_JIT_WALL_TIME,
# 637 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_INFO_LOG_BUFFER,
# 646 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,
# 655 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_ERROR_LOG_BUFFER,
# 664 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,







    CU_JIT_OPTIMIZATION_LEVEL,







    CU_JIT_TARGET_FROM_CUCONTEXT,







    CU_JIT_TARGET,
# 697 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CU_JIT_FALLBACK_STRATEGY,







    CU_JIT_GENERATE_DEBUG_INFO,






    CU_JIT_LOG_VERBOSE,






    CU_JIT_GENERATE_LINE_INFO,







    CU_JIT_CACHE_MODE,

    CU_JIT_NUM_OPTIONS

} CUjit_option;




typedef enum CUjit_target_enum
{
    CU_TARGET_COMPUTE_10 = 10,
    CU_TARGET_COMPUTE_11 = 11,
    CU_TARGET_COMPUTE_12 = 12,
    CU_TARGET_COMPUTE_13 = 13,
    CU_TARGET_COMPUTE_20 = 20,
    CU_TARGET_COMPUTE_21 = 21,
    CU_TARGET_COMPUTE_30 = 30,
    CU_TARGET_COMPUTE_32 = 32,
    CU_TARGET_COMPUTE_35 = 35,
    CU_TARGET_COMPUTE_37 = 37,
    CU_TARGET_COMPUTE_50 = 50,
    CU_TARGET_COMPUTE_52 = 52
} CUjit_target;




typedef enum CUjit_fallback_enum
{
    CU_PREFER_PTX = 0,

    CU_PREFER_BINARY

} CUjit_fallback;




typedef enum CUjit_cacheMode_enum
{
    CU_JIT_CACHE_OPTION_NONE = 0,
    CU_JIT_CACHE_OPTION_CG,
    CU_JIT_CACHE_OPTION_CA
} CUjit_cacheMode;




typedef enum CUjitInputType_enum
{




    CU_JIT_INPUT_CUBIN = 0,





    CU_JIT_INPUT_PTX,





    CU_JIT_INPUT_FATBINARY,





    CU_JIT_INPUT_OBJECT,





    CU_JIT_INPUT_LIBRARY,

    CU_JIT_NUM_INPUT_TYPES
} CUjitInputType;


typedef struct CUlinkState_st *CUlinkState;





typedef enum CUgraphicsRegisterFlags_enum {
    CU_GRAPHICS_REGISTER_FLAGS_NONE = 0x00,
    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY = 0x01,
    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD = 0x02,
    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST = 0x04,
    CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0x08
} CUgraphicsRegisterFlags;




typedef enum CUgraphicsMapResourceFlags_enum {
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE = 0x00,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY = 0x01,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02
} CUgraphicsMapResourceFlags;




typedef enum CUarray_cubemap_face_enum {
    CU_CUBEMAP_FACE_POSITIVE_X = 0x00,
    CU_CUBEMAP_FACE_NEGATIVE_X = 0x01,
    CU_CUBEMAP_FACE_POSITIVE_Y = 0x02,
    CU_CUBEMAP_FACE_NEGATIVE_Y = 0x03,
    CU_CUBEMAP_FACE_POSITIVE_Z = 0x04,
    CU_CUBEMAP_FACE_NEGATIVE_Z = 0x05
} CUarray_cubemap_face;




typedef enum CUlimit_enum {
    CU_LIMIT_STACK_SIZE = 0x00,
    CU_LIMIT_PRINTF_FIFO_SIZE = 0x01,
    CU_LIMIT_MALLOC_HEAP_SIZE = 0x02,
    CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH = 0x03,
    CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0x04,
    CU_LIMIT_MAX
} CUlimit;




typedef enum CUresourcetype_enum {
    CU_RESOURCE_TYPE_ARRAY = 0x00,
    CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0x01,
    CU_RESOURCE_TYPE_LINEAR = 0x02,
    CU_RESOURCE_TYPE_PITCH2D = 0x03
} CUresourcetype;




typedef enum cudaError_enum {





    CUDA_SUCCESS = 0,





    CUDA_ERROR_INVALID_VALUE = 1,





    CUDA_ERROR_OUT_OF_MEMORY = 2,





    CUDA_ERROR_NOT_INITIALIZED = 3,




    CUDA_ERROR_DEINITIALIZED = 4,






    CUDA_ERROR_PROFILER_DISABLED = 5,







    CUDA_ERROR_PROFILER_NOT_INITIALIZED = 6,






    CUDA_ERROR_PROFILER_ALREADY_STARTED = 7,






    CUDA_ERROR_PROFILER_ALREADY_STOPPED = 8,





    CUDA_ERROR_NO_DEVICE = 100,





    CUDA_ERROR_INVALID_DEVICE = 101,






    CUDA_ERROR_INVALID_IMAGE = 200,
# 959 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_INVALID_CONTEXT = 201,
# 968 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_CONTEXT_ALREADY_CURRENT = 202,




    CUDA_ERROR_MAP_FAILED = 205,




    CUDA_ERROR_UNMAP_FAILED = 206,





    CUDA_ERROR_ARRAY_IS_MAPPED = 207,




    CUDA_ERROR_ALREADY_MAPPED = 208,







    CUDA_ERROR_NO_BINARY_FOR_GPU = 209,




    CUDA_ERROR_ALREADY_ACQUIRED = 210,




    CUDA_ERROR_NOT_MAPPED = 211,





    CUDA_ERROR_NOT_MAPPED_AS_ARRAY = 212,





    CUDA_ERROR_NOT_MAPPED_AS_POINTER = 213,





    CUDA_ERROR_ECC_UNCORRECTABLE = 214,





    CUDA_ERROR_UNSUPPORTED_LIMIT = 215,






    CUDA_ERROR_CONTEXT_ALREADY_IN_USE = 216,





    CUDA_ERROR_PEER_ACCESS_UNSUPPORTED = 217,




    CUDA_ERROR_INVALID_PTX = 218,




    CUDA_ERROR_INVALID_GRAPHICS_CONTEXT = 219,




    CUDA_ERROR_INVALID_SOURCE = 300,




    CUDA_ERROR_FILE_NOT_FOUND = 301,




    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,




    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED = 303,




    CUDA_ERROR_OPERATING_SYSTEM = 304,





    CUDA_ERROR_INVALID_HANDLE = 400,





    CUDA_ERROR_NOT_FOUND = 500,







    CUDA_ERROR_NOT_READY = 600,
# 1108 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_ILLEGAL_ADDRESS = 700,
# 1119 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES = 701,
# 1130 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_LAUNCH_TIMEOUT = 702,





    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING = 703,






    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED = 704,






    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED = 705,





    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE = 708,






    CUDA_ERROR_CONTEXT_IS_DESTROYED = 709,







    CUDA_ERROR_ASSERT = 710,






    CUDA_ERROR_TOO_MANY_PEERS = 711,





    CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712,





    CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED = 713,
# 1199 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_HARDWARE_STACK_ERROR = 714,







    CUDA_ERROR_ILLEGAL_INSTRUCTION = 715,
# 1216 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_MISALIGNED_ADDRESS = 716,
# 1227 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_INVALID_ADDRESS_SPACE = 717,







    CUDA_ERROR_INVALID_PC = 718,
# 1245 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
    CUDA_ERROR_LAUNCH_FAILED = 719,





    CUDA_ERROR_NOT_PERMITTED = 800,





    CUDA_ERROR_NOT_SUPPORTED = 801,




    CUDA_ERROR_UNKNOWN = 999
} CUresult;
# 1277 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
typedef void ( *CUstreamCallback)(CUstream hStream, CUresult status, void *userData);







typedef size_t ( *CUoccupancyB2DSize)(int blockSize);
# 1326 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
typedef struct CUDA_MEMCPY2D_st {
    size_t srcXInBytes;
    size_t srcY;

    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    size_t srcPitch;

    size_t dstXInBytes;
    size_t dstY;

    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    size_t dstPitch;

    size_t WidthInBytes;
    size_t Height;
} CUDA_MEMCPY2D;




typedef struct CUDA_MEMCPY3D_st {
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    void *reserved0;
    size_t srcPitch;
    size_t srcHeight;

    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    void *reserved1;
    size_t dstPitch;
    size_t dstHeight;

    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
} CUDA_MEMCPY3D;




typedef struct CUDA_MEMCPY3D_PEER_st {
    size_t srcXInBytes;
    size_t srcY;
    size_t srcZ;
    size_t srcLOD;
    CUmemorytype srcMemoryType;
    const void *srcHost;
    CUdeviceptr srcDevice;
    CUarray srcArray;
    CUcontext srcContext;
    size_t srcPitch;
    size_t srcHeight;

    size_t dstXInBytes;
    size_t dstY;
    size_t dstZ;
    size_t dstLOD;
    CUmemorytype dstMemoryType;
    void *dstHost;
    CUdeviceptr dstDevice;
    CUarray dstArray;
    CUcontext dstContext;
    size_t dstPitch;
    size_t dstHeight;

    size_t WidthInBytes;
    size_t Height;
    size_t Depth;
} CUDA_MEMCPY3D_PEER;




typedef struct CUDA_ARRAY_DESCRIPTOR_st
{
    size_t Width;
    size_t Height;

    CUarray_format Format;
    unsigned int NumChannels;
} CUDA_ARRAY_DESCRIPTOR;




typedef struct CUDA_ARRAY3D_DESCRIPTOR_st
{
    size_t Width;
    size_t Height;
    size_t Depth;

    CUarray_format Format;
    unsigned int NumChannels;
    unsigned int Flags;
} CUDA_ARRAY3D_DESCRIPTOR;
# 1448 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
typedef struct CUDA_RESOURCE_DESC_st
{
    CUresourcetype resType;

    union {
        struct {
            CUarray hArray;
        } array;
        struct {
            CUmipmappedArray hMipmappedArray;
        } mipmap;
        struct {
            CUdeviceptr devPtr;
            CUarray_format format;
            unsigned int numChannels;
            size_t sizeInBytes;
        } linear;
        struct {
            CUdeviceptr devPtr;
            CUarray_format format;
            unsigned int numChannels;
            size_t width;
            size_t height;
            size_t pitchInBytes;
        } pitch2D;
        struct {
            int reserved[32];
        } reserved;
    } res;

    unsigned int flags;
} CUDA_RESOURCE_DESC;




typedef struct CUDA_TEXTURE_DESC_st {
    CUaddress_mode addressMode[3];
    CUfilter_mode filterMode;
    unsigned int flags;
    unsigned int maxAnisotropy;
    CUfilter_mode mipmapFilterMode;
    float mipmapLevelBias;
    float minMipmapLevelClamp;
    float maxMipmapLevelClamp;
    int reserved[16];
} CUDA_TEXTURE_DESC;




typedef enum CUresourceViewFormat_enum
{
    CU_RES_VIEW_FORMAT_NONE = 0x00,
    CU_RES_VIEW_FORMAT_UINT_1X8 = 0x01,
    CU_RES_VIEW_FORMAT_UINT_2X8 = 0x02,
    CU_RES_VIEW_FORMAT_UINT_4X8 = 0x03,
    CU_RES_VIEW_FORMAT_SINT_1X8 = 0x04,
    CU_RES_VIEW_FORMAT_SINT_2X8 = 0x05,
    CU_RES_VIEW_FORMAT_SINT_4X8 = 0x06,
    CU_RES_VIEW_FORMAT_UINT_1X16 = 0x07,
    CU_RES_VIEW_FORMAT_UINT_2X16 = 0x08,
    CU_RES_VIEW_FORMAT_UINT_4X16 = 0x09,
    CU_RES_VIEW_FORMAT_SINT_1X16 = 0x0a,
    CU_RES_VIEW_FORMAT_SINT_2X16 = 0x0b,
    CU_RES_VIEW_FORMAT_SINT_4X16 = 0x0c,
    CU_RES_VIEW_FORMAT_UINT_1X32 = 0x0d,
    CU_RES_VIEW_FORMAT_UINT_2X32 = 0x0e,
    CU_RES_VIEW_FORMAT_UINT_4X32 = 0x0f,
    CU_RES_VIEW_FORMAT_SINT_1X32 = 0x10,
    CU_RES_VIEW_FORMAT_SINT_2X32 = 0x11,
    CU_RES_VIEW_FORMAT_SINT_4X32 = 0x12,
    CU_RES_VIEW_FORMAT_FLOAT_1X16 = 0x13,
    CU_RES_VIEW_FORMAT_FLOAT_2X16 = 0x14,
    CU_RES_VIEW_FORMAT_FLOAT_4X16 = 0x15,
    CU_RES_VIEW_FORMAT_FLOAT_1X32 = 0x16,
    CU_RES_VIEW_FORMAT_FLOAT_2X32 = 0x17,
    CU_RES_VIEW_FORMAT_FLOAT_4X32 = 0x18,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC1 = 0x19,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC2 = 0x1a,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC3 = 0x1b,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC4 = 0x1c,
    CU_RES_VIEW_FORMAT_SIGNED_BC4 = 0x1d,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC5 = 0x1e,
    CU_RES_VIEW_FORMAT_SIGNED_BC5 = 0x1f,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0x20,
    CU_RES_VIEW_FORMAT_SIGNED_BC6H = 0x21,
    CU_RES_VIEW_FORMAT_UNSIGNED_BC7 = 0x22
} CUresourceViewFormat;




typedef struct CUDA_RESOURCE_VIEW_DESC_st
{
    CUresourceViewFormat format;
    size_t width;
    size_t height;
    size_t depth;
    unsigned int firstMipmapLevel;
    unsigned int lastMipmapLevel;
    unsigned int firstLayer;
    unsigned int lastLayer;
    unsigned int reserved[16];
} CUDA_RESOURCE_VIEW_DESC;




typedef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
    unsigned long long p2pToken;
    unsigned int vaSpaceToken;
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;
# 1697 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGetErrorString(CUresult error, const char **pStr);
# 1716 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGetErrorName(CUresult error, const char **pStr);
# 1748 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuInit(unsigned int Flags);
# 1778 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDriverGetVersion(int *driverVersion);
# 1818 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGet(CUdevice *device, int ordinal);
# 1843 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetCount(int *count);
# 1871 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetName(char *name, int len, CUdevice dev);
# 1898 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceTotalMem_v2(size_t *bytes, CUdevice dev);
# 2084 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetAttribute(int *pi, CUdevice_attribute attrib, CUdevice dev);
# 2161 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetProperties(CUdevprop *prop, CUdevice dev);
# 2194 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceComputeCapability(int *major, int *minor, CUdevice dev);
# 2264 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxRetain(CUcontext *pctx, CUdevice dev);
# 2298 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxRelease(CUdevice dev);
# 2361 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxSetFlags(CUdevice dev, unsigned int flags);
# 2385 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxGetState(CUdevice dev, unsigned int *flags, int *active);
# 2423 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDevicePrimaryCtxReset(CUdevice dev);
# 2531 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxCreate_v2(CUcontext *pctx, unsigned int flags, CUdevice dev);
# 2571 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxDestroy_v2(CUcontext ctx);
# 2607 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxPushCurrent_v2(CUcontext ctx);
# 2641 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxPopCurrent_v2(CUcontext *pctx);
# 2667 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetCurrent(CUcontext ctx);
# 2686 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetCurrent(CUcontext *pctx);
# 2716 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetDevice(CUdevice *device);
# 2744 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetFlags(unsigned int *flags);
# 2774 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSynchronize(void);
# 2869 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetLimit(CUlimit limit, size_t value);
# 2908 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetLimit(size_t *pvalue, CUlimit limit);
# 2951 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetCacheConfig(CUfunc_cache *pconfig);
# 3001 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetCacheConfig(CUfunc_cache config);
# 3043 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetSharedMemConfig(CUsharedconfig *pConfig);
# 3095 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxSetSharedMemConfig(CUsharedconfig config);
# 3133 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetApiVersion(CUcontext ctx, unsigned int *version);
# 3172 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxGetStreamPriorityRange(int *leastPriority, int *greatestPriority);
# 3227 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxAttach(CUcontext *pctx, unsigned int flags);
# 3263 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxDetach(CUcontext ctx);
# 3317 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoad(CUmodule *module, const char *fname);
# 3353 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadData(CUmodule *module, const void *image);
# 3395 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadDataEx(CUmodule *module, const void *image, unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3436 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleLoadFatBinary(CUmodule *module, const void *fatCubin);
# 3461 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleUnload(CUmodule hmod);
# 3491 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetFunction(CUfunction *hfunc, CUmodule hmod, const char *name);
# 3525 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetGlobal_v2(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const char *name);
# 3559 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const char *name);
# 3590 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuModuleGetSurfRef(CUsurfref *pSurfRef, CUmodule hmod, const char *name);
# 3631 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkCreate_v2(unsigned int numOptions, CUjit_option *options, void **optionValues, CUlinkState *stateOut);
# 3668 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkAddData_v2(CUlinkState state, CUjitInputType type, void *data, size_t size, const char *name,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3707 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkAddFile_v2(CUlinkState state, CUjitInputType type, const char *path,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
# 3734 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkComplete(CUlinkState state, void **cubinOut, size_t *sizeOut);
# 3748 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult
cuLinkDestroy(CUlinkState state);
# 3797 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetInfo_v2(size_t *free, size_t *total);
# 3830 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAlloc_v2(CUdeviceptr *dptr, size_t bytesize);
# 3891 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocPitch_v2(CUdeviceptr *dptr, size_t *pPitch, size_t WidthInBytes, size_t Height, unsigned int ElementSizeBytes);
# 3920 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemFree_v2(CUdeviceptr dptr);
# 3953 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemGetAddressRange_v2(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr);
# 3999 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocHost_v2(void **pp, size_t bytesize);
# 4029 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemFreeHost(void *p);
# 4111 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags);
# 4149 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostGetDevicePointer_v2(CUdeviceptr *pdptr, void *p, unsigned int Flags);
# 4174 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostGetFlags(unsigned int *pFlags, void *p);
# 4256 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemAllocManaged(CUdeviceptr *dptr, size_t bytesize, unsigned int flags);
# 4285 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetByPCIBusId(CUdevice *dev, const char *pciBusId);
# 4313 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceGetPCIBusId(char *pciBusId, int len, CUdevice dev);
# 4355 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcGetEventHandle(CUipcEventHandle *pHandle, CUevent event);
# 4392 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcOpenEventHandle(CUevent *phEvent, CUipcEventHandle handle);
# 4429 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcGetMemHandle(CUipcMemHandle *pHandle, CUdeviceptr dptr);
# 4480 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcOpenMemHandle(CUdeviceptr *pdptr, CUipcMemHandle handle, unsigned int Flags);
# 4511 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuIpcCloseMemHandle(CUdeviceptr dptr);
# 4574 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostRegister_v2(void *p, size_t bytesize, unsigned int Flags);
# 4598 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemHostUnregister(void *p);
# 4634 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy_ptds(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);
# 4663 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyPeer_ptds(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);
# 4699 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoD_v2_ptds(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount);
# 4732 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoH_v2_ptds(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);
# 4765 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoD_v2_ptds(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);
# 4800 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoA_v2_ptds(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);
# 4837 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoD_v2_ptds(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 4872 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoA_v2_ptds(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount);
# 4907 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoH_v2_ptds(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 4946 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoA_v2_ptds(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);
# 5107 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2D_v2_ptds(const CUDA_MEMCPY2D *pCopy);
# 5266 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2DUnaligned_v2_ptds(const CUDA_MEMCPY2D *pCopy);
# 5434 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3D_v2_ptds(const CUDA_MEMCPY3D *pCopy);
# 5459 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DPeer_ptds(const CUDA_MEMCPY3D_PEER *pCopy);
# 5499 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAsync_ptsz(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);
# 5530 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyPeerAsync_ptsz(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);
# 5569 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoDAsync_v2_ptsz(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream);
# 5606 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoHAsync_v2_ptsz(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 5643 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyDtoDAsync_v2_ptsz(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);
# 5682 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyHtoAAsync_v2_ptsz(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount, CUstream hStream);
# 5721 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpyAtoHAsync_v2_ptsz(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);
# 5886 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy2DAsync_v2_ptsz(const CUDA_MEMCPY2D *pCopy, CUstream hStream);
# 6058 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DAsync_v2_ptsz(const CUDA_MEMCPY3D *pCopy, CUstream hStream);
# 6085 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemcpy3DPeerAsync_ptsz(const CUDA_MEMCPY3D_PEER *pCopy, CUstream hStream);
# 6121 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD8_v2_ptds(CUdeviceptr dstDevice, unsigned char uc, size_t N);
# 6155 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD16_v2_ptds(CUdeviceptr dstDevice, unsigned short us, size_t N);
# 6189 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD32_v2_ptds(CUdeviceptr dstDevice, unsigned int ui, size_t N);
# 6228 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D8_v2_ptds(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height);
# 6268 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D16_v2_ptds(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height);
# 6308 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D32_v2_ptds(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height);
# 6344 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD8Async_ptsz(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream);
# 6380 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD16Async_ptsz(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream);
# 6415 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD32Async_ptsz(CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream);
# 6456 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D8Async_ptsz(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream);
# 6498 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D16Async_ptsz(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream);
# 6540 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMemsetD2D32Async_ptsz(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream);
# 6643 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayCreate_v2(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray);
# 6676 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
# 6707 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArrayDestroy(CUarray hArray);
# 6887 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArray3DCreate_v2(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray);
# 6923 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
# 7050 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayCreate(CUmipmappedArray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, unsigned int numMipmapLevels);
# 7076 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayGetLevel(CUarray *pLevelArray, CUmipmappedArray hMipmappedArray, unsigned int level);
# 7096 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray);
# 7342 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerGetAttribute(void *data, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7386 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerSetAttribute(const void *value, CUpointer_attribute attribute, CUdeviceptr ptr);
# 7428 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuPointerGetAttributes(unsigned int numAttributes, CUpointer_attribute *attributes, void **data, CUdeviceptr ptr);
# 7476 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamCreate(CUstream *phStream, unsigned int Flags);
# 7524 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamCreateWithPriority(CUstream *phStream, unsigned int flags, int priority);
# 7554 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetPriority_ptsz(CUstream hStream, int *priority);
# 7581 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamGetFlags_ptsz(CUstream hStream, unsigned int *flags);
# 7622 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamWaitEvent_ptsz(CUstream hStream, CUevent hEvent, unsigned int Flags);
# 7693 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamAddCallback_ptsz(CUstream hStream, CUstreamCallback callback, void *userData, unsigned int flags);
# 7769 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamAttachMemAsync_ptsz(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned int flags);
# 7800 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamQuery_ptsz(CUstream hStream);
# 7827 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamSynchronize_ptsz(CUstream hStream);
# 7856 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuStreamDestroy_v2(CUstream hStream);
# 7911 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventCreate(CUevent *phEvent, unsigned int Flags);
# 7947 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventRecord_ptsz(CUevent hEvent, CUstream hStream);
# 7981 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventQuery(CUevent hEvent);
# 8015 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventSynchronize(CUevent hEvent);
# 8044 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventDestroy_v2(CUevent hEvent);
# 8088 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuEventElapsedTime(float *pMilliseconds, CUevent hStart, CUevent hEnd);
# 8155 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncGetAttribute(int *pi, CUfunction_attribute attrib, CUfunction hfunc);
# 8198 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config);
# 8250 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config);
# 8364 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchKernel_ptsz(CUfunction f,
                                unsigned int gridDimX,
                                unsigned int gridDimY,
                                unsigned int gridDimZ,
                                unsigned int blockDimX,
                                unsigned int blockDimY,
                                unsigned int blockDimZ,
                                unsigned int sharedMemBytes,
                                CUstream hStream,
                                void **kernelParams,
                                void **extra);
# 8425 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z);
# 8459 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuFuncSetSharedSize(CUfunction hfunc, unsigned int bytes);
# 8491 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSetSize(CUfunction hfunc, unsigned int numbytes);
# 8524 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSeti(CUfunction hfunc, int offset, unsigned int value);
# 8557 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSetf(CUfunction hfunc, int offset, float value);
# 8592 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSetv(CUfunction hfunc, int offset, void *ptr, unsigned int numbytes);
# 8629 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunch(CUfunction f);
# 8668 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchGrid(CUfunction f, int grid_width, int grid_height);
# 8715 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream);
# 8740 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef);
# 8778 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize);
# 8818 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned int flags);
# 8868 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSize(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit);
# 8912 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuOccupancyMaxPotentialBlockSizeWithFlags(int *minGridSize, int *blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned int flags);
# 8955 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned int Flags);
# 8982 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned int Flags);
# 9026 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetAddress_v2(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);
# 9078 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch);
# 9107 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);
# 9147 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am);
# 9180 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 9213 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm);
# 9239 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias);
# 9267 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp);
# 9293 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned int maxAniso);
# 9328 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefSetFlags(CUtexref hTexRef, unsigned int Flags);
# 9354 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetAddress_v2(CUdeviceptr *pdptr, CUtexref hTexRef);
# 9380 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetArray(CUarray *phArray, CUtexref hTexRef);
# 9405 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMipmappedArray(CUmipmappedArray *phMipmappedArray, CUtexref hTexRef);
# 9431 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetAddressMode(CUaddress_mode *pam, CUtexref hTexRef, int dim);
# 9455 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);
# 9481 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetFormat(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef);
# 9505 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMipmapFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);
# 9529 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMipmapLevelBias(float *pbias, CUtexref hTexRef);
# 9554 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMipmapLevelClamp(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, CUtexref hTexRef);
# 9578 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetMaxAnisotropy(int *pmaxAniso, CUtexref hTexRef);
# 9601 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefGetFlags(unsigned int *pFlags, CUtexref hTexRef);
# 9640 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefCreate(CUtexref *pTexRef);
# 9660 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexRefDestroy(CUtexref hTexRef);
# 9699 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned int Flags);
# 9720 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfRefGetArray(CUarray *phArray, CUsurfref hSurfRef);
# 9942 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectCreate(CUtexObject *pTexObject, const CUDA_RESOURCE_DESC *pResDesc, const CUDA_TEXTURE_DESC *pTexDesc, const CUDA_RESOURCE_VIEW_DESC *pResViewDesc);
# 9960 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectDestroy(CUtexObject texObject);
# 9979 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUtexObject texObject);
# 9998 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC *pTexDesc, CUtexObject texObject);
# 10018 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC *pResViewDesc, CUtexObject texObject);
# 10059 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectCreate(CUsurfObject *pSurfObject, const CUDA_RESOURCE_DESC *pResDesc);
# 10077 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectDestroy(CUsurfObject surfObject);
# 10096 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUsurfObject surfObject);
# 10138 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuDeviceCanAccessPeer(int *canAccessPeer, CUdevice dev, CUdevice peerDev);
# 10185 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxEnablePeerAccess(CUcontext peerContext, unsigned int Flags);
# 10210 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuCtxDisablePeerAccess(CUcontext peerContext);
# 10254 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsUnregisterResource(CUgraphicsResource resource);
# 10292 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsSubResourceGetMappedArray(CUarray *pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel);
# 10323 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray *pMipmappedArray, CUgraphicsResource resource);
# 10359 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource);
# 10400 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsResourceSetMapFlags_v2(CUgraphicsResource resource, unsigned int flags);
# 10439 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsMapResources_ptsz(unsigned int count, CUgraphicsResource *resources, CUstream hStream);
# 10475 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
CUresult cuGraphicsUnmapResources_ptsz(unsigned int count, CUgraphicsResource *resources, CUstream hStream);



CUresult cuGetExportTable(const void **ppExportTable, const CUuuid *pExportTableId);
# 10790 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda.h"
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/compiler.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/host_system.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/host_system.h"
       
# 30 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/device_system.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/device_system.h"
       
# 31 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/host_device.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/host_device.h"
       
# 32 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/debug.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/debug.h"
       
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/compiler_fence.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/compiler_fence.h"
       
# 34 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/forceinline.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/forceinline.h"
       
# 35 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/hd_warning_disable.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/hd_warning_disable.h"
       
# 36 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/global_workarounds.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/global_workarounds.h"
       






#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 37 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config/config.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/config.h" 2
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/execution_policy.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/execution_policy.h"
       



namespace thrust
{
namespace detail
{
# 41 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/execution_policy.h"
template<typename DerivedPolicy> struct execution_policy_base {};


template<typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
inline execution_policy_base<DerivedPolicy> &strip_const(const execution_policy_base<DerivedPolicy> &x)
{
  return const_cast<execution_policy_base<DerivedPolicy>&>(x);
}


template<typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
inline DerivedPolicy &derived_cast(execution_policy_base<DerivedPolicy> &x)
{
  return static_cast<DerivedPolicy&>(x);
}


template<typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
inline const DerivedPolicy &derived_cast(const execution_policy_base<DerivedPolicy> &x)
{
  return static_cast<const DerivedPolicy&>(x);
}


}


template<typename DerivedPolicy>
  struct execution_policy
    : thrust::detail::execution_policy_base<DerivedPolicy>
{};


}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h" 2

namespace thrust
{
# 93 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result);
# 148 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator,
         typename OutputIterator>
  OutputIterator inclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result);
# 203 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                AssociativeOperator binary_op);
# 258 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator,
         typename OutputIterator,
         typename AssociativeOperator>
  OutputIterator inclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                AssociativeOperator binary_op);
# 313 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result);
# 362 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator,
         typename OutputIterator>
  OutputIterator exclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result);
# 414 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init);
# 465 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator,
         typename OutputIterator,
         typename T>
  OutputIterator exclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init);
# 528 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init,
                                AssociativeOperator binary_op);
# 589 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator,
         typename OutputIterator,
         typename T,
         typename AssociativeOperator>
  OutputIterator exclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init,
                                AssociativeOperator binary_op);
# 663 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result);
# 725 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
  OutputIterator inclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result);
# 796 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred);
# 865 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate>
  OutputIterator inclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred);
# 943 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op);
# 1019 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate,
         typename AssociativeOperator>
  OutputIterator inclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op);
# 1079 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result);
# 1132 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
  OutputIterator exclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result);
# 1187 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init);
# 1241 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T>
  OutputIterator exclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init);
# 1306 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred);
# 1370 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate>
  OutputIterator exclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred);
# 1455 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op);
# 1538 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate,
         typename AssociativeOperator>
  OutputIterator exclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op);
# 1561 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h"
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/scan.inl" 1
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/scan.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_traits.h" 1
# 31 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_traits.h"
       


# 1 "/usr/include/c++/4.8/iterator" 1 3
# 58 "/usr/include/c++/4.8/iterator" 3
       
# 59 "/usr/include/c++/4.8/iterator" 3







# 1 "/usr/include/c++/4.8/bits/stream_iterator.h" 1 3
# 33 "/usr/include/c++/4.8/bits/stream_iterator.h" 3
       
# 34 "/usr/include/c++/4.8/bits/stream_iterator.h" 3



namespace std __attribute__ ((__visibility__ ("default")))
{








  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
    class istream_iterator
    : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
    {
    public:
      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_istream<_CharT, _Traits> istream_type;

    private:
      istream_type* _M_stream;
      _Tp _M_value;
      bool _M_ok;

    public:

      istream_iterator()
      : _M_stream(0), _M_value(), _M_ok(false) {}


      istream_iterator(istream_type& __s)
      : _M_stream(&__s)
      { _M_read(); }

      istream_iterator(const istream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
        _M_ok(__obj._M_ok)
      { }

      const _Tp&
      operator*() const
      {


                        ;
 return _M_value;
      }

      const _Tp*
      operator->() const { return &(operator*()); }

      istream_iterator&
      operator++()
      {


                        ;
 _M_read();
 return *this;
      }

      istream_iterator
      operator++(int)
      {


                        ;
 istream_iterator __tmp = *this;
 _M_read();
 return __tmp;
      }

      bool
      _M_equal(const istream_iterator& __x) const
      { return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream); }

    private:
      void
      _M_read()
      {
 _M_ok = (_M_stream && *_M_stream) ? true : false;
 if (_M_ok)
   {
     *_M_stream >> _M_value;
     _M_ok = *_M_stream ? true : false;
   }
      }
    };


  template<typename _Tp, typename _CharT, typename _Traits, typename _Dist>
    inline bool
    operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return __x._M_equal(__y); }


  template <class _Tp, class _CharT, class _Traits, class _Dist>
    inline bool
    operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
        const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
    { return !__x._M_equal(__y); }
# 152 "/usr/include/c++/4.8/bits/stream_iterator.h" 3
  template<typename _Tp, typename _CharT = char,
           typename _Traits = char_traits<_CharT> >
    class ostream_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:


      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


    private:
      ostream_type* _M_stream;
      const _CharT* _M_string;

    public:

      ostream_iterator(ostream_type& __s) : _M_stream(&__s), _M_string(0) {}
# 183 "/usr/include/c++/4.8/bits/stream_iterator.h" 3
      ostream_iterator(ostream_type& __s, const _CharT* __c)
      : _M_stream(&__s), _M_string(__c) { }


      ostream_iterator(const ostream_iterator& __obj)
      : _M_stream(__obj._M_stream), _M_string(__obj._M_string) { }



      ostream_iterator&
      operator=(const _Tp& __value)
      {


                        ;
 *_M_stream << __value;
 if (_M_string) *_M_stream << _M_string;
 return *this;
      }

      ostream_iterator&
      operator*()
      { return *this; }

      ostream_iterator&
      operator++()
      { return *this; }

      ostream_iterator&
      operator++(int)
      { return *this; }
    };




}
# 67 "/usr/include/c++/4.8/iterator" 2 3
# 35 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_traits.h" 2

namespace thrust
{




template<typename T>
  struct iterator_traits
{
  typedef typename T::difference_type difference_type;
  typedef typename T::value_type value_type;
  typedef typename T::pointer pointer;
  typedef typename T::reference reference;
  typedef typename T::iterator_category iterator_category;
};


template<typename T>
  struct iterator_traits<T*>
{
  typedef std::ptrdiff_t difference_type;
  typedef T value_type;
  typedef T* pointer;
  typedef T& reference;
  typedef std::random_access_iterator_tag iterator_category;
};

template<typename T>
  struct iterator_traits<const T*>
{
  typedef std::ptrdiff_t difference_type;
  typedef T value_type;
  typedef const T* pointer;
  typedef const T& reference;
  typedef std::random_access_iterator_tag iterator_category;
};

template<typename Iterator> struct iterator_value;

template<typename Iterator> struct iterator_pointer;

template<typename Iterator> struct iterator_reference;

template<typename Iterator> struct iterator_difference;

template<typename Iterator> struct iterator_traversal;

template<typename Iterator> struct iterator_system;


template<typename Iterator>
  struct __attribute__ ((deprecated)) iterator_space
{
  typedef __attribute__ ((deprecated)) typename iterator_system<Iterator>::type type;
};


}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_traversal_tags.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_traversal_tags.h"
       

namespace thrust
{


struct no_traversal_tag {};

struct incrementable_traversal_tag
  : no_traversal_tag {};

struct single_pass_traversal_tag
  : incrementable_traversal_tag {};

struct forward_traversal_tag
  : single_pass_traversal_tag {};

struct bidirectional_traversal_tag
  : forward_traversal_tag {};

struct random_access_traversal_tag
  : bidirectional_traversal_tag {};

}
# 96 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_traits.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/host_system_tag.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/host_system_tag.h"
       





# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/execution_policy.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/execution_policy.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/execution_policy.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/execution_policy.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{
# 39 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/execution_policy.h"
struct tag;


template<typename> struct execution_policy;


template<>
  struct execution_policy<tag>
    : thrust::execution_policy<tag>
{};


struct tag : execution_policy<tag>
{
  __attribute__((host)) __attribute__((device)) tag() {}
};


template<typename Derived>
  struct execution_policy
    : thrust::execution_policy<Derived>
{

  inline operator tag () const
  {
    return tag();
  }
};



static const __attribute__((device)) tag seq;





}
}
}
}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/execution_policy.h" 2

namespace thrust
{
namespace system
{

namespace cpp
{
namespace detail
{
# 39 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/execution_policy.h"
struct tag;


template<typename> struct execution_policy;


template<>
  struct execution_policy<tag>
    : thrust::system::detail::sequential::execution_policy<tag>
{};



struct tag : execution_policy<tag> {};


template<typename Derived>
  struct execution_policy
    : thrust::system::detail::sequential::execution_policy<Derived>
{

  inline operator tag () const
  {
    return tag();
  }
};

}


using thrust::system::cpp::detail::execution_policy;
using thrust::system::cpp::detail::tag;

}
}


namespace cpp
{

using thrust::system::cpp::execution_policy;
using thrust::system::cpp::tag;

}
}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/host_system_tag.h" 2


namespace thrust
{

typedef thrust::system::cpp::tag host_system_tag;

}


namespace thrust
{

typedef __attribute__ ((deprecated)) host_system_tag host_space_tag;

}
# 97 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_traits.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/device_system_tag.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/device_system_tag.h"
       





# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/execution_policy.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/execution_policy.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/any_system_tag.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/any_system_tag.h"
       




namespace thrust
{

struct any_system_tag
  : thrust::execution_policy<any_system_tag>
{


  template<typename T> operator T () const {return T();}
};


typedef __attribute__ ((deprecated)) any_system_tag any_space_tag;

}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/execution_policy.h" 2

namespace thrust
{
namespace system
{
namespace cuda
{

namespace detail
{
# 41 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/execution_policy.h"
struct tag;


template<typename> struct execution_policy;


template<>
  struct execution_policy<tag>
    : thrust::execution_policy<tag>
{};



struct tag : execution_policy<tag> {};


template<typename Derived>
  struct execution_policy
    : thrust::execution_policy<Derived>
{

  inline operator tag () const
  {
    return tag();
  }
};


template<typename System1, typename System2>
  struct cross_system
    : thrust::execution_policy<cross_system<System1,System2> >
{
  inline __attribute__((host)) __attribute__((device))
  cross_system(thrust::execution_policy<System1> &system1,
               thrust::execution_policy<System2> &system2)
    : system1(system1), system2(system2)
  {}

  thrust::execution_policy<System1> &system1;
  thrust::execution_policy<System2> &system2;

  inline __attribute__((host)) __attribute__((device))
  cross_system<System2,System1> rotate() const
  {
    return cross_system<System2,System1>(system2,system1);
  }
};





template<typename System1, typename System2>
inline __attribute__((host)) __attribute__((device))
cross_system<System1,System2> select_system(const execution_policy<System1> &system1, const thrust::cpp::execution_policy<System2> &system2)
{
  thrust::execution_policy<System1> &non_const_system1 = const_cast<execution_policy<System1>&>(system1);
  thrust::cpp::execution_policy<System2> &non_const_system2 = const_cast<thrust::cpp::execution_policy<System2>&>(system2);
  return cross_system<System1,System2>(non_const_system1,non_const_system2);
}


template<typename System1, typename System2>
inline __attribute__((host)) __attribute__((device))
cross_system<System1,System2> select_system(const thrust::cpp::execution_policy<System1> &system1, execution_policy<System2> &system2)
{
  thrust::cpp::execution_policy<System1> &non_const_system1 = const_cast<thrust::cpp::execution_policy<System1>&>(system1);
  thrust::execution_policy<System2> &non_const_system2 = const_cast<execution_policy<System2>&>(system2);
  return cross_system<System1,System2>(non_const_system1,non_const_system2);
}


}


using thrust::system::cuda::detail::execution_policy;
using thrust::system::cuda::detail::tag;

}
}


namespace cuda
{

using thrust::system::cuda::execution_policy;
using thrust::system::cuda::tag;

}
}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/device_system_tag.h" 2


namespace thrust
{

typedef thrust::system::cuda::tag device_system_tag;

}


namespace thrust
{

typedef __attribute__ ((deprecated)) device_system_tag device_space_tag;

}
# 98 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_traits.h" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_traits.inl" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_traits.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h" 1
# 32 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_category_with_system_and_traversal.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_category_with_system_and_traversal.h"
       



namespace thrust
{
namespace detail
{


template<typename Category, typename System, typename Traversal>
  struct iterator_category_with_system_and_traversal
    : Category
{
};



template<typename Category> struct iterator_category_to_system;

template<typename Category, typename System, typename Traversal>
  struct iterator_category_to_system<iterator_category_with_system_and_traversal<Category,System,Traversal> >
{
  typedef System type;
};



template<typename Category> struct iterator_category_to_traversal;

template<typename Category, typename System, typename Traversal>
  struct iterator_category_to_traversal<iterator_category_with_system_and_traversal<Category,System,Traversal> >
{
  typedef Traversal type;
};



}
}
# 36 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h" 2






namespace thrust
{
# 64 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
struct input_device_iterator_tag
  : thrust::detail::iterator_category_with_system_and_traversal<
      std::input_iterator_tag,
      thrust::device_system_tag,
      thrust::single_pass_traversal_tag
    >
{};
# 83 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
struct output_device_iterator_tag
  : thrust::detail::iterator_category_with_system_and_traversal<
      std::output_iterator_tag,
      thrust::device_system_tag,
      thrust::single_pass_traversal_tag
    >
{};
# 102 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
struct forward_device_iterator_tag
  : thrust::detail::iterator_category_with_system_and_traversal<
      std::forward_iterator_tag,
      thrust::device_system_tag,
      thrust::forward_traversal_tag
    >
{};
# 121 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
struct bidirectional_device_iterator_tag
  : thrust::detail::iterator_category_with_system_and_traversal<
      std::bidirectional_iterator_tag,
      thrust::device_system_tag,
      thrust::bidirectional_traversal_tag
    >
{};
# 140 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
struct random_access_device_iterator_tag
  : thrust::detail::iterator_category_with_system_and_traversal<
      std::random_access_iterator_tag,
      thrust::device_system_tag,
      thrust::random_access_traversal_tag
    >
{};
# 160 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
typedef std::input_iterator_tag input_host_iterator_tag;
# 174 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
typedef std::output_iterator_tag output_host_iterator_tag;
# 188 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
typedef std::forward_iterator_tag forward_host_iterator_tag;
# 202 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
typedef std::bidirectional_iterator_tag bidirectional_host_iterator_tag;
# 216 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h"
typedef std::random_access_iterator_tag random_access_host_iterator_tag;




}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/universal_categories.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/universal_categories.h"
       






namespace thrust
{



struct input_universal_iterator_tag
{
  operator input_host_iterator_tag () {return input_host_iterator_tag();}

  operator input_device_iterator_tag () {return input_device_iterator_tag();}
};

struct output_universal_iterator_tag
{
  operator output_host_iterator_tag () {return output_host_iterator_tag();}

  operator output_device_iterator_tag () {return output_device_iterator_tag();}
};

struct forward_universal_iterator_tag
  : input_universal_iterator_tag
{
  operator forward_host_iterator_tag () {return forward_host_iterator_tag();};

  operator forward_device_iterator_tag () {return forward_device_iterator_tag();};
};

struct bidirectional_universal_iterator_tag
  : forward_universal_iterator_tag
{
  operator bidirectional_host_iterator_tag () {return bidirectional_host_iterator_tag();};

  operator bidirectional_device_iterator_tag () {return bidirectional_device_iterator_tag();};
};


namespace detail
{


template<typename T>
struct one_degree_of_separation
  : T
{
};

}


struct random_access_universal_iterator_tag
{

  operator random_access_host_iterator_tag () {return random_access_host_iterator_tag();};

  operator random_access_device_iterator_tag () {return random_access_device_iterator_tag();};


  operator detail::one_degree_of_separation<bidirectional_universal_iterator_tag> () {return detail::one_degree_of_separation<bidirectional_universal_iterator_tag>();}

};


}
# 224 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_categories.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_traits.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_category_to_traversal.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_category_to_traversal.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_category_to_system.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_category_to_system.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits.h" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits.h"
       
# 45 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits.h"
namespace thrust
{


template<typename T> class device_reference;

namespace detail
{

 template<typename _Tp, _Tp __v>
   struct integral_constant
   {
     static const _Tp value = __v;
     typedef _Tp value_type;
     typedef integral_constant<_Tp, __v> type;
   };


 typedef integral_constant<bool, true> true_type;


 typedef integral_constant<bool, false> false_type;


template<typename T> struct is_integral : public false_type {};
template<> struct is_integral<bool> : public true_type {};
template<> struct is_integral<char> : public true_type {};
template<> struct is_integral<signed char> : public true_type {};
template<> struct is_integral<unsigned char> : public true_type {};
template<> struct is_integral<short> : public true_type {};
template<> struct is_integral<unsigned short> : public true_type {};
template<> struct is_integral<int> : public true_type {};
template<> struct is_integral<unsigned int> : public true_type {};
template<> struct is_integral<long> : public true_type {};
template<> struct is_integral<unsigned long> : public true_type {};
template<> struct is_integral<long long> : public true_type {};
template<> struct is_integral<unsigned long long> : public true_type {};
template<> struct is_integral<const bool> : public true_type {};
template<> struct is_integral<const char> : public true_type {};
template<> struct is_integral<const unsigned char> : public true_type {};
template<> struct is_integral<const short> : public true_type {};
template<> struct is_integral<const unsigned short> : public true_type {};
template<> struct is_integral<const int> : public true_type {};
template<> struct is_integral<const unsigned int> : public true_type {};
template<> struct is_integral<const long> : public true_type {};
template<> struct is_integral<const unsigned long> : public true_type {};
template<> struct is_integral<const long long> : public true_type {};
template<> struct is_integral<const unsigned long long> : public true_type {};

template<typename T> struct is_floating_point : public false_type {};
template<> struct is_floating_point<float> : public true_type {};
template<> struct is_floating_point<double> : public true_type {};
template<> struct is_floating_point<long double> : public true_type {};

template<typename T> struct is_arithmetic : public is_integral<T> {};
template<> struct is_arithmetic<float> : public true_type {};
template<> struct is_arithmetic<double> : public true_type {};
template<> struct is_arithmetic<const float> : public true_type {};
template<> struct is_arithmetic<const double> : public true_type {};

template<typename T> struct is_pointer : public false_type {};
template<typename T> struct is_pointer<T *> : public true_type {};

template<typename T> struct is_device_ptr : public false_type {};

template<typename T> struct is_void : public false_type {};
template<> struct is_void<void> : public true_type {};
template<> struct is_void<const void> : public true_type {};


namespace tt_detail
{


}

template<typename T> struct is_pod
   : public integral_constant<
       bool,
       is_void<T>::value || is_pointer<T>::value || is_arithmetic<T>::value






       || __is_pod(T)


     >
 {};


template<typename T> struct has_trivial_constructor
  : public integral_constant<
      bool,
      is_pod<T>::value





      || __has_trivial_constructor(T)


      >
{};

template<typename T> struct has_trivial_copy_constructor
  : public integral_constant<
      bool,
      is_pod<T>::value





      || __has_trivial_copy(T)


    >
{};

template<typename T> struct has_trivial_destructor : public is_pod<T> {};

template<typename T> struct is_const : public false_type {};
template<typename T> struct is_const<const T> : public true_type {};

template<typename T> struct is_volatile : public false_type {};
template<typename T> struct is_volatile<volatile T> : public true_type {};

template<typename T>
  struct add_const
{
  typedef T const type;
};

template<typename T>
  struct remove_const
{
  typedef T type;
};

template<typename T>
  struct remove_const<const T>
{
  typedef T type;
};

template<typename T>
  struct add_volatile
{
  typedef volatile T type;
};

template<typename T>
  struct remove_volatile
{
  typedef T type;
};

template<typename T>
  struct remove_volatile<volatile T>
{
  typedef T type;
};

template<typename T>
  struct add_cv
{
  typedef const volatile T type;
};

template<typename T>
  struct remove_cv
{
  typedef typename remove_const<typename remove_volatile<T>::type>::type type;
};


template<typename T> struct is_reference : public false_type {};
template<typename T> struct is_reference<T&> : public true_type {};

template<typename T> struct is_device_reference : public false_type {};
template<typename T> struct is_device_reference< thrust::device_reference<T> > : public true_type {};



template<typename _Tp, bool = (is_void<_Tp>::value || is_reference<_Tp>::value)>
  struct __add_reference_helper
  { typedef _Tp& type; };

template<typename _Tp>
  struct __add_reference_helper<_Tp, true>
  { typedef _Tp type; };

template<typename _Tp>
  struct add_reference
    : public __add_reference_helper<_Tp>{};

template<typename T>
  struct remove_reference
{
  typedef T type;
};

template<typename T>
  struct remove_reference<T&>
{
  typedef T type;
};

template<typename T1, typename T2>
  struct is_same
    : public false_type
{
};

template<typename T>
  struct is_same<T,T>
    : public true_type
{
};

template<typename T1, typename T2>
  struct lazy_is_same
    : is_same<typename T1::type, typename T2::type>
{
};

template<typename T1, typename T2>
  struct is_different
    : public true_type
{
};

template<typename T>
  struct is_different<T,T>
    : public false_type
{
};

template<typename T1, typename T2>
  struct lazy_is_different
    : is_different<typename T1::type, typename T2::type>
{
};

namespace tt_detail
{

template<typename T>
  struct is_int_or_cref
{
  typedef typename remove_reference<T>::type type_sans_ref;
  static const bool value = (is_integral<T>::value
                             || (is_integral<type_sans_ref>::value
                                 && is_const<type_sans_ref>::value
                                 && !is_volatile<type_sans_ref>::value));
};






template<typename From, typename To>
  struct is_convertible_sfinae
{
  private:
    typedef char one_byte;
    typedef struct { char two_chars[2]; } two_bytes;

    static one_byte test(To);
    static two_bytes test(...);
    static From m_from;

  public:
    static const bool value = sizeof(test(m_from)) == sizeof(one_byte);
};






template<typename From, typename To>
  struct is_convertible_needs_simple_test
{
  static const bool from_is_void = is_void<From>::value;
  static const bool to_is_void = is_void<To>::value;
  static const bool from_is_float = is_floating_point<typename remove_reference<From>::type>::value;
  static const bool to_is_int_or_cref = is_int_or_cref<To>::value;

  static const bool value = (from_is_void || to_is_void || (from_is_float && to_is_int_or_cref));
};


template<typename From, typename To,
         bool = is_convertible_needs_simple_test<From,To>::value>
  struct is_convertible
{
  static const bool value = (is_void<To>::value
                             || (is_int_or_cref<To>::value
                                 && !is_void<From>::value));
};


template<typename From, typename To>
  struct is_convertible<From, To, false>
{
  static const bool value = (is_convertible_sfinae<typename
                             add_reference<From>::type, To>::value);
};


}

template<typename From, typename To>
  struct is_convertible
    : public integral_constant<bool, tt_detail::is_convertible<From, To>::value>
{
};


template<typename T1, typename T2>
  struct is_one_convertible_to_the_other
    : public integral_constant<
        bool,
        is_convertible<T1,T2>::value || is_convertible<T2,T1>::value
      >
{};




template <typename Condition1, typename Condition2, typename Condition3 = false_type,
          typename Condition4 = false_type, typename Condition5 = false_type, typename Condition6 = false_type,
          typename Condition7 = false_type, typename Condition8 = false_type, typename Condition9 = false_type,
          typename Condition10 = false_type>
  struct or_
    : public integral_constant<
        bool,
        Condition1::value || Condition2::value || Condition3::value || Condition4::value || Condition5::value || Condition6::value || Condition7::value || Condition8::value || Condition9::value || Condition10::value
      >
{
};

template <typename Condition1, typename Condition2, typename Condition3 = true_type>
  struct and_
    : public integral_constant<bool, Condition1::value && Condition2::value && Condition3::value>
{
};

template <typename Boolean>
  struct not_
    : public integral_constant<bool, !Boolean::value>
{
};

template <bool, typename Then, typename Else>
  struct eval_if
{
};

template<typename Then, typename Else>
  struct eval_if<true, Then, Else>
{
  typedef typename Then::type type;
};

template<typename Then, typename Else>
  struct eval_if<false, Then, Else>
{
  typedef typename Else::type type;
};

template<typename T>


  struct identity_
{
  typedef T type;
};

template<bool, typename T = void> struct enable_if {};
template<typename T> struct enable_if<true, T> {typedef T type;};

template<bool, typename T> struct lazy_enable_if {};
template<typename T> struct lazy_enable_if<true, T> {typedef typename T::type type;};

template<bool condition, typename T = void> struct disable_if : enable_if<!condition, T> {};
template<bool condition, typename T> struct lazy_disable_if : lazy_enable_if<!condition, T> {};


template<typename T1, typename T2, typename T = void>
  struct enable_if_convertible
    : enable_if< is_convertible<T1,T2>::value, T >
{};


template<typename T1, typename T2, typename T = void>
  struct disable_if_convertible
    : disable_if< is_convertible<T1,T2>::value, T >
{};


template<typename T1, typename T2, typename Result = void>
  struct enable_if_different
    : enable_if<is_different<T1,T2>::value, Result>
{};


template<typename T>
  struct is_numeric
    : and_<
        is_convertible<int,T>,
        is_convertible<T,int>
      >
{
};


template<typename> struct is_reference_to_const : false_type {};
template<typename T> struct is_reference_to_const<const T&> : true_type {};




namespace tt_detail
{

template<typename T> struct make_unsigned_simple;

template<> struct make_unsigned_simple<char> { typedef unsigned char type; };
template<> struct make_unsigned_simple<signed char> { typedef signed char type; };
template<> struct make_unsigned_simple<unsigned char> { typedef unsigned char type; };
template<> struct make_unsigned_simple<short> { typedef unsigned short type; };
template<> struct make_unsigned_simple<unsigned short> { typedef unsigned short type; };
template<> struct make_unsigned_simple<int> { typedef unsigned int type; };
template<> struct make_unsigned_simple<unsigned int> { typedef unsigned int type; };
template<> struct make_unsigned_simple<long int> { typedef unsigned long int type; };
template<> struct make_unsigned_simple<unsigned long int> { typedef unsigned long int type; };
template<> struct make_unsigned_simple<long long int> { typedef unsigned long long int type; };
template<> struct make_unsigned_simple<unsigned long long int> { typedef unsigned long long int type; };

template<typename T>
  struct make_unsigned_base
{

  typedef typename remove_cv<T>::type remove_cv_t;


  typedef typename make_unsigned_simple<remove_cv_t>::type unsigned_remove_cv_t;


  typedef typename eval_if<
    is_const<T>::value && is_volatile<T>::value,

    add_cv<unsigned_remove_cv_t>,

    eval_if<
      is_const<T>::value,

      add_const<unsigned_remove_cv_t>,
      eval_if<
        is_volatile<T>::value,

        add_volatile<unsigned_remove_cv_t>,

        identity_<unsigned_remove_cv_t>
      >
    >
  >::type type;
};

}

template<typename T>
  struct make_unsigned
    : tt_detail::make_unsigned_base<T>
{};

struct largest_available_float
{




  typedef double type;




};


template<typename T1, typename T2>
  struct larger_type
    : thrust::detail::eval_if<
        (sizeof(T2) > sizeof(T1)),
        thrust::detail::identity_<T2>,
        thrust::detail::identity_<T1>
      >
{};


namespace is_base_of_ns
{

typedef char yes;
typedef struct { char two_chars[2]; } no;

template<typename Base, typename Derived>
  struct host
{
  operator Base*() const;
  operator Derived*();
};

template<typename Base, typename Derived>
  struct impl
{
  template<typename T> static yes check(Derived *, T);
  static no check(Base*, int);

  static const bool value = sizeof(check(host<Base,Derived>(), int())) == sizeof(yes);
};

}


template<typename Base, typename Derived>
  struct is_base_of
    : integral_constant<
        bool,
        is_base_of_ns::impl<Base,Derived>::value
      >
{};

template<typename Base, typename Derived, typename Result = void>
  struct enable_if_base_of
    : enable_if<
        is_base_of<Base,Derived>::value,
        Result
      >
{};


namespace is_assignable_ns
{

template<typename T1, typename T2>
  class is_assignable
{
  typedef char yes_type;
  typedef struct { char array[2]; } no_type;

  template<typename T> static typename add_reference<T>::type declval();

  template<unsigned int> struct helper { typedef void * type; };

  template<typename U1, typename U2> static yes_type test(typename helper<sizeof(declval<U1>() = declval<U2>())>::type);

  template<typename,typename> static no_type test(...);

  public:
    static const bool value = sizeof(test<T1,T2>(0)) == 1;
};

}


template<typename T1, typename T2>
  struct is_assignable
    : integral_constant<
        bool,
        is_assignable_ns::is_assignable<T1,T2>::value
      >
{};


template<typename T>
  struct is_copy_assignable
    : is_assignable<
        typename add_reference<T>::type,
        typename add_reference<typename add_const<T>::type>::type
      >
{};


template<typename T1, typename T2, typename Enable = void> struct promoted_numerical_type;

template<typename T1, typename T2>
  struct promoted_numerical_type<T1,T2,typename enable_if<and_
  <typename is_floating_point<T1>::type,typename is_floating_point<T2>::type>
  ::value>::type>
  {
  typedef larger_type<T1,T2> type;
  };

template<typename T1, typename T2>
  struct promoted_numerical_type<T1,T2,typename enable_if<and_
  <typename is_integral<T1>::type,typename is_floating_point<T2>::type>
  ::value>::type>
  {
  typedef T2 type;
  };

template<typename T1, typename T2>
  struct promoted_numerical_type<T1,T2,typename enable_if<and_
  <typename is_floating_point<T1>::type, typename is_integral<T2>::type>
  ::value>::type>
  {
  typedef T1 type;
  };

}

}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/has_trivial_assign.h" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/has_trivial_assign.h"
       




namespace thrust
{

namespace detail
{

template<typename T> struct has_trivial_assign
  : public integral_constant<
      bool,
      (is_pod<T>::value && !is_const<T>::value)





      || __has_trivial_assign(T)


    >
{};

}

}
# 667 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_category_to_system.h" 2

namespace thrust
{

namespace detail
{


template <typename> struct is_iterator_system;

template <typename> struct device_iterator_category_to_backend_system;



template<typename Category>
  struct iterator_category_to_system

    : eval_if<
        or_<
          is_convertible<Category, thrust::input_host_iterator_tag>,
          is_convertible<Category, thrust::output_host_iterator_tag>
        >::value,

        detail::identity_<thrust::host_system_tag>,


        eval_if<
          or_<
            is_convertible<Category, thrust::input_device_iterator_tag>,
            is_convertible<Category, thrust::output_device_iterator_tag>
          >::value,

          detail::identity_<thrust::device_system_tag>,


          detail::identity_<void>
        >
      >
{
};


template<typename CategoryOrTraversal>
  struct iterator_category_or_traversal_to_system
    : eval_if<
        is_iterator_system<CategoryOrTraversal>::value,
        detail::identity_<CategoryOrTraversal>,
        iterator_category_to_system<CategoryOrTraversal>
      >
{
};

}
}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_category_to_traversal.h" 2


namespace thrust
{

namespace detail
{


template <typename> struct is_iterator_system;
template <typename> struct is_iterator_traversal;


using namespace thrust::detail;

template <typename Category>
  struct host_system_category_to_traversal
    : eval_if<
        is_convertible<Category, random_access_host_iterator_tag>::value,
        detail::identity_<random_access_traversal_tag>,
        eval_if<
          is_convertible<Category, bidirectional_host_iterator_tag>::value,
          detail::identity_<bidirectional_traversal_tag>,
          eval_if<
            is_convertible<Category, forward_host_iterator_tag>::value,
            detail::identity_<forward_traversal_tag>,
            eval_if<
              is_convertible<Category, input_host_iterator_tag>::value,
              detail::identity_<single_pass_traversal_tag>,
              eval_if<
                is_convertible<Category, output_host_iterator_tag>::value,
                detail::identity_<incrementable_traversal_tag>,
                void
              >
            >
          >
        >
      >
{
};



template <typename Category>
  struct device_system_category_to_traversal
    : eval_if<
        is_convertible<Category, random_access_device_iterator_tag>::value,
        detail::identity_<random_access_traversal_tag>,
        eval_if<
          is_convertible<Category, bidirectional_device_iterator_tag>::value,
          detail::identity_<bidirectional_traversal_tag>,
          eval_if<
            is_convertible<Category, forward_device_iterator_tag>::value,
            detail::identity_<forward_traversal_tag>,
            eval_if<
              is_convertible<Category, input_device_iterator_tag>::value,
              detail::identity_<single_pass_traversal_tag>,
              eval_if<
                is_convertible<Category, output_device_iterator_tag>::value,
                detail::identity_<incrementable_traversal_tag>,
                void
              >
            >
          >
        >
      >
{
};


template<typename Category>
  struct category_to_traversal

    : eval_if<
        or_<
          is_convertible<Category, thrust::input_host_iterator_tag>,
          is_convertible<Category, thrust::output_host_iterator_tag>
        >::value,

        host_system_category_to_traversal<Category>,


        eval_if<
          or_<
            is_convertible<Category, thrust::input_device_iterator_tag>,
            is_convertible<Category, thrust::output_device_iterator_tag>
          >::value,

          device_system_category_to_traversal<Category>,


          void
        >
      >
{};


template <typename CategoryOrTraversal>
  struct iterator_category_to_traversal
    : eval_if<
        is_iterator_traversal<CategoryOrTraversal>::value,
        detail::identity_<CategoryOrTraversal>,
        category_to_traversal<CategoryOrTraversal>
      >
{
};


}

}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_traits.inl" 2


namespace thrust
{

template<typename Iterator>
  struct iterator_value
{
  typedef typename thrust::iterator_traits<Iterator>::value_type type;
};


template<typename Iterator>
  struct iterator_pointer
{
  typedef typename thrust::iterator_traits<Iterator>::pointer type;
};


template<typename Iterator>
  struct iterator_reference
{
  typedef typename iterator_traits<Iterator>::reference type;
};


template<typename Iterator>
  struct iterator_difference
{
  typedef typename thrust::iterator_traits<Iterator>::difference_type type;
};


template<typename Iterator>
  struct iterator_system
    : detail::iterator_category_to_system<
        typename thrust::iterator_traits<Iterator>::iterator_category
      >
{
};


template<>
  struct iterator_system<void *>
{
  typedef thrust::iterator_system<int*>::type type;
};

template<>
  struct iterator_system<const void *>
{
  typedef thrust::iterator_system<const int*>::type type;
};


template <typename Iterator>
  struct iterator_traversal
    : detail::iterator_category_to_traversal<
        typename thrust::iterator_traits<Iterator>::iterator_category
      >
{
};

namespace detail
{

template <typename T>
  struct is_iterator_traversal
    : thrust::detail::is_convertible<T, incrementable_traversal_tag>
{
};


template<typename T>
  struct is_iterator_system
    : detail::or_<
        detail::is_convertible<T, any_system_tag>,
        detail::or_<
          detail::is_convertible<T, host_system_tag>,
          detail::is_convertible<T, device_system_tag>
        >
      >
{
};


}
}
# 100 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_traits.h" 2
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/scan.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/select_system.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/select_system.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/is_metafunction_defined.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/is_metafunction_defined.h"
       

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/has_nested_type.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/has_nested_type.h"
       
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/is_metafunction_defined.h" 2


namespace thrust
{

namespace detail
{

template<typename T> struct is_metafunction_defined { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};

template<typename Metafunction>
  struct enable_if_defined
    : thrust::detail::lazy_enable_if<
        is_metafunction_defined<Metafunction>::value,
        Metafunction
      >
{};

}

}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/select_system.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/minimum_system.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/minimum_system.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/minimum_type.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/minimum_type.h"
       



namespace thrust
{

namespace detail
{

namespace minimum_type_detail
{





template <typename T1, typename T2, bool GreaterEqual, bool LessEqual> struct minimum_type_impl {};

template <typename T1, typename T2>
struct minimum_type_impl<T1,T2,true,false>
{
  typedef T2 type;
};

template <typename T1, typename T2>
struct minimum_type_impl<T1,T2,false,true>
{
  typedef T1 type;
};

template <typename T1, typename T2>
struct minimum_type_impl<T1,T2,true,true>
{
  typedef T1 type;
};

template <typename T1, typename T2>
struct primitive_minimum_type
  : minimum_type_detail::minimum_type_impl<
      T1,
      T2,
      ::thrust::detail::is_convertible<T1,T2>::value,
      ::thrust::detail::is_convertible<T2,T1>::value
    >
{
};



template <typename T>
struct primitive_minimum_type<T,T>
{
  typedef T type;
};


struct any_conversion
{
  template<typename T> operator T (void);
};

}

template<typename T1,
         typename T2 = minimum_type_detail::any_conversion,
         typename T3 = minimum_type_detail::any_conversion,
         typename T4 = minimum_type_detail::any_conversion,
         typename T5 = minimum_type_detail::any_conversion,
         typename T6 = minimum_type_detail::any_conversion,
         typename T7 = minimum_type_detail::any_conversion,
         typename T8 = minimum_type_detail::any_conversion,
         typename T9 = minimum_type_detail::any_conversion,
         typename T10 = minimum_type_detail::any_conversion,
         typename T11 = minimum_type_detail::any_conversion,
         typename T12 = minimum_type_detail::any_conversion,
         typename T13 = minimum_type_detail::any_conversion,
         typename T14 = minimum_type_detail::any_conversion,
         typename T15 = minimum_type_detail::any_conversion,
         typename T16 = minimum_type_detail::any_conversion>
  struct minimum_type;


template<typename T1, typename T2>
  struct minimum_type<T1,T2>
    : minimum_type_detail::primitive_minimum_type<T1,T2>
{};

template<typename T1, typename T2>
  struct lazy_minimum_type
    : minimum_type<
        typename T1::type,
        typename T2::type
      >
{};


template<typename T1, typename T2, typename T3, typename T4,
         typename T5, typename T6, typename T7, typename T8,
         typename T9, typename T10, typename T11, typename T12,
         typename T13, typename T14, typename T15, typename T16>
  struct minimum_type
    : lazy_minimum_type<
        lazy_minimum_type<
          lazy_minimum_type<
            minimum_type<
              T1,T2
            >,
            minimum_type<
              T3,T4
            >
          >,
          lazy_minimum_type<
            minimum_type<
              T5,T6
            >,
            minimum_type<
              T7,T8
            >
          >
        >,
        lazy_minimum_type<
          lazy_minimum_type<
            minimum_type<
              T9,T10
            >,
            minimum_type<
              T11,T12
            >
          >,
          lazy_minimum_type<
            minimum_type<
              T13,T14
            >,
            minimum_type<
              T15,T16
            >
          >
        >
      >
{};

}

}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/minimum_system.h" 2

namespace thrust
{
namespace detail
{


template<typename T1,
         typename T2 = void,
         typename T3 = void,
         typename T4 = void,
         typename T5 = void,
         typename T6 = void,
         typename T7 = void,
         typename T8 = void,
         typename T9 = void,
         typename T10 = void,
         typename T11 = void,
         typename T12 = void,
         typename T13 = void,
         typename T14 = void,
         typename T15 = void,
         typename T16 = void>
  struct unrelated_systems {};




template<typename T1,
         typename T2 = minimum_type_detail::any_conversion,
         typename T3 = minimum_type_detail::any_conversion,
         typename T4 = minimum_type_detail::any_conversion,
         typename T5 = minimum_type_detail::any_conversion,
         typename T6 = minimum_type_detail::any_conversion,
         typename T7 = minimum_type_detail::any_conversion,
         typename T8 = minimum_type_detail::any_conversion,
         typename T9 = minimum_type_detail::any_conversion,
         typename T10 = minimum_type_detail::any_conversion,
         typename T11 = minimum_type_detail::any_conversion,
         typename T12 = minimum_type_detail::any_conversion,
         typename T13 = minimum_type_detail::any_conversion,
         typename T14 = minimum_type_detail::any_conversion,
         typename T15 = minimum_type_detail::any_conversion,
         typename T16 = minimum_type_detail::any_conversion>
  struct minimum_system
    : thrust::detail::eval_if<
        is_metafunction_defined<
          minimum_type<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>
        >::value,
        minimum_type<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>,
        thrust::detail::identity_<
          unrelated_systems<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>
        >
      >
{};


}
}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/select_system.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/type_traits.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/type_traits.h"
       



namespace thrust
{


struct any_system_tag;

namespace system
{
namespace detail
{


namespace generic_type_traits_ns
{

typedef char yes;
typedef char (&no)[2];

struct any_conversion
{
  template<typename T> any_conversion(const T &);


  any_conversion(const any_system_tag &);
};

namespace select_system_exists_ns
{
  no select_system(const any_conversion &);
  no select_system(const any_conversion &, const any_conversion &);
  no select_system(const any_conversion &, const any_conversion &, const any_conversion &);
  no select_system(const any_conversion &, const any_conversion &, const any_conversion &, const any_conversion &);
  no select_system(const any_conversion &, const any_conversion &, const any_conversion &, const any_conversion &, const any_conversion &);
  no select_system(const any_conversion &, const any_conversion &, const any_conversion &, const any_conversion &, const any_conversion &, const any_conversion &);

  template<typename T> yes check(const T &);

  no check(no);

  template<typename Tag>
    struct select_system1_exists
  {
    static Tag &tag;

    static const bool value = sizeof(check(select_system(tag))) == sizeof(yes);
  };

  template<typename Tag1, typename Tag2>
    struct select_system2_exists
  {
    static Tag1 &tag1;
    static Tag2 &tag2;

    static const bool value = sizeof(check(select_system(tag1,tag2))) == sizeof(yes);
  };

  template<typename Tag1, typename Tag2, typename Tag3>
    struct select_system3_exists
  {
    static Tag1 &tag1;
    static Tag2 &tag2;
    static Tag3 &tag3;

    static const bool value = sizeof(check(select_system(tag1,tag2,tag3))) == sizeof(yes);
  };

  template<typename Tag1, typename Tag2, typename Tag3, typename Tag4>
    struct select_system4_exists
  {
    static Tag1 &tag1;
    static Tag2 &tag2;
    static Tag3 &tag3;
    static Tag4 &tag4;

    static const bool value = sizeof(check(select_system(tag1,tag2,tag3,tag4))) == sizeof(yes);
  };

  template<typename Tag1, typename Tag2, typename Tag3, typename Tag4, typename Tag5>
    struct select_system5_exists
  {
    static Tag1 &tag1;
    static Tag2 &tag2;
    static Tag3 &tag3;
    static Tag4 &tag4;
    static Tag5 &tag5;

    static const bool value = sizeof(check(select_system(tag1,tag2,tag3,tag4,tag5))) == sizeof(yes);
  };

  template<typename Tag1, typename Tag2, typename Tag3, typename Tag4, typename Tag5, typename Tag6>
    struct select_system6_exists
  {
    static Tag1 &tag1;
    static Tag2 &tag2;
    static Tag3 &tag3;
    static Tag4 &tag4;
    static Tag5 &tag5;
    static Tag6 &tag6;

    static const bool value = sizeof(check(select_system(tag1,tag2,tag3,tag4,tag5,tag6))) == sizeof(yes);
  };
}

}

namespace generic
{

template<typename Tag>
  struct select_system1_exists
    : generic_type_traits_ns::select_system_exists_ns::select_system1_exists<Tag>
{};

template<typename Tag1, typename Tag2>
  struct select_system2_exists
    : generic_type_traits_ns::select_system_exists_ns::select_system2_exists<Tag1,Tag2>
{};

template<typename Tag1, typename Tag2, typename Tag3>
  struct select_system3_exists
    : generic_type_traits_ns::select_system_exists_ns::select_system3_exists<Tag1,Tag2,Tag3>
{};

template<typename Tag1, typename Tag2, typename Tag3, typename Tag4>
  struct select_system4_exists
    : generic_type_traits_ns::select_system_exists_ns::select_system4_exists<Tag1,Tag2,Tag3,Tag4>
{};

template<typename Tag1, typename Tag2, typename Tag3, typename Tag4, typename Tag5>
  struct select_system5_exists
    : generic_type_traits_ns::select_system_exists_ns::select_system5_exists<Tag1,Tag2,Tag3,Tag4,Tag5>
{};

template<typename Tag1, typename Tag2, typename Tag3, typename Tag4, typename Tag5, typename Tag6>
  struct select_system6_exists
    : generic_type_traits_ns::select_system_exists_ns::select_system6_exists<Tag1,Tag2,Tag3,Tag4,Tag5,Tag6>
{};

}
}
}
}
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/select_system.h" 2


namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{
namespace select_system_detail
{



template<typename System>
__attribute__((host)) __attribute__((device))
System &min_system(thrust::execution_policy<System> &system1,
                   thrust::execution_policy<System> &)
{
  return thrust::detail::derived_cast(system1);
}



template<typename System1, typename System2>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::enable_if<
    thrust::detail::is_same<
      System1,
      typename thrust::detail::minimum_system<System1,System2>::type
    >::value,
    System1 &
  >::type
    min_system(thrust::execution_policy<System1> &system1, thrust::execution_policy<System2> &)
{
  return thrust::detail::derived_cast(system1);
}



template<typename System1, typename System2>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::enable_if<
    thrust::detail::is_same<
      System2,
      typename thrust::detail::minimum_system<System1,System2>::type
    >::value,
    System2 &
  >::type
    min_system(thrust::execution_policy<System1> &, thrust::execution_policy<System2> &system2)
{
  return thrust::detail::derived_cast(system2);
}


}


template<typename System>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::disable_if<
    select_system1_exists<System>::value,
    System &
  >::type
    select_system(thrust::execution_policy<System> &system)
{
  return thrust::detail::derived_cast(system);
}


template<typename System1, typename System2>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::enable_if_defined<
    thrust::detail::minimum_system<System1,System2>
  >::type
    &select_system(thrust::execution_policy<System1> &system1,
                   thrust::execution_policy<System2> &system2)
{
  return select_system_detail::min_system(system1,system2);
}


template<typename System1, typename System2, typename System3>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::lazy_disable_if<
    select_system3_exists<System1,System2,System3>::value,
    thrust::detail::minimum_system<System1,System2,System3>
  >::type
    &select_system(thrust::execution_policy<System1> &system1,
                   thrust::execution_policy<System2> &system2,
                   thrust::execution_policy<System3> &system3)
{
  return select_system(select_system(system1,system2), system3);
}


template<typename System1, typename System2, typename System3, typename System4>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::lazy_disable_if<
    select_system4_exists<System1,System2,System3,System4>::value,
    thrust::detail::minimum_system<System1,System2,System3,System4>
  >::type
    &select_system(thrust::execution_policy<System1> &system1,
                   thrust::execution_policy<System2> &system2,
                   thrust::execution_policy<System3> &system3,
                   thrust::execution_policy<System4> &system4)
{
  return select_system(select_system(system1,system2,system3), system4);
}


template<typename System1, typename System2, typename System3, typename System4, typename System5>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::lazy_disable_if<
    select_system5_exists<System1,System2,System3,System4,System5>::value,
    thrust::detail::minimum_system<System1,System2,System3,System4,System5>
  >::type
    &select_system(thrust::execution_policy<System1> &system1,
                   thrust::execution_policy<System2> &system2,
                   thrust::execution_policy<System3> &system3,
                   thrust::execution_policy<System4> &system4,
                   thrust::execution_policy<System5> &system5)
{
  return select_system(select_system(system1,system2,system3,system4), system5);
}


template<typename System1, typename System2, typename System3, typename System4, typename System5, typename System6>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::lazy_disable_if<
    select_system6_exists<System1,System2,System3,System4,System5,System6>::value,
    thrust::detail::minimum_system<System1,System2,System3,System4,System5,System6>
  >::type
    &select_system(thrust::execution_policy<System1> &system1,
                   thrust::execution_policy<System2> &system2,
                   thrust::execution_policy<System3> &system3,
                   thrust::execution_policy<System4> &system4,
                   thrust::execution_policy<System5> &system5,
                   thrust::execution_policy<System6> &system6)
{
  return select_system(select_system(system1,system2,system3,system4,system5), system6);
}



inline __attribute__((host)) __attribute__((device))
thrust::device_system_tag select_system(thrust::any_system_tag)
{
  return thrust::device_system_tag();
}


}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/scan.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/tag.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/tag.h"
       



namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{



struct tag
{
  template<typename T>
  __attribute__((host)) __attribute__((device)) inline
  tag(const T &) {}
};

}
}
}
}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.h" 2

namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result);



template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                BinaryFunction binary_op);


template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result);


template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init);



template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init,
                                BinaryFunction binary_op);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.inl" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.inl"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/static_assert.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/static_assert.h"
       
# 43 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/static_assert.h"
namespace thrust
{

namespace detail
{


template <bool x> struct STATIC_ASSERTION_FAILURE;

template <> struct STATIC_ASSERTION_FAILURE<true> { enum { value = 1 }; };


template<int x> struct static_assert_test{};

template<typename, bool x>
  struct depend_on_instantiation
{
  static const bool value = x;
};

}

}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.inl" 2




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/iterator/is_output_iterator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/iterator/is_output_iterator.h"
       





# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/any_assign.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/any_assign.h"
       



namespace thrust
{
namespace detail
{



struct any_assign
{
  inline __attribute__((host)) __attribute__((device)) any_assign(void)
  {}

  template<typename T>
  inline __attribute__((host)) __attribute__((device)) any_assign(T)
  {}

  template<typename T>
  inline __attribute__((host)) __attribute__((device))
  any_assign &operator=(T)
  {
    if(0)
    {

      int *x = 0;
      *x = 13;
    }

    return *this;
  }
};


}
}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/iterator/is_output_iterator.h" 2

namespace thrust
{

namespace detail
{


template<typename T>
  struct is_void_like
    : thrust::detail::or_<
        thrust::detail::is_void<T>,
        thrust::detail::is_same<T,thrust::detail::any_assign>
      >
{};


template<typename T>
  struct lazy_is_void_like
    : is_void_like<typename T::type>
{};
# 53 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/iterator/is_output_iterator.h"
template<typename T>
  struct is_output_iterator
    : eval_if<
        is_metafunction_defined<thrust::iterator_value<T> >::value,
        lazy_is_void_like<thrust::iterator_value<T> >,
        thrust::detail::true_type
      >::type
{
};

}

}
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
       


# 1 "/usr/include/c++/4.8/functional" 1 3
# 46 "/usr/include/c++/4.8/functional" 3
       
# 47 "/usr/include/c++/4.8/functional" 3
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/placeholder.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/placeholder.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.h" 1
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h" 1
# 31 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple.inl" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap.h"
       



namespace thrust
{

 #pragma hd_warning_disable
template<typename Assignable1, typename Assignable2>
__attribute__((host)) __attribute__((device))
inline void swap(Assignable1 &a, Assignable2 &b)
{
  Assignable1 temp = a;
  a = b;
  b = temp;
}

}
# 19 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple.inl" 2

namespace thrust
{


struct null_type {};


__attribute__((host)) __attribute__((device)) inline
bool operator==(const null_type&, const null_type&) { return true; }

__attribute__((host)) __attribute__((device)) inline
bool operator>=(const null_type&, const null_type&) { return true; }

__attribute__((host)) __attribute__((device)) inline
bool operator<=(const null_type&, const null_type&) { return true; }

__attribute__((host)) __attribute__((device)) inline
bool operator!=(const null_type&, const null_type&) { return false; }

__attribute__((host)) __attribute__((device)) inline
bool operator<(const null_type&, const null_type&) { return false; }

__attribute__((host)) __attribute__((device)) inline
bool operator>(const null_type&, const null_type&) { return false; }


template <
  class T0 = null_type, class T1 = null_type, class T2 = null_type,
  class T3 = null_type, class T4 = null_type, class T5 = null_type,
  class T6 = null_type, class T7 = null_type, class T8 = null_type,
  class T9 = null_type>
class tuple;


template<int i, typename T> struct tuple_element;


template<class T>
  struct tuple_element<0,T>
{
  typedef typename T::head_type type;
};

template<int N, class T>
  struct tuple_element<N, const T>
{
  private:
    typedef typename T::tail_type Next;
    typedef typename tuple_element<N-1, Next>::type unqualified_type;

  public:
    typedef typename thrust::detail::add_const<unqualified_type>::type type;
};

template<class T>
  struct tuple_element<0,const T>
{
  typedef typename thrust::detail::add_const<typename T::head_type>::type type;
};




template<class T> struct tuple_size;


template<>
  struct tuple_size< tuple<> >
{
  static const int value = 0;
};

template<>
  struct tuple_size<null_type>
{
  static const int value = 0;
};




namespace detail
{

template <class HT, class TT> struct cons;

}



template <class T> struct access_traits
{
  typedef const T& const_type;
  typedef T& non_const_type;

  typedef const typename thrust::detail::remove_cv<T>::type& parameter_type;






};

template <class T> struct access_traits<T&>
{
  typedef T& const_type;
  typedef T& non_const_type;

  typedef T& parameter_type;
};


template<int N, class HT, class TT>
__attribute__((host)) __attribute__((device))
inline typename access_traits<
                  typename tuple_element<N, detail::cons<HT, TT> >::type
                >::non_const_type


get(detail::cons<HT, TT>& c);

template<int N, class HT, class TT>
__attribute__((host)) __attribute__((device))
inline typename access_traits<
                  typename tuple_element<N, detail::cons<HT, TT> >::type
                >::const_type


get(const detail::cons<HT, TT>& c);

namespace detail
{



template<class T>
class generate_error;




template< int N >
struct get_class
{
  template<class RET, class HT, class TT >
  __attribute__((host)) __attribute__((device))
  inline static RET get(const cons<HT, TT>& t)
  {


    return get_class<N-1>::template get<RET>(t.tail);



  }

  template<class RET, class HT, class TT >
  __attribute__((host)) __attribute__((device))
  inline static RET get(cons<HT, TT>& t)
  {


    return get_class<N-1>::template get<RET>(t.tail);



  }
};

template<>
struct get_class<0>
{
  template<class RET, class HT, class TT>
  __attribute__((host)) __attribute__((device))
  inline static RET get(const cons<HT, TT>& t)
  {
    return t.head;
  }

  template<class RET, class HT, class TT>
  __attribute__((host)) __attribute__((device))
  inline static RET get(cons<HT, TT>& t)
  {
    return t.head;
  }
};


template <bool If, class Then, class Else> struct IF
{
  typedef Then RET;
};

template <class Then, class Else> struct IF<false, Then, Else>
{
  typedef Else RET;
};







template <class T> class non_storeable_type
{
  __attribute__((host)) __attribute__((device))
  non_storeable_type();
};

template <class T> struct wrap_non_storeable_type
{





  typedef T type;
};

template <> struct wrap_non_storeable_type<void>
{
  typedef non_storeable_type<void> type;
};


template <class HT, class TT>
  struct cons
{
  typedef HT head_type;
  typedef TT tail_type;

  typedef typename
    wrap_non_storeable_type<head_type>::type stored_head_type;

  stored_head_type head;
  tail_type tail;

  inline __attribute__((host)) __attribute__((device))
  typename access_traits<stored_head_type>::non_const_type
  get_head() { return head; }

  inline __attribute__((host)) __attribute__((device))
  typename access_traits<tail_type>::non_const_type
  get_tail() { return tail; }

  inline __attribute__((host)) __attribute__((device))
  typename access_traits<stored_head_type>::const_type
  get_head() const { return head; }

  inline __attribute__((host)) __attribute__((device))
  typename access_traits<tail_type>::const_type
  get_tail() const { return tail; }

  inline __attribute__((host)) __attribute__((device))
  cons(void) : head(), tail() {}







  inline __attribute__((host)) __attribute__((device))
  cons(typename access_traits<stored_head_type>::parameter_type h,
       const tail_type& t)
    : head (h), tail(t) {}

  template <class T1, class T2, class T3, class T4, class T5,
            class T6, class T7, class T8, class T9, class T10>
  inline __attribute__((host)) __attribute__((device))
  cons( T1& t1, T2& t2, T3& t3, T4& t4, T5& t5,
        T6& t6, T7& t7, T8& t8, T9& t9, T10& t10 )
    : head (t1),
      tail (t2, t3, t4, t5, t6, t7, t8, t9, t10, static_cast<const null_type&>(null_type()))
      {}

  template <class T2, class T3, class T4, class T5,
            class T6, class T7, class T8, class T9, class T10>
  inline __attribute__((host)) __attribute__((device))
  cons( const null_type& , T2& t2, T3& t3, T4& t4, T5& t5,
        T6& t6, T7& t7, T8& t8, T9& t9, T10& t10 )
    : head (),
      tail (t2, t3, t4, t5, t6, t7, t8, t9, t10, static_cast<const null_type&>(null_type()))
      {}


  template <class HT2, class TT2>
  inline __attribute__((host)) __attribute__((device))
  cons( const cons<HT2, TT2>& u ) : head(u.head), tail(u.tail) {}

  template <class HT2, class TT2>
  inline __attribute__((host)) __attribute__((device))
  cons& operator=( const cons<HT2, TT2>& u ) {
    head=u.head; tail=u.tail; return *this;
  }



  inline __attribute__((host)) __attribute__((device))
  cons& operator=(const cons& u) {
    head = u.head; tail = u.tail; return *this;
  }
# 334 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple.inl"
  template <int N>
  __attribute__((host)) __attribute__((device))
  typename access_traits<
             typename tuple_element<N, cons<HT, TT> >::type
           >::non_const_type
  get() {
    return thrust::get<N>(*this);
  }

  template <int N>
  __attribute__((host)) __attribute__((device))
  typename access_traits<
             typename tuple_element<N, cons<HT, TT> >::type
           >::const_type
  get() const {
    return thrust::get<N>(*this);
  }

  inline __attribute__((host)) __attribute__((device))
  void swap(cons &c)
  {
    using thrust::swap;

    swap(head, c.head);
    tail.swap(c.tail);
  }
};

template <class HT>
  struct cons<HT, null_type>
{
  typedef HT head_type;
  typedef null_type tail_type;
  typedef cons<HT, null_type> self_type;

  typedef typename
    wrap_non_storeable_type<head_type>::type stored_head_type;
  stored_head_type head;

  typename access_traits<stored_head_type>::non_const_type
  inline __attribute__((host)) __attribute__((device))
  get_head() { return head; }

  inline __attribute__((host)) __attribute__((device))
  null_type get_tail() { return null_type(); }

  inline __attribute__((host)) __attribute__((device))
  typename access_traits<stored_head_type>::const_type
  get_head() const { return head; }

  inline __attribute__((host)) __attribute__((device))
  null_type get_tail() const { return null_type(); }

  inline __attribute__((host)) __attribute__((device))
  cons() : head() {}

  inline __attribute__((host)) __attribute__((device))
  cons(typename access_traits<stored_head_type>::parameter_type h,
       const null_type& = null_type())
    : head (h) {}

  template<class T1>
  inline __attribute__((host)) __attribute__((device))
  cons(T1& t1, const null_type&, const null_type&, const null_type&,
       const null_type&, const null_type&, const null_type&,
       const null_type&, const null_type&, const null_type&)
  : head (t1) {}

  inline __attribute__((host)) __attribute__((device))
  cons(const null_type&,
       const null_type&, const null_type&, const null_type&,
       const null_type&, const null_type&, const null_type&,
       const null_type&, const null_type&, const null_type&)
  : head () {}

  template <class HT2>
  inline __attribute__((host)) __attribute__((device))
  cons( const cons<HT2, null_type>& u ) : head(u.head) {}

  template <class HT2>
  inline __attribute__((host)) __attribute__((device))
  cons& operator=(const cons<HT2, null_type>& u )
  {
    head = u.head;
    return *this;
  }



  inline __attribute__((host)) __attribute__((device))
  cons& operator=(const cons& u) { head = u.head; return *this; }

  template <int N>
  inline __attribute__((host)) __attribute__((device))
  typename access_traits<
             typename tuple_element<N, self_type>::type
            >::non_const_type


  get(void)
  {
    return thrust::get<N>(*this);
  }

  template <int N>
  inline __attribute__((host)) __attribute__((device))
  typename access_traits<
             typename tuple_element<N, self_type>::type
           >::const_type


  get(void) const
  {
    return thrust::get<N>(*this);
  }

  inline __attribute__((host)) __attribute__((device))
  void swap(cons &c)
  {
    using thrust::swap;

    swap(head, c.head);
  }
};

template <class T0, class T1, class T2, class T3, class T4,
          class T5, class T6, class T7, class T8, class T9>
  struct map_tuple_to_cons
{
  typedef cons<T0,
               typename map_tuple_to_cons<T1, T2, T3, T4, T5,
                                          T6, T7, T8, T9, null_type>::type
              > type;
};


template <>
  struct map_tuple_to_cons<null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type>
{
  typedef null_type type;
};
# 492 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple.inl"
template<class T>
struct make_tuple_traits {
  typedef T type;







};
# 516 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple.inl"
template<class T>
struct make_tuple_traits<T&> {
  typedef typename
     detail::generate_error<T&>::
       do_not_use_with_reference_type error;
};





template<class T, int n> struct make_tuple_traits <T[n]> {
  typedef const T (&type)[n];
};

template<class T, int n>
struct make_tuple_traits<const T[n]> {
  typedef const T (&type)[n];
};

template<class T, int n> struct make_tuple_traits<volatile T[n]> {
  typedef const volatile T (&type)[n];
};

template<class T, int n>
struct make_tuple_traits<const volatile T[n]> {
  typedef const volatile T (&type)[n];
};
# 559 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple.inl"
template <
  class T0 = null_type, class T1 = null_type, class T2 = null_type,
  class T3 = null_type, class T4 = null_type, class T5 = null_type,
  class T6 = null_type, class T7 = null_type, class T8 = null_type,
  class T9 = null_type
>
struct make_tuple_mapper {
  typedef
    tuple<typename make_tuple_traits<T0>::type,
          typename make_tuple_traits<T1>::type,
          typename make_tuple_traits<T2>::type,
          typename make_tuple_traits<T3>::type,
          typename make_tuple_traits<T4>::type,
          typename make_tuple_traits<T5>::type,
          typename make_tuple_traits<T6>::type,
          typename make_tuple_traits<T7>::type,
          typename make_tuple_traits<T8>::type,
          typename make_tuple_traits<T9>::type> type;
};

}


template<int N, class HT, class TT>
__attribute__((host)) __attribute__((device))
inline typename access_traits<
                  typename tuple_element<N, detail::cons<HT, TT> >::type
                >::non_const_type
get(detail::cons<HT, TT>& c)
{





  return detail::get_class<N>::template
         get<
           typename access_traits<
             typename tuple_element<N, detail::cons<HT, TT> >::type
           >::non_const_type,
           HT,TT
         >(c);
}





template<int N, class HT, class TT>
__attribute__((host)) __attribute__((device))
inline typename access_traits<
                  typename tuple_element<N, detail::cons<HT, TT> >::type
                >::const_type
get(const detail::cons<HT, TT>& c)
{





  return detail::get_class<N>::template
         get<
           typename access_traits<
             typename tuple_element<N, detail::cons<HT, TT> >::type
           >::const_type,
           HT,TT
         >(c);
}


template<class T0>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0>::type
    make_tuple(const T0& t0)
{
  typedef typename detail::make_tuple_mapper<T0>::type t;
  return t(t0);
}

template<class T0, class T1>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1>::type
    make_tuple(const T0& t0, const T1& t1)
{
  typedef typename detail::make_tuple_mapper<T0,T1>::type t;
  return t(t0,t1);
}

template<class T0, class T1, class T2>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2)
{
  typedef typename detail::make_tuple_mapper<T0,T1,T2>::type t;
  return t(t0,t1,t2);
}

template<class T0, class T1, class T2, class T3>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3)
{
  typedef typename detail::make_tuple_mapper<T0,T1,T2,T3>::type t;
  return t(t0,t1,t2,t3);
}

template<class T0, class T1, class T2, class T3, class T4>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4)
{
  typedef typename detail::make_tuple_mapper<T0,T1,T2,T3,T4>::type t;
  return t(t0,t1,t2,t3,t4);
}

template<class T0, class T1, class T2, class T3, class T4, class T5>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5)
{
  typedef typename detail::make_tuple_mapper<T0,T1,T2,T3,T4,T5>::type t;
  return t(t0,t1,t2,t3,t4,t5);
}

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6)
{
  typedef typename detail::make_tuple_mapper<T0,T1,T2,T3,T4,T5,T6>::type t;
  return t(t0,t1,t2,t3,t4,t5,t6);
}

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6, T7>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7)
{
  typedef typename detail::make_tuple_mapper<T0,T1,T2,T3,T4,T5,T6,T7>::type t;
  return t(t0,t1,t2,t3,t4,t5,t6,t7);
}

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6, T7, T8>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7, const T8& t8)
{
  typedef typename detail::make_tuple_mapper<T0,T1,T2,T3,T4,T5,T6,T7,T8>::type t;
  return t(t0,t1,t2,t3,t4,t5,t6,t7,t8);
}

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7, const T8& t8, const T9& t9)
{
  typedef typename detail::make_tuple_mapper<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>::type t;
  return t(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9);
}


template<typename T0>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&> tie(T0 &t0)
{
  return tuple<T0&>(t0);
}

template<typename T0,typename T1>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&> tie(T0 &t0, T1 &t1)
{
  return tuple<T0&,T1&>(t0,t1);
}

template<typename T0,typename T1, typename T2>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&> tie(T0 &t0, T1 &t1, T2 &t2)
{
  return tuple<T0&,T1&,T2&>(t0,t1,t2);
}

template<typename T0,typename T1, typename T2, typename T3>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3)
{
  return tuple<T0&,T1&,T2&,T3&>(t0,t1,t2,t3);
}

template<typename T0,typename T1, typename T2, typename T3, typename T4>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4)
{
  return tuple<T0&,T1&,T2&,T3&,T4&>(t0,t1,t2,t3,t4);
}

template<typename T0,typename T1, typename T2, typename T3, typename T4, typename T5>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5)
{
  return tuple<T0&,T1&,T2&,T3&,T4&,T5&>(t0,t1,t2,t3,t4,t5);
}

template<typename T0,typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6)
{
  return tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&>(t0,t1,t2,t3,t4,t5,t6);
}

template<typename T0,typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7)
{
  return tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&>(t0,t1,t2,t3,t4,t5,t6,t7);
}

template<typename T0,typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7, T8 &t8)
{
  return tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&>(t0,t1,t2,t3,t4,t5,t6,t7,t8);
}

template<typename T0,typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&,T9&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7, T8 &t8, T9 &t9)
{
  return tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&,T9&>(t0,t1,t2,t3,t4,t5,t6,t7,t8,t9);
}

template<
  typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9,
  typename U0, typename U1, typename U2, typename U3, typename U4, typename U5, typename U6, typename U7, typename U8, typename U9
>
__attribute__((host)) __attribute__((device)) inline
void swap(thrust::tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> &x,
          thrust::tuple<U0,U1,U2,U3,U4,U5,U6,U7,U8,U9> &y)
{
  return x.swap(y);
}



namespace detail
{

template<class T1, class T2>
__attribute__((host)) __attribute__((device))
inline bool eq(const T1& lhs, const T2& rhs) {
  return lhs.get_head() == rhs.get_head() &&
         eq(lhs.get_tail(), rhs.get_tail());
}
template<>
inline bool eq<null_type,null_type>(const null_type&, const null_type&) { return true; }

template<class T1, class T2>
__attribute__((host)) __attribute__((device))
inline bool neq(const T1& lhs, const T2& rhs) {
  return lhs.get_head() != rhs.get_head() ||
         neq(lhs.get_tail(), rhs.get_tail());
}
template<>
__attribute__((host)) __attribute__((device))
inline bool neq<null_type,null_type>(const null_type&, const null_type&) { return false; }

template<class T1, class T2>
__attribute__((host)) __attribute__((device))
inline bool lt(const T1& lhs, const T2& rhs) {
  return (lhs.get_head() < rhs.get_head()) ||
            (!(rhs.get_head() < lhs.get_head()) &&
             lt(lhs.get_tail(), rhs.get_tail()));
}
template<>
__attribute__((host)) __attribute__((device))
inline bool lt<null_type,null_type>(const null_type&, const null_type&) { return false; }

template<class T1, class T2>
__attribute__((host)) __attribute__((device))
inline bool gt(const T1& lhs, const T2& rhs) {
  return (lhs.get_head() > rhs.get_head()) ||
            (!(rhs.get_head() > lhs.get_head()) &&
             gt(lhs.get_tail(), rhs.get_tail()));
}
template<>
__attribute__((host)) __attribute__((device))
inline bool gt<null_type,null_type>(const null_type&, const null_type&) { return false; }

template<class T1, class T2>
__attribute__((host)) __attribute__((device))
inline bool lte(const T1& lhs, const T2& rhs) {
  return lhs.get_head() <= rhs.get_head() &&
          ( !(rhs.get_head() <= lhs.get_head()) ||
            lte(lhs.get_tail(), rhs.get_tail()));
}
template<>
__attribute__((host)) __attribute__((device))
inline bool lte<null_type,null_type>(const null_type&, const null_type&) { return true; }

template<class T1, class T2>
__attribute__((host)) __attribute__((device))
inline bool gte(const T1& lhs, const T2& rhs) {
  return lhs.get_head() >= rhs.get_head() &&
          ( !(rhs.get_head() >= lhs.get_head()) ||
            gte(lhs.get_tail(), rhs.get_tail()));
}
template<>
__attribute__((host)) __attribute__((device))
inline bool gte<null_type,null_type>(const null_type&, const null_type&) { return true; }

}





template<class T1, class T2, class S1, class S2>
__attribute__((host)) __attribute__((device))
inline bool operator==(const detail::cons<T1, T2>& lhs, const detail::cons<S1, S2>& rhs)
{




  return detail::eq(lhs, rhs);
}



template<class T1, class T2, class S1, class S2>
__attribute__((host)) __attribute__((device))
inline bool operator!=(const detail::cons<T1, T2>& lhs, const detail::cons<S1, S2>& rhs)
{




  return detail::neq(lhs, rhs);
}


template<class T1, class T2, class S1, class S2>
__attribute__((host)) __attribute__((device))
inline bool operator<(const detail::cons<T1, T2>& lhs, const detail::cons<S1, S2>& rhs)
{




  return detail::lt(lhs, rhs);
}


template<class T1, class T2, class S1, class S2>
__attribute__((host)) __attribute__((device))
inline bool operator>(const detail::cons<T1, T2>& lhs, const detail::cons<S1, S2>& rhs)
{




  return detail::gt(lhs, rhs);
}


template<class T1, class T2, class S1, class S2>
__attribute__((host)) __attribute__((device))
inline bool operator<=(const detail::cons<T1, T2>& lhs, const detail::cons<S1, S2>& rhs)
{




  return detail::lte(lhs, rhs);
}


template<class T1, class T2, class S1, class S2>
__attribute__((host)) __attribute__((device))
inline bool operator>=(const detail::cons<T1, T2>& lhs, const detail::cons<S1, S2>& rhs)
{




  return detail::gte(lhs, rhs);
}

}
# 35 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
       




namespace thrust
{
# 48 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template <typename T1, typename T2>
  struct pair
{


  typedef T1 first_type;



  typedef T2 second_type;



  first_type first;



  second_type second;





  __attribute__((host)) __attribute__((device)) pair(void);






  inline __attribute__((host)) __attribute__((device))
  pair(const T1 &x, const T2 &y);
# 90 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
  template <typename U1, typename U2>
  inline __attribute__((host)) __attribute__((device))
  pair(const pair<U1,U2> &p);
# 103 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
  template <typename U1, typename U2>
  inline __attribute__((host)) __attribute__((device))
  pair(const std::pair<U1,U2> &p);





  inline __attribute__((host)) __attribute__((device))
  void swap(pair &p);
};
# 125 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator==(const pair<T1,T2> &x, const pair<T1,T2> &y);
# 139 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator<(const pair<T1,T2> &x, const pair<T1,T2> &y);
# 153 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator!=(const pair<T1,T2> &x, const pair<T1,T2> &y);
# 167 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator>(const pair<T1,T2> &x, const pair<T1,T2> &y);
# 181 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator<=(const pair<T1,T2> &x, const pair<T1,T2> &y);
# 195 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator>=(const pair<T1,T2> &x, const pair<T1,T2> &y);







template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    void swap(pair<T1,T2> &x, pair<T1,T2> &y);
# 219 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    pair<T1,T2> make_pair(T1 x, T2 y);
# 231 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template<int N, typename T> struct tuple_element;
# 240 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
template<typename Pair> struct tuple_size;
# 280 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h"
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pair.inl" 1
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pair.inl"
namespace thrust
{

template <typename T1, typename T2>
  pair<T1,T2>
    ::pair(void)
      :first(),second()
{
  ;
}


template <typename T1, typename T2>
  pair<T1,T2>
    ::pair(const T1 &x, const T2 &y)
      :first(x),second(y)
{
  ;
}


template <typename T1, typename T2>
  template <typename U1, typename U2>
    pair<T1,T2>
      ::pair(const pair<U1,U2> &p)
        :first(p.first),second(p.second)
{
  ;
}


template <typename T1, typename T2>
  template <typename U1, typename U2>
    pair<T1,T2>
      ::pair(const std::pair<U1,U2> &p)
        :first(p.first),second(p.second)
{
  ;
}


template<typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    void pair<T1,T2>
      ::swap(thrust::pair<T1,T2> &p)
{
  using thrust::swap;

  swap(first, p.first);
  swap(second, p.second);
}


template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator==(const pair<T1,T2> &x, const pair<T1,T2> &y)
{
  return x.first == y.first && x.second == y.second;
}


template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator<(const pair<T1,T2> &x, const pair<T1,T2> &y)
{
  return x.first < y.first || (!(y.first < x.first) && x.second < y.second);
}


template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator!=(const pair<T1,T2> &x, const pair<T1,T2> &y)
{
  return !(x == y);
}


template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator>(const pair<T1,T2> &x, const pair<T1,T2> &y)
{
  return y < x;
}


template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator<=(const pair<T1,T2> &x, const pair<T1,T2> &y)
{
  return !(y < x);
}


template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    bool operator>=(const pair<T1,T2> &x, const pair<T1,T2> &y)
{
  return !(x < y);
}


template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    void swap(pair<T1,T2> &x, pair<T1,T2> &y)
{
  return x.swap(y);
}


template <typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    pair<T1,T2> make_pair(T1 x, T2 y)
{
  return pair<T1,T2>(x,y);
}



template<typename T1, typename T2>
  struct tuple_element<0, pair<T1,T2> >
{
  typedef T1 type;
};

template<typename T1, typename T2>
  struct tuple_element<1, pair<T1,T2> >
{
  typedef T2 type;
};



template<typename T1, typename T2>
  struct tuple_size< pair<T1,T2 > >
{
  static const unsigned int value = 2;
};



namespace detail
{


template<int N, typename Pair> struct pair_get {};

template<typename Pair>
  struct pair_get<0, Pair>
{
  inline __attribute__((host)) __attribute__((device))
    const typename tuple_element<0, Pair>::type &
      operator()(const Pair &p) const
  {
    return p.first;
  }

  inline __attribute__((host)) __attribute__((device))
    typename tuple_element<0, Pair>::type &
      operator()(Pair &p) const
  {
    return p.first;
  }
};


template<typename Pair>
  struct pair_get<1, Pair>
{
  inline __attribute__((host)) __attribute__((device))
    const typename tuple_element<1, Pair>::type &
      operator()(const Pair &p) const
  {
    return p.second;
  }

  inline __attribute__((host)) __attribute__((device))
    typename tuple_element<1, Pair>::type &
      operator()(Pair &p) const
  {
    return p.second;
  }
};

}



template<unsigned int N, typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    typename tuple_element<N, pair<T1,T2> >::type &
      get(pair<T1,T2> &p)
{
  return detail::pair_get<N, pair<T1,T2> >()(p);
}

template<unsigned int N, typename T1, typename T2>
  inline __attribute__((host)) __attribute__((device))
    const typename tuple_element<N, pair<T1,T2> >::type &
      get(const pair<T1,T2> &p)
{
  return detail::pair_get<N, pair<T1,T2> >()(p);
}


}
# 283 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/pair.h" 2
# 36 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h" 2

namespace thrust
{
# 51 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
struct null_type;
# 65 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
template<int N, class T>
  struct tuple_element
{
  private:
    typedef typename T::tail_type Next;

  public:


    typedef typename tuple_element<N-1, Next>::type type;
};
# 85 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
template<class T>
  struct tuple_size
{


  static const int value = 1 + tuple_size<typename T::tail_type>::value;
};
# 118 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
template<int N, class HT, class TT>
__attribute__((host)) __attribute__((device))
inline typename access_traits<
                  typename tuple_element<N, detail::cons<HT, TT> >::type
                >::non_const_type
get(detail::cons<HT, TT>& t);
# 149 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
template<int N, class HT, class TT>
__attribute__((host)) __attribute__((device))
inline typename access_traits<
                  typename tuple_element<N, detail::cons<HT, TT> >::type
                >::const_type
get(const detail::cons<HT, TT>& t);
# 195 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
template <class T0, class T1, class T2, class T3, class T4,
          class T5, class T6, class T7, class T8, class T9>
  class tuple :
    public detail::map_tuple_to_cons<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>::type
{



  private:
  typedef typename detail::map_tuple_to_cons<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>::type inherited;




  public:


  inline __attribute__((host)) __attribute__((device))
  tuple(void) {}





  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0)
    : inherited(t0,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type())) {}







  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1)
    : inherited(t0, t1,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type())) {}




  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1,
        typename access_traits<T2>::parameter_type t2)
    : inherited(t0, t1, t2,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type())) {}

  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1,
        typename access_traits<T2>::parameter_type t2,
        typename access_traits<T3>::parameter_type t3)
    : inherited(t0, t1, t2, t3,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type())) {}

  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1,
        typename access_traits<T2>::parameter_type t2,
        typename access_traits<T3>::parameter_type t3,
        typename access_traits<T4>::parameter_type t4)
    : inherited(t0, t1, t2, t3, t4,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type())) {}

  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1,
        typename access_traits<T2>::parameter_type t2,
        typename access_traits<T3>::parameter_type t3,
        typename access_traits<T4>::parameter_type t4,
        typename access_traits<T5>::parameter_type t5)
    : inherited(t0, t1, t2, t3, t4, t5,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type())) {}

  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1,
        typename access_traits<T2>::parameter_type t2,
        typename access_traits<T3>::parameter_type t3,
        typename access_traits<T4>::parameter_type t4,
        typename access_traits<T5>::parameter_type t5,
        typename access_traits<T6>::parameter_type t6)
    : inherited(t0, t1, t2, t3, t4, t5, t6,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type())) {}

  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1,
        typename access_traits<T2>::parameter_type t2,
        typename access_traits<T3>::parameter_type t3,
        typename access_traits<T4>::parameter_type t4,
        typename access_traits<T5>::parameter_type t5,
        typename access_traits<T6>::parameter_type t6,
        typename access_traits<T7>::parameter_type t7)
    : inherited(t0, t1, t2, t3, t4, t5, t6, t7,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type())) {}

  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1,
        typename access_traits<T2>::parameter_type t2,
        typename access_traits<T3>::parameter_type t3,
        typename access_traits<T4>::parameter_type t4,
        typename access_traits<T5>::parameter_type t5,
        typename access_traits<T6>::parameter_type t6,
        typename access_traits<T7>::parameter_type t7,
        typename access_traits<T8>::parameter_type t8)
    : inherited(t0, t1, t2, t3, t4, t5, t6, t7, t8,
                static_cast<const null_type&>(null_type())) {}

  inline __attribute__((host)) __attribute__((device))
  tuple(typename access_traits<T0>::parameter_type t0,
        typename access_traits<T1>::parameter_type t1,
        typename access_traits<T2>::parameter_type t2,
        typename access_traits<T3>::parameter_type t3,
        typename access_traits<T4>::parameter_type t4,
        typename access_traits<T5>::parameter_type t5,
        typename access_traits<T6>::parameter_type t6,
        typename access_traits<T7>::parameter_type t7,
        typename access_traits<T8>::parameter_type t8,
        typename access_traits<T9>::parameter_type t9)
    : inherited(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {}


  template<class U1, class U2>
  inline __attribute__((host)) __attribute__((device))
  tuple(const detail::cons<U1, U2>& p) : inherited(p) {}

  template <class U1, class U2>
  inline __attribute__((host)) __attribute__((device))
  tuple& operator=(const detail::cons<U1, U2>& k)
  {
    inherited::operator=(k);
    return *this;
  }







  template <class U1, class U2>
  __attribute__((host)) __attribute__((device)) inline
  tuple& operator=(const thrust::pair<U1, U2>& k) {

    this->head = k.first;
    this->tail.head = k.second;
    return *this;
  }





  inline __attribute__((host)) __attribute__((device))
  void swap(tuple &t)
  {
    inherited::swap(t);
  }
};




template <>
class tuple<null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type, null_type> :
  public null_type
{
public:
  typedef null_type inherited;
};
# 418 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
template<class T0>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0>::type
    make_tuple(const T0& t0);
# 434 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
template<class T0, class T1>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1>::type
    make_tuple(const T0& t0, const T1& t1);







template<typename T0>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&> tie(T0& t0);
# 460 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
template<typename T0, typename T1>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&> tie(T0& t0, T1& t1);






template<
  typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9,
  typename U0, typename U1, typename U2, typename U3, typename U4, typename U5, typename U6, typename U7, typename U8, typename U9
>
inline __attribute__((host)) __attribute__((device))
void swap(tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> &x,
          tuple<U0,U1,U2,U3,U4,U5,U6,U7,U8,U9> &y);






template<class T0, class T1, class T2>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2);

template<class T0, class T1, class T2, class T3>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3);

template<class T0, class T1, class T2, class T3, class T4>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4);

template<class T0, class T1, class T2, class T3, class T4, class T5>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5);

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6);

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6, T7>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7);

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6, T7, T8>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7, const T8& t8);

template<class T0, class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
__attribute__((host)) __attribute__((device)) inline
  typename detail::make_tuple_mapper<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9>::type
    make_tuple(const T0& t0, const T1& t1, const T2& t2, const T3& t3, const T4& t4, const T5& t5, const T6& t6, const T7& t7, const T8& t8, const T9& t9);

template<typename T0, typename T1, typename T2>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&> tie(T0 &t0, T1 &t1, T2 &t2);

template<typename T0, typename T1, typename T2, typename T3>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3);

template<typename T0, typename T1, typename T2, typename T3, typename T4>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4);

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5);

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6);

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7);

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7, T8 &t8);

template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
__attribute__((host)) __attribute__((device)) inline
tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&,T9&> tie(T0 &t0, T1 &t1, T2 &t2, T3 &t3, T4 &t4, T5 &t5, T6 &t6, T7 &t7, T8 &t8, T9 &t9);


__attribute__((host)) __attribute__((device)) inline
bool operator==(const null_type&, const null_type&);

__attribute__((host)) __attribute__((device)) inline
bool operator>=(const null_type&, const null_type&);

__attribute__((host)) __attribute__((device)) inline
bool operator<=(const null_type&, const null_type&);

__attribute__((host)) __attribute__((device)) inline
bool operator!=(const null_type&, const null_type&);

__attribute__((host)) __attribute__((device)) inline
bool operator<(const null_type&, const null_type&);

__attribute__((host)) __attribute__((device)) inline
bool operator>(const null_type&, const null_type&);
# 582 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/tuple.h"
}
# 30 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/value.h" 1
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/value.h"
       




namespace thrust
{
namespace detail
{
namespace functional
{


template<typename Eval> struct actor;


template<typename T>
  class value
{
  public:

    template<typename Env>
      struct result
    {
      typedef T type;
    };

    __attribute__((host)) __attribute__((device))
    value(const T &arg)
      : m_val(arg)
    {}

    template<typename Env>
    __attribute__((host)) __attribute__((device))
      T eval(const Env &) const
    {
      return m_val;
    }

  private:
    T m_val;
};

template<typename T>
__attribute__((host)) __attribute__((device))
actor<value<T> > val(const T &x)
{
  return value<T>(x);
}


}
}
}
# 31 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/composite.h" 1
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/composite.h"
       




namespace thrust
{
namespace detail
{
namespace functional
{


template<typename Eval0,
         typename Eval1 = thrust::null_type,
         typename Eval2 = thrust::null_type,
         typename Eval3 = thrust::null_type,
         typename Eval4 = thrust::null_type,
         typename Eval5 = thrust::null_type,
         typename Eval6 = thrust::null_type,
         typename Eval7 = thrust::null_type,
         typename Eval8 = thrust::null_type,
         typename Eval9 = thrust::null_type,
         typename Eval10 = thrust::null_type>
  class composite;

template<typename Eval0, typename Eval1>
  class composite<
    Eval0,
    Eval1,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type
  >
{
  public:
    template<typename Env>
      struct result
    {
      typedef typename Eval0::template result<
        thrust::tuple<
          typename Eval1::template result<Env>::type
        >
      >::type type;
    };

    __attribute__((host)) __attribute__((device))
    composite(const Eval0 &e0, const Eval1 &e1)
      : m_eval0(e0),
        m_eval1(e1)
    {}

    template<typename Env>
    __attribute__((host)) __attribute__((device))
    typename result<Env>::type
    eval(const Env &x) const
    {
      typename Eval1::template result<Env>::type result1 = m_eval1.eval(x);
      return m_eval0.eval(thrust::tie(result1));
    }

  private:
    Eval0 m_eval0;
    Eval1 m_eval1;
};

template<typename Eval0, typename Eval1, typename Eval2>
  class composite<
    Eval0,
    Eval1,
    Eval2,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type,
    thrust::null_type
  >
{
  public:
    template<typename Env>
      struct result
    {
      typedef typename Eval0::template result<
        thrust::tuple<
          typename Eval1::template result<Env>::type,
          typename Eval2::template result<Env>::type
        >
      >::type type;
    };

    __attribute__((host)) __attribute__((device))
    composite(const Eval0 &e0, const Eval1 &e1, const Eval2 &e2)
      : m_eval0(e0),
        m_eval1(e1),
        m_eval2(e2)
    {}

    template<typename Env>
    __attribute__((host)) __attribute__((device))
    typename result<Env>::type
    eval(const Env &x) const
    {
      typename Eval1::template result<Env>::type result1 = m_eval1.eval(x);
      typename Eval2::template result<Env>::type result2 = m_eval2.eval(x);
      return m_eval0.eval(thrust::tie(result1,result2));
    }

  private:
    Eval0 m_eval0;
    Eval1 m_eval1;
    Eval2 m_eval2;
};

template<typename Eval0, typename Eval1>
__attribute__((host)) __attribute__((device))
  actor<composite<Eval0,Eval1> > compose(const Eval0 &e0, const Eval1 &e1)
{
  return actor<composite<Eval0,Eval1> >(composite<Eval0,Eval1>(e0,e1));
}

template<typename Eval0, typename Eval1, typename Eval2>
__attribute__((host)) __attribute__((device))
  actor<composite<Eval0,Eval1,Eval2> > compose(const Eval0 &e0, const Eval1 &e1, const Eval2 &e2)
{
  return actor<composite<Eval0,Eval1,Eval2> >(composite<Eval0,Eval1,Eval2>(e0,e1,e2));
}

}
}
}
# 32 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/assignment_operator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/assignment_operator.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/operator_adaptors.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/operator_adaptors.h"
       





namespace thrust
{
namespace detail
{
namespace functional
{



template<template<typename> class UnaryOperator>
  struct unary_operator
{
  template<typename Env>
    struct argument
      : thrust::detail::eval_if<
          (thrust::tuple_size<Env>::value == 0),
          thrust::detail::identity_<thrust::null_type>,
          thrust::tuple_element<0,Env>
        >
  {
  };

  template<typename Env>
    struct operator_type
  {
    typedef UnaryOperator<
      typename thrust::detail::remove_reference<
        typename argument<Env>::type
      >::type
    > type;
  };

  template<typename Env>
    struct result
  {
    typedef typename operator_type<Env>::type op_type;
    typedef typename op_type::result_type type;
  };

  template<typename Env>
  __attribute__((host)) __attribute__((device))
  typename result<Env>::type eval(const Env &e) const
  {
    typename operator_type<Env>::type op;
    return op(thrust::get<0>(e));
  }
};



template<template<typename> class BinaryOperator>
  struct binary_operator
{
  template<typename Env>
    struct first_argument
      : thrust::detail::eval_if<
          (thrust::tuple_size<Env>::value == 0),
          thrust::detail::identity_<thrust::null_type>,
          thrust::tuple_element<0,Env>
        >
  {
  };

  template<typename Env>
    struct operator_type
  {
    typedef BinaryOperator<
      typename thrust::detail::remove_reference<
        typename first_argument<Env>::type
      >::type
    > type;
  };

  template<typename Env>
    struct result
  {
    typedef typename operator_type<Env>::type op_type;
    typedef typename op_type::result_type type;
  };

  template<typename Env>
  __attribute__((host)) __attribute__((device))
  typename result<Env>::type eval(const Env &e) const
  {
    typename operator_type<Env>::type op;
    return op(thrust::get<0>(e), thrust::get<1>(e));
  }
};

}
}
}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/assignment_operator.h" 2


namespace thrust
{


template<typename,typename,typename> struct binary_function;

namespace detail
{
namespace functional
{


template<typename> struct as_actor;


template<typename T>
  struct assign
    : thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T &rhs) const { return lhs = rhs; }
};

template<typename Eval, typename T>
  struct assign_result
{
  typedef actor<
    composite<
      binary_operator<assign>,
      actor<Eval>,
      typename as_actor<T>::type
    >
  > type;
};

template<typename Eval, typename T>
  __attribute__((host)) __attribute__((device))
    typename assign_result<Eval,T>::type
      do_assign(const actor<Eval> &_1, const T &_2)
{
  return compose(binary_operator<assign>(),
                 _1,
                 as_actor<T>::convert(_2));
}

}
}
}
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/result_of.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/result_of.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/function_traits.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/function_traits.h"
       




namespace thrust
{


template <typename T> struct plus;
template <typename T> struct multiplies;
template <typename T> struct minimum;
template <typename T> struct maximum;
template <typename T> struct logical_or;
template <typename T> struct logical_and;
template <typename T> struct bit_or;
template <typename T> struct bit_and;
template <typename T> struct bit_xor;

namespace detail
{




template<typename T> struct has_result_type { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::result_type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};

template<typename T> struct has_argument_type { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::argument_type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};

template<typename T> struct has_first_argument_type { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::first_argument_type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};

template<typename T> struct has_second_argument_type { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::second_argument_type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};


template<typename AdaptableBinaryFunction>
  struct result_type
{
  typedef typename AdaptableBinaryFunction::result_type type;
};


template<typename T>
  struct is_adaptable_unary_function
    : thrust::detail::and_<
        has_result_type<T>,
        has_argument_type<T>
      >
{};


template<typename T>
  struct is_adaptable_binary_function
    : thrust::detail::and_<
        has_result_type<T>,
        thrust::detail::and_<
          has_first_argument_type<T>,
          has_second_argument_type<T>
        >
      >
{};


template<typename BinaryFunction>
  struct is_commutative
    : public thrust::detail::false_type
{};

template<typename T> struct is_commutative< typename thrust::plus<T> > : public thrust::detail::is_arithmetic<T> {};
template<typename T> struct is_commutative< typename thrust::multiplies<T> > : public thrust::detail::is_arithmetic<T> {};
template<typename T> struct is_commutative< typename thrust::minimum<T> > : public thrust::detail::is_arithmetic<T> {};
template<typename T> struct is_commutative< typename thrust::maximum<T> > : public thrust::detail::is_arithmetic<T> {};
template<typename T> struct is_commutative< typename thrust::logical_or<T> > : public thrust::detail::is_arithmetic<T> {};
template<typename T> struct is_commutative< typename thrust::logical_and<T> > : public thrust::detail::is_arithmetic<T> {};
template<typename T> struct is_commutative< typename thrust::bit_or<T> > : public thrust::detail::is_arithmetic<T> {};
template<typename T> struct is_commutative< typename thrust::bit_and<T> > : public thrust::detail::is_arithmetic<T> {};
template<typename T> struct is_commutative< typename thrust::bit_xor<T> > : public thrust::detail::is_arithmetic<T> {};

}
}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/result_of.h" 2

namespace thrust
{
namespace detail
{

template<typename Signature, typename Enable = void> struct result_of;


template<typename Functor, typename Arg1>
  struct result_of<
    Functor(Arg1),
    typename thrust::detail::enable_if<thrust::detail::has_result_type<Functor>::value>::type
  >
{
  typedef typename Functor::result_type type;
};


template<typename Functor, typename Arg1, typename Arg2>
  struct result_of<
    Functor(Arg1,Arg2),
    typename thrust::detail::enable_if<thrust::detail::has_result_type<Functor>::value>::type
  >
{
  typedef typename Functor::result_type type;
};

}
}
# 34 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.h" 2

namespace thrust
{
namespace detail
{
namespace functional
{

template<typename Action, typename Env>
  struct apply_actor
{
  typedef typename Action::template result<Env>::type type;
};

template<typename Eval>
  struct actor
    : Eval
{
  typedef Eval eval_type;

  __attribute__((host)) __attribute__((device))
  actor(void);

  __attribute__((host)) __attribute__((device))
  actor(const Eval &base);

  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::null_type >::type
  operator()(void) const;

  template<typename T0>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&> >::type
  operator()(T0 &_0) const;

  template<typename T0, typename T1>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&> >::type
  operator()(T0 &_0, T1 &_1) const;

  template<typename T0, typename T1, typename T2>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&,T2&> >::type
  operator()(T0 &_0, T1 &_1, T2 &_2) const;

  template<typename T0, typename T1, typename T2, typename T3>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&,T2&,T3&> >::type
  operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3) const;

  template<typename T0, typename T1, typename T2, typename T3, typename T4>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&,T2&,T3&,T4&> >::type
  operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4) const;

  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&> >::type
  operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5) const;

  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&> >::type
  operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5, T6 &_6) const;

  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&> >::type
  operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5, T6 &_6, T7 &_7) const;

  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&> >::type
  operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5, T6 &_6, T7 &_7, T8 &_8) const;

  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
  __attribute__((host)) __attribute__((device))
  typename apply_actor<eval_type, thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&,T9&> >::type
  operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5, T6 &_6, T7 &_7, T8 &_8, T9 &_9) const;

  template<typename T>
  __attribute__((host)) __attribute__((device))
  typename assign_result<Eval,T>::type
  operator=(const T &_1) const;
};


template<typename T>
  struct as_actor
{
  typedef value<T> type;

  static inline __attribute__((host)) __attribute__((device)) type convert(const T &x)
  {
    return val(x);
  }
};


template<typename Eval>
  struct as_actor<actor<Eval> >
{
  typedef actor<Eval> type;

  static inline __attribute__((host)) __attribute__((device)) const type &convert(const actor<Eval> &x)
  {
    return x;
  }
};

template<typename T>
  typename as_actor<T>::type
  __attribute__((host)) __attribute__((device))
    make_actor(const T &x)
{
  return as_actor<T>::convert(x);
}

}


template<typename Eval>
  struct result_of<
    thrust::detail::functional::actor<Eval>()
  >
{
  typedef typename thrust::detail::functional::apply_actor<
    thrust::detail::functional::actor<Eval>,
    thrust::null_type
  >::type type;
};

template<typename Eval, typename Arg1>
  struct result_of<
    thrust::detail::functional::actor<Eval>(Arg1)
  >
{
  typedef typename thrust::detail::functional::apply_actor<
    thrust::detail::functional::actor<Eval>,
    thrust::tuple<Arg1>
  >::type type;
};

template<typename Eval, typename Arg1, typename Arg2>
  struct result_of<
    thrust::detail::functional::actor<Eval>(Arg1,Arg2)
  >
{
  typedef typename thrust::detail::functional::apply_actor<
    thrust::detail::functional::actor<Eval>,
    thrust::tuple<Arg1,Arg2>
  >::type type;
};

}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.inl" 1
# 31 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.inl"
namespace thrust
{

namespace detail
{
namespace functional
{

template<typename Eval>
  actor<Eval>
    ::actor(void)
      : eval_type()
{}

template<typename Eval>
  actor<Eval>
    ::actor(const Eval &base)
      : eval_type(base)
{}

template<typename Eval>
  typename apply_actor<
    typename actor<Eval>::eval_type,
    typename thrust::null_type
  >::type
    actor<Eval>
      ::operator()(void) const
{
  return eval_type::eval(thrust::null_type());
}

template<typename Eval>
  template<typename T0>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0) const
{
  return eval_type::eval(thrust::tie(_0));
}

template<typename Eval>
  template<typename T0, typename T1>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1) const
{
  return eval_type::eval(thrust::tie(_0,_1));
}

template<typename Eval>
  template<typename T0, typename T1, typename T2>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&,T2&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1, T2 &_2) const
{
  return eval_type::eval(thrust::tie(_0,_1,_2));
}

template<typename Eval>
  template<typename T0, typename T1, typename T2, typename T3>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&,T2&,T3&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3) const
{
  return eval_type::eval(thrust::tie(_0,_1,_2,_3));
}

template<typename Eval>
  template<typename T0, typename T1, typename T2, typename T3, typename T4>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&,T2&,T3&,T4&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4) const
{
  return eval_type::eval(thrust::tie(_0,_1,_2,_3,_4));
}

template<typename Eval>
  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5) const
{
  return eval_type::eval(thrust::tie(_0,_1,_2,_3,_4,_5));
}

template<typename Eval>
  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5, T6 &_6) const
{
  return eval_type::eval(thrust::tie(_0,_1,_2,_3,_4,_5,_6));
}

template<typename Eval>
  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5, T6 &_6, T7 &_7) const
{
  return eval_type::eval(thrust::tie(_0,_1,_2,_3,_4,_5,_6,_7));
}

template<typename Eval>
  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5, T6 &_6, T7 &_7, T8 &_8) const
{
  return eval_type::eval(thrust::tie(_0,_1,_2,_3,_4,_5,_6,_7,_8));
}

template<typename Eval>
  template<typename T0, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
    typename apply_actor<
      typename actor<Eval>::eval_type,
      typename thrust::tuple<T0&,T1&,T2&,T3&,T4&,T5&,T6&,T7&,T8&,T9&>
    >::type
      actor<Eval>
        ::operator()(T0 &_0, T1 &_1, T2 &_2, T3 &_3, T4 &_4, T5 &_5, T6 &_6, T7 &_7, T8 &_8, T9 &_9) const
{
  return eval_type::eval(thrust::tie(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9));
}

template<typename Eval>
  template<typename T>
    typename assign_result<Eval,T>::type
      actor<Eval>
        ::operator=(const T& _1) const
{
  return do_assign(*this,_1);
}

}
}
}
# 192 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/actor.h" 2
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/placeholder.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/argument.h" 1
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/argument.h"
       




namespace thrust
{
namespace detail
{
namespace functional
{

template<unsigned int i, typename Env>
  struct argument_helper
{
  typedef typename thrust::tuple_element<i,Env>::type type;
};

template<unsigned int i>
  struct argument_helper<i,thrust::null_type>
{
  typedef thrust::null_type type;
};


template<unsigned int i>
  class argument
{
  public:
    template<typename Env>
      struct result
        : argument_helper<i,Env>
    {
    };

    __attribute__((host)) __attribute__((device))
    argument(void){}

    template<typename Env>
    __attribute__((host)) __attribute__((device))
    typename result<Env>::type eval(const Env &e) const
    {
      return thrust::get<i>(e);
    }
};

}
}
}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/placeholder.h" 2

namespace thrust
{
namespace detail
{
namespace functional
{

template<unsigned int i>
  struct placeholder
{
  typedef actor<argument<i> > type;
};

}
}
}
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h" 2

namespace thrust
{




template<typename Operation> struct unary_traits;

template<typename Operation> struct binary_traits;
# 68 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename Argument,
         typename Result>
struct unary_function
{



  typedef Argument argument_type;




  typedef Result result_type;
};
# 108 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename Argument1,
         typename Argument2,
         typename Result>
struct binary_function
{



  typedef Argument1 first_argument_type;




  typedef Argument2 second_argument_type;




  typedef Result result_type;
};
# 175 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct plus
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs + rhs;}
};
# 231 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct minus
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs - rhs;}
};
# 287 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct multiplies
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs * rhs;}
};
# 343 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct divides
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs / rhs;}
};
# 399 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct modulus
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs % rhs;}
};
# 452 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct negate
{



  typedef T argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &x) const {return -x;}
};
# 489 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct equal_to
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &lhs, const T &rhs) const {return lhs == rhs;}
};
# 523 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct not_equal_to
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &lhs, const T &rhs) const {return lhs != rhs;}
};
# 557 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct greater
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &lhs, const T &rhs) const {return lhs > rhs;}
};
# 591 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct less
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &lhs, const T &rhs) const {return lhs < rhs;}
};
# 625 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct greater_equal
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &lhs, const T &rhs) const {return lhs >= rhs;}
};
# 659 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct less_equal
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &lhs, const T &rhs) const {return lhs <= rhs;}
};
# 702 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct logical_and
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &lhs, const T &rhs) const {return lhs && rhs;}
};
# 736 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct logical_or
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &lhs, const T &rhs) const {return lhs || rhs;}
};
# 784 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct logical_not
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef bool result_type;



  __attribute__((host)) __attribute__((device)) bool operator()(const T &x) const {return !x;}
};
# 847 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct bit_and
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs & rhs;}
};
# 902 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct bit_or
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs | rhs;}
};
# 957 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct bit_xor
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs ^ rhs;}
};
# 1008 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct identity
{



  typedef T argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) const T &operator()(const T &x) const {return x;}
};
# 1050 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct maximum
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs < rhs ? rhs : lhs;}
};
# 1097 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T>
struct minimum
{



  typedef T first_argument_type;




  typedef T second_argument_type;




  typedef T result_type;



  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs < rhs ? lhs : rhs;}
};
# 1138 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T1, typename T2>
struct project1st
{



  typedef T1 first_argument_type;




  typedef T2 second_argument_type;




  typedef T1 result_type;



  __attribute__((host)) __attribute__((device)) const T1 &operator()(const T1 &lhs, const T2 &rhs) const {return lhs;}
};
# 1179 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename T1, typename T2>
struct project2nd
{



  typedef T1 first_argument_type;




  typedef T2 second_argument_type;




  typedef T2 result_type;



  __attribute__((host)) __attribute__((device)) const T2 &operator()(const T1 &lhs, const T2 &rhs) const {return rhs;}
};
# 1223 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename Predicate>
struct unary_negate
    : public thrust::unary_function<typename Predicate::argument_type, bool>
{



  __attribute__((host)) __attribute__((device))
  explicit unary_negate(Predicate p) : pred(p){}



  __attribute__((host)) __attribute__((device))
  bool operator()(const typename Predicate::argument_type& x) { return !pred(x); }


  Predicate pred;

};
# 1259 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename Predicate>
  __attribute__((host)) __attribute__((device))
  unary_negate<Predicate> not1(const Predicate &pred);
# 1273 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename Predicate>
struct binary_negate
    : public thrust::binary_function<typename Predicate::first_argument_type,
                                     typename Predicate::second_argument_type,
                                     bool>
{



  __attribute__((host)) __attribute__((device))
  explicit binary_negate(Predicate p) : pred(p){}



  __attribute__((host)) __attribute__((device))
  bool operator()(const typename Predicate::first_argument_type& x, const typename Predicate::second_argument_type& y)
  {
      return !pred(x,y);
  }


  Predicate pred;

};
# 1314 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
template<typename BinaryPredicate>
  __attribute__((host)) __attribute__((device))
  binary_negate<BinaryPredicate> not2(const BinaryPredicate &pred);
# 1370 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
namespace placeholders
{





static const __attribute__((device)) thrust::detail::functional::placeholder<0>::type _1;
# 1386 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<1>::type _2;
# 1395 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<2>::type _3;
# 1404 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<3>::type _4;
# 1413 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<4>::type _5;
# 1422 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<5>::type _6;
# 1431 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<6>::type _7;
# 1440 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<7>::type _8;
# 1449 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<8>::type _9;
# 1458 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h"
static const __attribute__((device)) thrust::detail::functional::placeholder<9>::type _10;





}






}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional.inl" 1
# 19 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional.inl"
namespace thrust
{

namespace detail
{

template<typename Operation>
  struct unary_traits_imp;

template<typename Operation>
  struct unary_traits_imp<Operation*>
{
  typedef Operation function_type;
  typedef const function_type & param_type;
  typedef typename Operation::result_type result_type;
  typedef typename Operation::argument_type argument_type;
};

template<typename Result, typename Argument>
  struct unary_traits_imp<Result(*)(Argument)>
{
  typedef Result (*function_type)(Argument);
  typedef Result (*param_type)(Argument);
  typedef Result result_type;
  typedef Argument argument_type;
};

template<typename Operation>
  struct binary_traits_imp;

template<typename Operation>
  struct binary_traits_imp<Operation*>
{
  typedef Operation function_type;
  typedef const function_type & param_type;
  typedef typename Operation::result_type result_type;
  typedef typename Operation::first_argument_type first_argument_type;
  typedef typename Operation::second_argument_type second_argument_type;
};

template<typename Result, typename Argument1, typename Argument2>
  struct binary_traits_imp<Result(*)(Argument1, Argument2)>
{
  typedef Result (*function_type)(Argument1, Argument2);
  typedef Result (*param_type)(Argument1, Argument2);
  typedef Result result_type;
  typedef Argument1 first_argument_type;
  typedef Argument2 second_argument_type;
};

}

template<typename Operation>
  struct unary_traits
{
  typedef typename detail::unary_traits_imp<Operation*>::function_type function_type;
  typedef typename detail::unary_traits_imp<Operation*>::param_type param_type;
  typedef typename detail::unary_traits_imp<Operation*>::result_type result_type;
  typedef typename detail::unary_traits_imp<Operation*>::argument_type argument_type;
};

template<typename Result, typename Argument>
  struct unary_traits<Result(*)(Argument)>
{
  typedef Result (*function_type)(Argument);
  typedef Result (*param_type)(Argument);
  typedef Result result_type;
  typedef Argument argument_type;
};

template<typename Operation>
  struct binary_traits
{
  typedef typename detail::binary_traits_imp<Operation*>::function_type function_type;
  typedef typename detail::binary_traits_imp<Operation*>::param_type param_type;
  typedef typename detail::binary_traits_imp<Operation*>::result_type result_type;
  typedef typename detail::binary_traits_imp<Operation*>::first_argument_type first_argument_type;
  typedef typename detail::binary_traits_imp<Operation*>::second_argument_type second_argument_type;
};

template<typename Result, typename Argument1, typename Argument2>
  struct binary_traits<Result(*)(Argument1, Argument2)>
{
  typedef Result (*function_type)(Argument1, Argument2);
  typedef Result (*param_type)(Argument1, Argument2);
  typedef Result result_type;
  typedef Argument1 first_argument_type;
  typedef Argument2 second_argument_type;
};

template<typename Predicate>
  unary_negate<Predicate> not1(const Predicate &pred)
{
  return unary_negate<Predicate>(pred);
}

template<typename BinaryPredicate>
  binary_negate<BinaryPredicate> not2(const BinaryPredicate &pred)
{
  return binary_negate<BinaryPredicate>(pred);
}

}
# 1474 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/arithmetic_operators.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/arithmetic_operators.h"
       







namespace thrust
{
namespace detail
{
namespace functional
{

template<typename Eval>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    unary_operator<thrust::negate>,
    actor<Eval>
  >
>
__attribute__((host)) __attribute__((device))
operator-(const actor<Eval> &_1)
{
  return compose(unary_operator<thrust::negate>(), _1);
}


template<typename T>
  struct unary_plus
    : public thrust::unary_function<T,T>
{
  __attribute__((host)) __attribute__((device)) T operator()(const T &x) const {return +x;}
};

template<typename Eval>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    unary_operator<unary_plus>,
    actor<Eval>
  >
>
operator+(const actor<Eval> &_1)
{
  return compose(unary_operator<unary_plus>(), _1);
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::plus>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator+(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::plus>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::plus>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator+(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::plus>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::plus>,
    actor<T1>,
    actor<T2>
  >
>
operator+(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::plus>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::minus>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator-(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::minus>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::minus>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator-(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::minus>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::minus>,
    actor<T1>,
    actor<T2>
  >
>
operator-(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::minus>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::multiplies>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator*(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::multiplies>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::multiplies>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator*(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::multiplies>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::multiplies>,
    actor<T1>,
    actor<T2>
  >
>
operator*(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::multiplies>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::divides>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator/(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::divides>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::divides>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator/(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::divides>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::divides>,
    actor<T1>,
    actor<T2>
  >
>
operator/(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::divides>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::modulus>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator%(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::modulus>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::modulus>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator%(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::modulus>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::modulus>,
    actor<T1>,
    actor<T2>
  >
>
operator%(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::modulus>(),
                 make_actor(_1),
                 make_actor(_2));
}


template<typename T>
  struct prefix_increment
    : public thrust::unary_function<T&,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &x) const { return ++x; }
};

template<typename Eval>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    unary_operator<prefix_increment>,
    actor<Eval>
  >
>
operator++(const actor<Eval> &_1)
{
  return compose(unary_operator<prefix_increment>(), _1);
}


template<typename T>
  struct suffix_increment
    : public thrust::unary_function<T&,T>
{
  __attribute__((host)) __attribute__((device)) T operator()(T &x) const { return x++; }
};

template<typename Eval>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    unary_operator<suffix_increment>,
    actor<Eval>
  >
>
operator++(const actor<Eval> &_1, int)
{
  return compose(unary_operator<suffix_increment>(), _1);
}


template<typename T>
  struct prefix_decrement
    : public thrust::unary_function<T&,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &x) const { return --x; }
};

template<typename Eval>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    unary_operator<prefix_decrement>,
    actor<Eval>
  >
>
operator--(const actor<Eval> &_1)
{
  return compose(unary_operator<prefix_decrement>(), _1);
}


template<typename T>
  struct suffix_decrement
    : public thrust::unary_function<T&,T>
{
  __attribute__((host)) __attribute__((device)) T operator()(T &x) const { return x--; }
};

template<typename Eval>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    unary_operator<suffix_decrement>,
    actor<Eval>
  >
>
operator--(const actor<Eval> &_1, int)
{
  return compose(unary_operator<suffix_decrement>(), _1);
}

}
}
}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/relational_operators.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/relational_operators.h"
       







namespace thrust
{
namespace detail
{
namespace functional
{

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::equal_to>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator==(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::equal_to>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::equal_to>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator==(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::equal_to>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::equal_to>,
    actor<T1>,
    actor<T2>
  >
>
operator==(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::equal_to>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::not_equal_to>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator!=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::not_equal_to>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::not_equal_to>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator!=(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::not_equal_to>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::not_equal_to>,
    actor<T1>,
    actor<T2>
  >
>
operator!=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::not_equal_to>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::greater>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator>(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::greater>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::greater>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator>(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::greater>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::greater>,
    actor<T1>,
    actor<T2>
  >
>
operator>(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::greater>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::less>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator<(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::less>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::less>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator<(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::less>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::less>,
    actor<T1>,
    actor<T2>
  >
>
operator<(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::less>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::greater_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator>=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::greater_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::greater_equal>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator>=(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::greater_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::greater_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator>=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::greater_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::less_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator<=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::less_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::less_equal>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator<=(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::less_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::less_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator<=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::less_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

}
}
}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/logical_operators.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/logical_operators.h"
       







namespace thrust
{
namespace detail
{
namespace functional
{

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::logical_and>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator&&(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::logical_and>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::logical_and>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator&&(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::logical_and>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::logical_and>,
    actor<T1>,
    actor<T2>
  >
>
operator&&(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::logical_and>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::logical_or>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator||(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::logical_or>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::logical_or>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator||(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::logical_or>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::logical_or>,
    actor<T1>,
    actor<T2>
  >
>
operator||(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::logical_or>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename Eval>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    unary_operator<thrust::logical_not>,
    actor<Eval>
  >
>
operator!(const actor<Eval> &_1)
{
  return compose(unary_operator<thrust::logical_not>(), _1);
}

}
}
}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/bitwise_operators.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/bitwise_operators.h"
       







namespace thrust
{
namespace detail
{
namespace functional
{

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_and>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator&(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::bit_and>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_and>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator&(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::bit_and>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_and>,
    actor<T1>,
    actor<T2>
  >
>
operator&(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::bit_and>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_or>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator|(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::bit_or>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_or>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator|(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::bit_or>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_or>,
    actor<T1>,
    actor<T2>
  >
>
operator|(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::bit_or>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_xor>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator^(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<thrust::bit_xor>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_xor>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator^(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::bit_xor>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<thrust::bit_xor>,
    actor<T1>,
    actor<T2>
  >
>
operator^(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<thrust::bit_xor>(),
                 make_actor(_1),
                 make_actor(_2));
}


template<typename T>
  struct bit_not
    : public thrust::unary_function<T,T>
{
  __attribute__((host)) __attribute__((device)) T operator()(const T &x) const {return ~x;}
};

template<typename Eval>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    unary_operator<bit_not>,
    actor<Eval>
  >
>
__attribute__((host)) __attribute__((device))
operator~(const actor<Eval> &_1)
{
  return compose(unary_operator<bit_not>(), _1);
}


template<typename T>
  struct bit_lshift
    : public thrust::binary_function<T,T,T>
{
  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs << rhs;}
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_lshift>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator<<(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<bit_lshift>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_lshift>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator<<(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_lshift>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_lshift>,
    actor<T1>,
    actor<T2>
  >
>
operator<<(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_lshift>(),
                 make_actor(_1),
                 make_actor(_2));
}


template<typename T>
  struct bit_rshift
    : public thrust::binary_function<T,T,T>
{
  __attribute__((host)) __attribute__((device)) T operator()(const T &lhs, const T &rhs) const {return lhs >> rhs;}
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_rshift>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator>>(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<bit_rshift>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_rshift>,
    typename as_actor<T1>::type,
    actor<T2>
  >
>
operator>>(const T1 &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_rshift>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_rshift>,
    actor<T1>,
    actor<T2>
  >
>
operator>>(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_rshift>(),
                 make_actor(_1),
                 make_actor(_2));
}

}
}
}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/compound_assignment_operators.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators/compound_assignment_operators.h"
       






namespace thrust
{
namespace detail
{
namespace functional
{

template<typename T>
  struct plus_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T &rhs) const { return lhs += rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<plus_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator+=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<plus_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<plus_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator+=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<plus_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct minus_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T &rhs) const { return lhs -= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<minus_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator-=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<minus_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<minus_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator-=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<minus_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct multiplies_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T&rhs) const { return lhs *= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<multiplies_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator*=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<multiplies_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<multiplies_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator*=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<multiplies_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct divides_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T&rhs) const { return lhs /= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<divides_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator/=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<divides_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<divides_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator/=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<divides_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct modulus_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T&rhs) const { return lhs %= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<modulus_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator%=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<modulus_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<modulus_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator%=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<modulus_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct bit_and_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T&rhs) const { return lhs &= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_and_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator&=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<bit_and_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_and_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator&=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_and_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct bit_or_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T&rhs) const { return lhs |= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_or_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator|=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<bit_or_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_or_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator|=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_or_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct bit_xor_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T&rhs) const { return lhs ^= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_xor_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator^=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<bit_xor_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_xor_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator^=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_xor_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct bit_lshift_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T&rhs) const { return lhs <<= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_lshift_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator<<=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<bit_lshift_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_lshift_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator<<=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_lshift_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T>
  struct bit_rshift_equal
    : public thrust::binary_function<T&,T,T&>
{
  __attribute__((host)) __attribute__((device)) T& operator()(T &lhs, const T&rhs) const { return lhs >>= rhs; }
};

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_rshift_equal>,
    actor<T1>,
    typename as_actor<T2>::type
  >
>
operator>>=(const actor<T1> &_1, const T2 &_2)
{
  return compose(binary_operator<bit_rshift_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

template<typename T1, typename T2>
__attribute__((host)) __attribute__((device))
actor<
  composite<
    binary_operator<bit_rshift_equal>,
    actor<T1>,
    actor<T2>
  >
>
operator>>=(const actor<T1> &_1, const actor<T2> &_2)
{
  return compose(binary_operator<bit_rshift_equal>(),
                 make_actor(_1),
                 make_actor(_2));
}

}
}
}
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/functional/operators.h" 2
# 1475 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/functional.h" 2
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.inl" 2

namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result)
{







  typedef typename thrust::detail::eval_if<
      thrust::detail::is_output_iterator<OutputIterator>::value,
      thrust::iterator_value<InputIterator>,
      thrust::iterator_value<OutputIterator>
  >::type ValueType;


  return thrust::inclusive_scan(exec, first, last, result, thrust::plus<ValueType>());
}


template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result)
{







  typedef typename thrust::detail::eval_if<
      thrust::detail::is_output_iterator<OutputIterator>::value,
      thrust::iterator_value<InputIterator>,
      thrust::iterator_value<OutputIterator>
  >::type ValueType;


  return thrust::exclusive_scan(exec, first, last, result, ValueType(0));
}


template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init)
{

  return thrust::exclusive_scan(exec, first, last, result, init, thrust::plus<T>());
}


template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                BinaryFunction binary_op)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<InputIterator, false>::value) ) >)> thrust_static_assert_typedef_121 __attribute__((unused));
  return result;
}


template<typename ExecutionPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(thrust::execution_policy<ExecutionPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init,
                                BinaryFunction binary_op)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<InputIterator, false>::value) ) >)> thrust_static_assert_typedef_140 __attribute__((unused));
  return result;
}


}
}
}
}
# 99 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/scan.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan_by_key.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan_by_key.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result);


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred);


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op);


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result);


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init);


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred);


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan_by_key.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan_by_key.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
       




namespace thrust
{
# 87 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator transform(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                           InputIterator first, InputIterator last,
                           OutputIterator result,
                           UnaryFunction op);
# 138 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename InputIterator,
         typename OutputIterator,
         typename UnaryFunction>
  OutputIterator transform(InputIterator first, InputIterator last,
                           OutputIterator result,
                           UnaryFunction op);
# 201 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator transform(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                           InputIterator1 first1, InputIterator1 last1,
                           InputIterator2 first2,
                           OutputIterator result,
                           BinaryFunction op);
# 262 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryFunction>
  OutputIterator transform(InputIterator1 first1, InputIterator1 last1,
                           InputIterator2 first2,
                           OutputIterator result,
                           BinaryFunction op);
# 338 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                               InputIterator first, InputIterator last,
                               ForwardIterator result,
                               UnaryFunction op,
                               Predicate pred);
# 410 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename InputIterator,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
  ForwardIterator transform_if(InputIterator first, InputIterator last,
                               ForwardIterator result,
                               UnaryFunction op,
                               Predicate pred);
# 481 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                               InputIterator1 first, InputIterator1 last,
                               InputIterator2 stencil,
                               ForwardIterator result,
                               UnaryFunction op,
                               Predicate pred);
# 550 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
  ForwardIterator transform_if(InputIterator1 first, InputIterator1 last,
                               InputIterator2 stencil,
                               ForwardIterator result,
                               UnaryFunction op,
                               Predicate pred);
# 628 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename InputIterator3,
         typename ForwardIterator,
         typename BinaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                               InputIterator1 first1, InputIterator1 last1,
                               InputIterator2 first2,
                               InputIterator3 stencil,
                               ForwardIterator result,
                               BinaryFunction binary_op,
                               Predicate pred);
# 704 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h"
template<typename InputIterator1,
         typename InputIterator2,
         typename InputIterator3,
         typename ForwardIterator,
         typename BinaryFunction,
         typename Predicate>
  ForwardIterator transform_if(InputIterator1 first1, InputIterator1 last1,
                               InputIterator2 first2,
                               InputIterator3 stencil,
                               ForwardIterator result,
                               BinaryFunction binary_op,
                               Predicate pred);






}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/transform.inl" 1
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/transform.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/transform.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/transform.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{

template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator transform(thrust::execution_policy<DerivedPolicy> &exec,
                           InputIterator first,
                           InputIterator last,
                           OutputIterator result,
                           UnaryFunction op);

template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator transform(thrust::execution_policy<DerivedPolicy> &exec,
                           InputIterator1 first1,
                           InputIterator1 last1,
                           InputIterator2 first2,
                           OutputIterator result,
                           BinaryFunction op);

template<typename DerivedPolicy,
         typename InputIterator,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(thrust::execution_policy<DerivedPolicy> &exec,
                               InputIterator first,
                               InputIterator last,
                               ForwardIterator result,
                               UnaryFunction unary_op,
                               Predicate pred);

template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(thrust::execution_policy<DerivedPolicy> &exec,
                               InputIterator1 first,
                               InputIterator1 last,
                               InputIterator2 stencil,
                               ForwardIterator result,
                               UnaryFunction unary_op,
                               Predicate pred);

template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename InputIterator3,
         typename ForwardIterator,
         typename BinaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(thrust::execution_policy<DerivedPolicy> &exec,
                               InputIterator1 first1,
                               InputIterator1 last1,
                               InputIterator2 first2,
                               InputIterator3 stencil,
                               ForwardIterator result,
                               BinaryFunction binary_op,
                               Predicate pred);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/transform.inl" 1
# 19 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/transform.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/for_each.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/for_each.h"
       





namespace thrust
{
# 91 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/for_each.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
InputIterator for_each(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                       InputIterator first,
                       InputIterator last,
                       UnaryFunction f);
# 154 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/for_each.h"
template<typename DerivedPolicy,
         typename InputIterator,
         typename Size,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
InputIterator for_each_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                         InputIterator first,
                         Size n,
                         UnaryFunction f);
# 212 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/for_each.h"
template<typename InputIterator,
         typename UnaryFunction>
InputIterator for_each(InputIterator first,
                       InputIterator last,
                       UnaryFunction f);
# 267 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/for_each.h"
template<typename InputIterator,
         typename Size,
         typename UnaryFunction>
InputIterator for_each_n(InputIterator first,
                         Size n,
                         UnaryFunction f);




}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/for_each.inl" 1
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/for_each.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/for_each.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/for_each.h"
       






namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
InputIterator for_each(thrust::execution_policy<DerivedPolicy> &exec,
                       InputIterator first,
                       InputIterator last,
                       UnaryFunction f)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<InputIterator, false>::value) ) >)> thrust_static_assert_typedef_49 __attribute__((unused));
  return first;
}


template<typename DerivedPolicy,
         typename InputIterator,
         typename Size,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
InputIterator for_each_n(thrust::execution_policy<DerivedPolicy> &exec,
                         InputIterator first,
                         Size n,
                         UnaryFunction f)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<InputIterator, false>::value) ) >)> thrust_static_assert_typedef_65 __attribute__((unused));
  return first;
}


}
}
}
}
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/for_each.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/for_each.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/for_each.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/for_each.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/for_each.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/function.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/function.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_reference_cast.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_reference_cast.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_pointer_cast.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_pointer_cast.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/pointer_traits.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/pointer_traits.h"
       






# 1 "/usr/include/c++/4.8/cstddef" 1 3
# 39 "/usr/include/c++/4.8/cstddef" 3
       
# 40 "/usr/include/c++/4.8/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 42 "/usr/include/c++/4.8/cstddef" 2 3
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/pointer_traits.h" 2

namespace thrust
{
namespace detail
{

template<typename Ptr> struct pointer_element;

template<template<typename> class Ptr, typename Arg>
  struct pointer_element<Ptr<Arg> >
{
  typedef Arg type;
};

template<template<typename,typename> class Ptr, typename Arg1, typename Arg2>
  struct pointer_element<Ptr<Arg1,Arg2> >
{
  typedef Arg1 type;
};

template<template<typename,typename,typename> class Ptr, typename Arg1, typename Arg2, typename Arg3>
  struct pointer_element<Ptr<Arg1,Arg2,Arg3> >
{
  typedef Arg1 type;
};

template<template<typename,typename,typename,typename> class Ptr, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
  struct pointer_element<Ptr<Arg1,Arg2,Arg3,Arg4> >
{
  typedef Arg1 type;
};

template<template<typename,typename,typename,typename,typename> class Ptr, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
  struct pointer_element<Ptr<Arg1,Arg2,Arg3,Arg4,Arg5> >
{
  typedef Arg1 type;
};

template<typename T>
  struct pointer_element<T*>
{
  typedef T type;
};

template<typename Ptr>
  struct pointer_difference
{
  typedef typename Ptr::difference_type type;
};

template<typename T>
  struct pointer_difference<T*>
{
  typedef std::ptrdiff_t type;
};

template<typename Ptr, typename T> struct rebind_pointer;

template<typename T, typename U>
  struct rebind_pointer<T*,U>
{
  typedef U* type;
};

template<template<typename> class Ptr, typename Arg, typename T>
  struct rebind_pointer<Ptr<Arg>,T>
{
  typedef Ptr<T> type;
};

template<template<typename, typename> class Ptr, typename Arg1, typename Arg2, typename T>
  struct rebind_pointer<Ptr<Arg1,Arg2>,T>
{
  typedef Ptr<T,Arg2> type;
};

template<template<typename, typename, typename> class Ptr, typename Arg1, typename Arg2, typename Arg3, typename T>
  struct rebind_pointer<Ptr<Arg1,Arg2,Arg3>,T>
{
  typedef Ptr<T,Arg2,Arg3> type;
};

template<template<typename, typename, typename, typename> class Ptr, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename T>
  struct rebind_pointer<Ptr<Arg1,Arg2,Arg3,Arg4>,T>
{
  typedef Ptr<T,Arg2,Arg3,Arg4> type;
};


template<typename T> struct has_raw_pointer { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::raw_pointer *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};

namespace pointer_traits_detail
{

template<typename Ptr, typename Enable = void> struct pointer_raw_pointer_impl {};

template<typename T>
  struct pointer_raw_pointer_impl<T*>
{
  typedef T* type;
};

template<typename Ptr>
  struct pointer_raw_pointer_impl<Ptr, typename enable_if<has_raw_pointer<Ptr>::value>::type>
{
  typedef typename Ptr::raw_pointer type;
};

}

template<typename T>
  struct pointer_raw_pointer
    : pointer_traits_detail::pointer_raw_pointer_impl<T>
{};

namespace pointer_traits_detail
{

template<typename Void>
  struct capture_address
{
  template<typename T>
  __attribute__((host)) __attribute__((device))
  capture_address(T &r)
    : m_addr(&r)
  {}

  inline __attribute__((host)) __attribute__((device))
  Void *operator&() const
  {
    return m_addr;
  }

  Void *m_addr;
};


template<typename T>
  struct pointer_to_param
    : thrust::detail::eval_if<
        thrust::detail::is_void<T>::value,
        thrust::detail::identity_<capture_address<T> >,
        thrust::detail::add_reference<T>
      >
{};

}

template<typename Ptr>
  struct pointer_traits
{
  typedef Ptr pointer;
  typedef typename pointer_element<Ptr>::type element_type;
  typedef typename pointer_difference<Ptr>::type difference_type;

  template<typename U>
    struct rebind
  {
    typedef typename rebind_pointer<Ptr,U>::type other;
  };

  __attribute__((host)) __attribute__((device))
  inline static pointer pointer_to(typename pointer_traits_detail::pointer_to_param<element_type>::type r)
  {



    return pointer(&r);
  }


  typedef typename pointer_raw_pointer<Ptr>::type raw_pointer;

  __attribute__((host)) __attribute__((device))
  inline static raw_pointer get(pointer ptr)
  {
    return ptr.get();
  }
};

template<typename T>
  struct pointer_traits<T*>
{
  typedef T* pointer;
  typedef T element_type;
  typedef typename pointer_difference<T*>::type difference_type;

  template<typename U>
    struct rebind
  {
    typedef U* other;
  };

  __attribute__((host)) __attribute__((device))
  inline static pointer pointer_to(typename pointer_traits_detail::pointer_to_param<element_type>::type r)
  {
    return &r;
  }


  typedef typename pointer_raw_pointer<T*>::type raw_pointer;

  __attribute__((host)) __attribute__((device))
  inline static raw_pointer get(pointer ptr)
  {
    return ptr;
  }
};

template<typename FromPtr, typename ToPtr>
  struct is_pointer_convertible
    : thrust::detail::and_<
        thrust::detail::is_convertible<
          typename pointer_element<FromPtr>::type *,
          typename pointer_element<ToPtr>::type *
        >,
        thrust::detail::is_convertible<
          typename iterator_system<FromPtr>::type,
          typename iterator_system<ToPtr>::type
        >
      >
{};



template<typename T>
  struct is_thrust_pointer
    : is_metafunction_defined<pointer_raw_pointer<T> >
{};


template<typename FromPtr, typename ToPtr>
  struct lazy_is_pointer_convertible
    : thrust::detail::eval_if<
        is_thrust_pointer<FromPtr>::value && is_thrust_pointer<ToPtr>::value,
        is_pointer_convertible<FromPtr,ToPtr>,
        thrust::detail::identity_<thrust::detail::false_type>
      >
{};

template<typename FromPtr, typename ToPtr, typename T = void>
  struct enable_if_pointer_is_convertible
    : thrust::detail::enable_if<
        lazy_is_pointer_convertible<FromPtr,ToPtr>::type::value,
        T
      >
{};


}
}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_pointer_cast.h" 2

namespace thrust
{

template<typename Pointer>
  inline __attribute__((host)) __attribute__((device)) typename thrust::detail::pointer_traits<Pointer>::raw_pointer
    raw_pointer_cast(const Pointer &ptr)
{
  return thrust::detail::pointer_traits<Pointer>::get(ptr);
}

}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_reference_cast.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple_transform.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple_transform.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple_meta_transform.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple_meta_transform.h"
       



namespace thrust
{

namespace detail
{

template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         unsigned int sz = thrust::tuple_size<Tuple>::value>
  struct tuple_meta_transform;

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,0>
{
  typedef null_type type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,1>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,2>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,3>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,4>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,5>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,6>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,7>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<6,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,8>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<6,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<7,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,9>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<6,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<7,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<8,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,10>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<6,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<7,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<8,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<9,Tuple>::type>::type
  > type;
};

}

}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/tuple_transform.h" 2

namespace thrust
{

namespace detail
{

template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction,
         unsigned int sz = thrust::tuple_size<Tuple>::value>
  struct tuple_transform_functor;


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,0>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    return thrust::null_type();
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    return thrust::null_type();
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,1>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,2>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,3>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,4>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,5>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,6>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,7>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,8>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,9>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)),
                     f(thrust::get<8>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)),
                     f(thrust::get<8>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,10>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)),
                     f(thrust::get<8>(t)),
                     f(thrust::get<9>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)),
                     f(thrust::get<8>(t)),
                     f(thrust::get<9>(t)));
  }
};


template<template<typename> class UnaryMetaFunction,
         typename Tuple,
         typename UnaryFunction>
typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
tuple_host_transform(const Tuple &t, UnaryFunction f)
{
  return tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction>::do_it_on_the_host(t,f);
}

template<template<typename> class UnaryMetaFunction,
         typename Tuple,
         typename UnaryFunction>
typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
__attribute__((host)) __attribute__((device))
tuple_host_device_transform(const Tuple &t, UnaryFunction f)
{
  return tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction>::do_it_on_the_host_or_device(t,f);
}

}

}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_reference_cast.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/tuple_of_iterator_references.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/tuple_of_iterator_references.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference_forward_declaration.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference_forward_declaration.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/use_default.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/use_default.h"
       



namespace thrust
{

struct use_default {};

}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference_forward_declaration.h" 2

namespace thrust
{

template<typename Element, typename Pointer, typename Derived = use_default> class reference;

}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/tuple_of_iterator_references.h" 2

namespace thrust
{
namespace detail
{


template<
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
  class tuple_of_iterator_references
    : public thrust::tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
{
  private:
    typedef thrust::tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> super_t;

  public:

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(const super_t &other)
      : super_t(other)
    {}



    template<typename U1, typename U2>
    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references &operator=(const detail::cons<U1,U2> &other)
    {
      super_t::operator=(other);
      return *this;
    }



    template<typename U1, typename U2>
    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references &operator=(const thrust::pair<U1,U2> &other)
    {
      super_t::operator=(other);
      return *this;
    }




    template<typename U0, typename U1, typename U2,
             typename U3, typename U4, typename U5,
             typename U6, typename U7, typename U8,
             typename U9,
             typename Pointer, typename Derived>
    inline __attribute__((host)) __attribute__((device))
# 86 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/tuple_of_iterator_references.h"
    tuple_of_iterator_references &
    operator=(const thrust::reference<thrust::tuple<U0,U1,U2,U3,U4,U5,U6,U7,U8,U9>, Pointer, Derived> &other)
    {
      typedef thrust::tuple<U0,U1,U2,U3,U4,U5,U6,U7,U8,U9> tuple_type;


      tuple_type other_tuple = other;
      super_t::operator=(other_tuple);
      return *this;
    }



    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references() {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0)
      : super_t(t0,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1)
      : super_t(t0, t1,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1,
                                 typename access_traits<T2>::parameter_type t2)
      : super_t(t0, t1, t2,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1,
                                 typename access_traits<T2>::parameter_type t2,
                                 typename access_traits<T3>::parameter_type t3)
      : super_t(t0, t1, t2, t3,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1,
                                 typename access_traits<T2>::parameter_type t2,
                                 typename access_traits<T3>::parameter_type t3,
                                 typename access_traits<T4>::parameter_type t4)
      : super_t(t0, t1, t2, t3, t4,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1,
                                 typename access_traits<T2>::parameter_type t2,
                                 typename access_traits<T3>::parameter_type t3,
                                 typename access_traits<T4>::parameter_type t4,
                                 typename access_traits<T5>::parameter_type t5)
      : super_t(t0, t1, t2, t3, t4, t5,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1,
                                 typename access_traits<T2>::parameter_type t2,
                                 typename access_traits<T3>::parameter_type t3,
                                 typename access_traits<T4>::parameter_type t4,
                                 typename access_traits<T5>::parameter_type t5,
                                 typename access_traits<T6>::parameter_type t6)
      : super_t(t0, t1, t2, t3, t4, t5, t6,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1,
                                 typename access_traits<T2>::parameter_type t2,
                                 typename access_traits<T3>::parameter_type t3,
                                 typename access_traits<T4>::parameter_type t4,
                                 typename access_traits<T5>::parameter_type t5,
                                 typename access_traits<T6>::parameter_type t6,
                                 typename access_traits<T7>::parameter_type t7)
      : super_t(t0, t1, t2, t3, t4, t5, t6, t7,
                static_cast<const null_type&>(null_type()),
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1,
                                 typename access_traits<T2>::parameter_type t2,
                                 typename access_traits<T3>::parameter_type t3,
                                 typename access_traits<T4>::parameter_type t4,
                                 typename access_traits<T5>::parameter_type t5,
                                 typename access_traits<T6>::parameter_type t6,
                                 typename access_traits<T7>::parameter_type t7,
                                 typename access_traits<T8>::parameter_type t8)
      : super_t(t0, t1, t2, t3, t4, t5, t6, t7, t8,
                static_cast<const null_type&>(null_type()))
    {}

    inline __attribute__((host)) __attribute__((device))
    tuple_of_iterator_references(typename access_traits<T0>::parameter_type t0,
                                 typename access_traits<T1>::parameter_type t1,
                                 typename access_traits<T2>::parameter_type t2,
                                 typename access_traits<T3>::parameter_type t3,
                                 typename access_traits<T4>::parameter_type t4,
                                 typename access_traits<T5>::parameter_type t5,
                                 typename access_traits<T6>::parameter_type t6,
                                 typename access_traits<T7>::parameter_type t7,
                                 typename access_traits<T8>::parameter_type t8,
                                 typename access_traits<T9>::parameter_type t9)
      : super_t(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9)
    {}
};


}
}
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_reference_cast.h" 2







namespace thrust
{
namespace detail
{


template<typename T> struct is_wrapped_reference { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::wrapped_reference_hint *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};




template<typename T>
  struct is_unwrappable
    : is_wrapped_reference<T>
{};




template<
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
  struct is_unwrappable<
    thrust::tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >
    : or_<
        is_unwrappable<T0>,
        is_unwrappable<T1>,
        is_unwrappable<T2>,
        is_unwrappable<T3>,
        is_unwrappable<T4>,
        is_unwrappable<T5>,
        is_unwrappable<T6>,
        is_unwrappable<T7>,
        is_unwrappable<T8>,
        is_unwrappable<T9>
      >
{};




template<
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
  struct is_unwrappable<
    thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >
    : or_<
        is_unwrappable<T0>,
        is_unwrappable<T1>,
        is_unwrappable<T2>,
        is_unwrappable<T3>,
        is_unwrappable<T4>,
        is_unwrappable<T5>,
        is_unwrappable<T6>,
        is_unwrappable<T7>,
        is_unwrappable<T8>,
        is_unwrappable<T9>
      >
{};


template<typename T, typename Result = void>
  struct enable_if_unwrappable
    : enable_if<
        is_unwrappable<T>::value,
        Result
      >
{};


namespace raw_reference_detail
{


template<typename T, typename Enable = void>
  struct raw_reference_impl
    : add_reference<T>
{};


template<typename T>
  struct raw_reference_impl<
    T,
    typename thrust::detail::enable_if<
      is_wrapped_reference<
        typename remove_cv<T>::type
      >::value
    >::type
  >
{
  typedef typename add_reference<
    typename pointer_element<typename T::pointer>::type
  >::type type;
};


}


template<typename T>
  struct raw_reference :
    raw_reference_detail::raw_reference_impl<T>
{};


namespace raw_reference_detail
{
# 162 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_reference_cast.h"
template<typename T>
  struct raw_reference_tuple_helper
    : eval_if<
        is_unwrappable<
          typename remove_cv<T>::type
        >::value,
        raw_reference<T>,
        identity_<T>
      >
{};



template <
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
  struct raw_reference_tuple_helper<
    thrust::tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >
{
  typedef thrust::tuple<
    typename raw_reference_tuple_helper<T0>::type,
    typename raw_reference_tuple_helper<T1>::type,
    typename raw_reference_tuple_helper<T2>::type,
    typename raw_reference_tuple_helper<T3>::type,
    typename raw_reference_tuple_helper<T4>::type,
    typename raw_reference_tuple_helper<T5>::type,
    typename raw_reference_tuple_helper<T6>::type,
    typename raw_reference_tuple_helper<T7>::type,
    typename raw_reference_tuple_helper<T8>::type,
    typename raw_reference_tuple_helper<T9>::type
  > type;
};


template <
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
  struct raw_reference_tuple_helper<
    thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >
{
  typedef thrust::detail::tuple_of_iterator_references<
    typename raw_reference_tuple_helper<T0>::type,
    typename raw_reference_tuple_helper<T1>::type,
    typename raw_reference_tuple_helper<T2>::type,
    typename raw_reference_tuple_helper<T3>::type,
    typename raw_reference_tuple_helper<T4>::type,
    typename raw_reference_tuple_helper<T5>::type,
    typename raw_reference_tuple_helper<T6>::type,
    typename raw_reference_tuple_helper<T7>::type,
    typename raw_reference_tuple_helper<T8>::type,
    typename raw_reference_tuple_helper<T9>::type
  > type;
};


}
# 234 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/raw_reference_cast.h"
template <
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
  struct raw_reference<
    thrust::tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >
{
  private:
    typedef thrust::tuple<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> tuple_type;

  public:
    typedef typename eval_if<
      is_unwrappable<tuple_type>::value,
      raw_reference_detail::raw_reference_tuple_helper<tuple_type>,
      add_reference<tuple_type>
    >::type type;
};


template <
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
  struct raw_reference<
    thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >
{
  private:
    typedef detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> tuple_type;

  public:
    typedef typename raw_reference_detail::raw_reference_tuple_helper<tuple_type>::type type;







};


}



template<typename T>
inline __attribute__((host)) __attribute__((device))
typename detail::raw_reference<T>::type
  raw_reference_cast(T &ref);


template<typename T>
inline __attribute__((host)) __attribute__((device))
typename detail::raw_reference<const T>::type
  raw_reference_cast(const T &ref);


template<
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
__attribute__((host)) __attribute__((device))
typename detail::enable_if_unwrappable<
  thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>,
  typename detail::raw_reference<
    thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >::type
>::type
raw_reference_cast(thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> t);


namespace detail
{


struct raw_reference_caster
{
  template<typename T>
  __attribute__((host)) __attribute__((device))
  typename detail::raw_reference<T>::type operator()(T &ref)
  {
    return thrust::raw_reference_cast(ref);
  }

  template<typename T>
  __attribute__((host)) __attribute__((device))
  typename detail::raw_reference<const T>::type operator()(const T &ref)
  {
    return thrust::raw_reference_cast(ref);
  }

  template<
    typename T0, typename T1, typename T2,
    typename T3, typename T4, typename T5,
    typename T6, typename T7, typename T8,
    typename T9
  >
  __attribute__((host)) __attribute__((device))
  typename detail::raw_reference<
    thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >::type
  operator()(thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> t,
             typename enable_if<
               is_unwrappable<thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> >::value
             >::type * = 0)
  {
    return thrust::raw_reference_cast(t);
  }
};


}


template<typename T>
inline __attribute__((host)) __attribute__((device))
typename detail::raw_reference<T>::type
  raw_reference_cast(T &ref)
{
  return *thrust::raw_pointer_cast(&ref);
}


template<typename T>
inline __attribute__((host)) __attribute__((device))
typename detail::raw_reference<const T>::type
  raw_reference_cast(const T &ref)
{
  return *thrust::raw_pointer_cast(&ref);
}


template<
  typename T0, typename T1, typename T2,
  typename T3, typename T4, typename T5,
  typename T6, typename T7, typename T8,
  typename T9
>
__attribute__((host)) __attribute__((device))
typename detail::enable_if_unwrappable<
  thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>,
  typename detail::raw_reference<
    thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9>
  >::type
>::type
raw_reference_cast(thrust::detail::tuple_of_iterator_references<T0,T1,T2,T3,T4,T5,T6,T7,T8,T9> t)
{
  thrust::detail::raw_reference_caster f;



  return thrust::detail::tuple_host_device_transform<detail::raw_reference_detail::raw_reference_tuple_helper>(t, f);
}


}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/function.h" 2

namespace thrust
{
namespace detail
{


template<typename Function, typename Result>
  struct wrapped_function
{

  mutable Function m_f;

  inline __attribute__((host)) __attribute__((device))
  wrapped_function()
    : m_f()
  {}

  inline __attribute__((host)) __attribute__((device))
  wrapped_function(const Function &f)
    : m_f(f)
  {}

  #pragma hd_warning_disable
  template<typename Argument>
  inline __attribute__((host)) __attribute__((device))
    Result operator()(Argument &x) const
  {


    return static_cast<Result>(m_f(thrust::raw_reference_cast(x)));
  }

  #pragma hd_warning_disable
  template<typename Argument>
    inline __attribute__((host)) __attribute__((device)) Result operator()(const Argument &x) const
  {


    return static_cast<Result>(m_f(thrust::raw_reference_cast(x)));
  }

  #pragma hd_warning_disable
  template<typename Argument1, typename Argument2>
    inline __attribute__((host)) __attribute__((device)) Result operator()(Argument1 &x, Argument2 &y) const
  {


    return static_cast<Result>(m_f(thrust::raw_reference_cast(x), thrust::raw_reference_cast(y)));
  }

  #pragma hd_warning_disable
  template<typename Argument1, typename Argument2>
    inline __attribute__((host)) __attribute__((device)) Result operator()(const Argument1 &x, Argument2 &y) const
  {


    return static_cast<Result>(m_f(thrust::raw_reference_cast(x), thrust::raw_reference_cast(y)));
  }

  #pragma hd_warning_disable
  template<typename Argument1, typename Argument2>
    inline __attribute__((host)) __attribute__((device)) Result operator()(const Argument1 &x, const Argument2 &y) const
  {


    return static_cast<Result>(m_f(thrust::raw_reference_cast(x), thrust::raw_reference_cast(y)));
  }

  #pragma hd_warning_disable
  template<typename Argument1, typename Argument2>
    inline __attribute__((host)) __attribute__((device)) Result operator()(Argument1 &x, const Argument2 &y) const
  {


    return static_cast<Result>(m_f(thrust::raw_reference_cast(x), thrust::raw_reference_cast(y)));
  }
};


}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/for_each.h" 2


namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
InputIterator for_each(sequential::execution_policy<DerivedPolicy> &,
                       InputIterator first,
                       InputIterator last,
                       UnaryFunction f)
{

  thrust::detail::wrapped_function<
    UnaryFunction,
    void
  > wrapped_f(f);

  for(; first != last; ++first)
  {
    wrapped_f(*first);
  }

  return first;
}


template<typename DerivedPolicy,
         typename InputIterator,
         typename Size,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
InputIterator for_each_n(sequential::execution_policy<DerivedPolicy> &,
                         InputIterator first,
                         Size n,
                         UnaryFunction f)
{

  thrust::detail::wrapped_function<
    UnaryFunction,
    void
  > wrapped_f(f);

  for(Size i = 0; i != n; i++)
  {


    wrapped_f(*first);
    ++first;
  }

  return first;
}


}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/for_each.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/for_each.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/for_each.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/for_each.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.h" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.h"
       




namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename DerivedPolicy,
         typename RandomAccessIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
RandomAccessIterator for_each(execution_policy<DerivedPolicy> &s,
                              RandomAccessIterator first,
                              RandomAccessIterator last,
                              UnaryFunction f);


template<typename DerivedPolicy,
         typename RandomAccessIterator,
         typename Size,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
RandomAccessIterator for_each_n(execution_policy<DerivedPolicy> &s,
                                RandomAccessIterator first,
                                Size n,
                                UnaryFunction f);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.inl" 1
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/distance.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/distance.h"
       




namespace thrust
{
# 66 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/distance.h"
template<typename InputIterator>
inline __attribute__((host)) __attribute__((device))
  typename thrust::iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last);




}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/distance.inl" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/distance.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/advance.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/advance.h"
       



namespace thrust
{
# 64 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/advance.h"
template <typename InputIterator, typename Distance>
__attribute__((host)) __attribute__((device))
void advance(InputIterator& i, Distance n);




}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/advance.inl" 1
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/advance.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/advance.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/advance.h"
       



namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{

template<typename InputIterator, typename Distance>
__attribute__((host)) __attribute__((device))
void advance(InputIterator& i, Distance n);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/advance.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/advance.inl"
namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{
namespace detail
{

 #pragma hd_warning_disable
template<typename InputIterator, typename Distance>
__attribute__((host)) __attribute__((device))
void advance(InputIterator& i, Distance n, thrust::incrementable_traversal_tag)
{
  while(n)
  {
    ++i;
    --n;
  }
}

 #pragma hd_warning_disable
template<typename InputIterator, typename Distance>
__attribute__((host)) __attribute__((device))
void advance(InputIterator& i, Distance n, thrust::random_access_traversal_tag)
{
  i += n;
}

}

template<typename InputIterator, typename Distance>
__attribute__((host)) __attribute__((device))
void advance(InputIterator& i, Distance n)
{

  thrust::system::detail::generic::detail::advance(i, n,
    typename thrust::iterator_traversal<InputIterator>::type());
}

}
}
}
}
# 41 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/advance.h" 2
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/advance.inl" 2

namespace thrust
{


template <typename InputIterator, typename Distance>
__attribute__((host)) __attribute__((device))
void advance(InputIterator& i, Distance n)
{
  thrust::system::detail::generic::advance(i, n);
}


}
# 74 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/advance.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/distance.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/distance.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/distance.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{

template<typename InputIterator>
inline __attribute__((host)) __attribute__((device))
  typename thrust::iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/distance.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/distance.inl"
namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{
namespace detail
{


 #pragma hd_warning_disable
template<typename InputIterator>
inline __attribute__((host)) __attribute__((device))
  typename thrust::iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last, thrust::incrementable_traversal_tag)
{
  typename thrust::iterator_traits<InputIterator>::difference_type result(0);

  while(first != last)
  {
    ++first;
    ++result;
  }

  return result;
}


 #pragma hd_warning_disable
template<typename InputIterator>
inline __attribute__((host)) __attribute__((device))
  typename thrust::iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last, thrust::random_access_traversal_tag)
{
  return last - first;
}


}


template<typename InputIterator>
inline __attribute__((host)) __attribute__((device))
  typename thrust::iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last)
{

  return thrust::system::detail::generic::detail::distance(first, last,
    typename thrust::iterator_traversal<InputIterator>::type());
}


}
}
}
}
# 43 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/distance.h" 2
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/distance.inl" 2


namespace thrust
{


template<typename InputIterator>
inline __attribute__((host)) __attribute__((device))
  typename thrust::iterator_traits<InputIterator>::difference_type
    distance(InputIterator first, InputIterator last)
{
  return thrust::system::detail::generic::distance(first, last);
}


}
# 77 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/distance.h" 2
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk.h"
       
# 47 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/bulk.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/bulk.hpp"
       

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/config.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/config.hpp"
       
# 36 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/config.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/version.h" 1
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/version.h"
       
# 76 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/version.h"
namespace thrust
{

}
# 37 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/config.hpp" 2
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/bulk.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/execution_policy.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/execution_policy.hpp"
       

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/future.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/future.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/guarded_cuda_runtime_api.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/guarded_cuda_runtime_api.hpp"
       
# 50 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/guarded_cuda_runtime_api.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/cuda_runtime_api.h" 1
# 51 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/guarded_cuda_runtime_api.hpp" 2
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/future.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/throw_on_error.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/throw_on_error.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/terminate.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/terminate.hpp"
       


# 1 "/usr/include/c++/4.8/cstdio" 1 3
# 39 "/usr/include/c++/4.8/cstdio" 3
       
# 40 "/usr/include/c++/4.8/cstdio" 3
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/terminate.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


__attribute__((host)) __attribute__((device))
inline void terminate()
{

  asm("trap;");



}


__attribute__((host)) __attribute__((device))
inline void terminate_with_message(const char* message)
{

  std::printf("%s\n", message);


  bulk_::detail::terminate();
}


__attribute__((host)) __attribute__((device))
inline void terminate_on_error(cudaError_t e, const char* message)
{
  if(e)
  {



    printf("Error: %s\n", message);

    bulk_::detail::terminate();
  }
}


}
}
} } } }
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/throw_on_error.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system_error.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system_error.h"
       



namespace thrust
{
# 40 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system_error.h"
namespace system
{
}




}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/errno.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/errno.h"
       
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/errno.h"
namespace thrust
{

namespace system
{

namespace detail
{

static const int eafnosupport = 9901;
static const int eaddrinuse = 9902;
static const int eaddrnotavail = 9903;
static const int eisconn = 9904;
static const int ebadmsg = 9905;
static const int econnaborted = 9906;
static const int ealready = 9907;
static const int econnrefused = 9908;
static const int econnreset = 9909;
static const int edestaddrreq = 9910;
static const int ehostunreach = 9911;
static const int eidrm = 9912;
static const int emsgsize = 9913;
static const int enetdown = 9914;
static const int enetreset = 9915;
static const int enetunreach = 9916;
static const int enobufs = 9917;
static const int enolink = 9918;
static const int enodata = 9919;
static const int enomsg = 9920;
static const int enoprotoopt = 9921;
static const int enosr = 9922;
static const int enotsock = 9923;
static const int enostr = 9924;
static const int enotconn = 9925;
static const int enotsup = 9926;
static const int ecanceled = 9927;
static const int einprogress = 9928;
static const int eopnotsupp = 9929;
static const int ewouldblock = 9930;
static const int eownerdead = 9931;
static const int eproto = 9932;
static const int eprotonosupport = 9933;
static const int enotrecoverable = 9934;
static const int etime = 9935;
static const int etxtbsy = 9936;
static const int etimedout = 9938;
static const int eloop = 9939;
static const int eoverflow = 9940;
static const int eprototype = 9941;
static const int enosys = 9942;
static const int einval = 9943;
static const int erange = 9944;
static const int eilseq = 9945;
static const int e2big = 9946;
static const int edom = 9947;
static const int efault = 9948;
static const int ebadf = 9949;
static const int epipe = 9950;
static const int exdev = 9951;
static const int ebusy = 9952;
static const int enotempty = 9953;
static const int enoexec = 9954;
static const int eexist = 9955;
static const int efbig = 9956;
static const int enametoolong = 9957;
static const int enotty = 9958;
static const int eintr = 9959;
static const int espipe = 9960;
static const int eio = 9961;
static const int eisdir = 9962;
static const int echild = 9963;
static const int enolck = 9964;
static const int enospc = 9965;
static const int enxio = 9966;
static const int enodev = 9967;
static const int enoent = 9968;
static const int esrch = 9969;
static const int enotdir = 9970;
static const int enomem = 9971;
static const int eperm = 9972;
static const int eacces = 9973;
static const int erofs = 9974;
static const int edeadlk = 9975;
static const int eagain = 9976;
static const int enfile = 9977;
static const int emfile = 9978;
static const int emlink = 9979;

}

}

}
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h" 2


namespace thrust
{

namespace system
{






class error_condition;
class error_code;



template<typename T> struct is_error_code_enum : public thrust::detail::false_type {};



template<typename T> struct is_error_condition_enum : public thrust::detail::false_type {};



namespace errc
{

enum errc_t
{
  address_family_not_supported = detail::eafnosupport,
  address_in_use = detail::eaddrinuse,
  address_not_available = detail::eaddrnotavail,
  already_connected = detail::eisconn,
  argument_list_too_long = detail::e2big,
  argument_out_of_domain = detail::edom,
  bad_address = detail::efault,
  bad_file_descriptor = detail::ebadf,
  bad_message = detail::ebadmsg,
  broken_pipe = detail::epipe,
  connection_aborted = detail::econnaborted,
  connection_already_in_progress = detail::ealready,
  connection_refused = detail::econnrefused,
  connection_reset = detail::econnreset,
  cross_device_link = detail::exdev,
  destination_address_required = detail::edestaddrreq,
  device_or_resource_busy = detail::ebusy,
  directory_not_empty = detail::enotempty,
  executable_format_error = detail::enoexec,
  file_exists = detail::eexist,
  file_too_large = detail::efbig,
  filename_too_long = detail::enametoolong,
  function_not_supported = detail::enosys,
  host_unreachable = detail::ehostunreach,
  identifier_removed = detail::eidrm,
  illegal_byte_sequence = detail::eilseq,
  inappropriate_io_control_operation = detail::enotty,
  interrupted = detail::eintr,
  invalid_argument = detail::einval,
  invalid_seek = detail::espipe,
  io_error = detail::eio,
  is_a_directory = detail::eisdir,
  message_size = detail::emsgsize,
  network_down = detail::enetdown,
  network_reset = detail::enetreset,
  network_unreachable = detail::enetunreach,
  no_buffer_space = detail::enobufs,
  no_child_process = detail::echild,
  no_link = detail::enolink,
  no_lock_available = detail::enolck,
  no_message_available = detail::enodata,
  no_message = detail::enomsg,
  no_protocol_option = detail::enoprotoopt,
  no_space_on_device = detail::enospc,
  no_stream_resources = detail::enosr,
  no_such_device_or_address = detail::enxio,
  no_such_device = detail::enodev,
  no_such_file_or_directory = detail::enoent,
  no_such_process = detail::esrch,
  not_a_directory = detail::enotdir,
  not_a_socket = detail::enotsock,
  not_a_stream = detail::enostr,
  not_connected = detail::enotconn,
  not_enough_memory = detail::enomem,
  not_supported = detail::enotsup,
  operation_canceled = detail::ecanceled,
  operation_in_progress = detail::einprogress,
  operation_not_permitted = detail::eperm,
  operation_not_supported = detail::eopnotsupp,
  operation_would_block = detail::ewouldblock,
  owner_dead = detail::eownerdead,
  permission_denied = detail::eacces,
  protocol_error = detail::eproto,
  protocol_not_supported = detail::eprotonosupport,
  read_only_file_system = detail::erofs,
  resource_deadlock_would_occur = detail::edeadlk,
  resource_unavailable_try_again = detail::eagain,
  result_out_of_range = detail::erange,
  state_not_recoverable = detail::enotrecoverable,
  stream_timeout = detail::etime,
  text_file_busy = detail::etxtbsy,
  timed_out = detail::etimedout,
  too_many_files_open_in_system = detail::enfile,
  too_many_files_open = detail::emfile,
  too_many_links = detail::emlink,
  too_many_symbolic_link_levels = detail::eloop,
  value_too_large = detail::eoverflow,
  wrong_protocol_type = detail::eprototype
};

}




template<> struct is_error_condition_enum<errc::errc_t> : public thrust::detail::true_type {};
# 154 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
class error_category
{
  public:


    inline virtual ~error_category(void);







    inline virtual const char *name(void) const = 0;



    inline virtual error_condition default_error_condition(int ev) const;



    inline virtual bool equivalent(int code, const error_condition &condition) const;



    inline virtual bool equivalent(const error_code &code, int condition) const;



    virtual std::string message(int ev) const = 0;



    inline bool operator==(const error_category &rhs) const;



    inline bool operator!=(const error_category &rhs) const;




    inline bool operator<(const error_category &rhs) const;
};
# 208 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
inline const error_category &generic_category(void);
# 222 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
inline const error_category &system_category(void);
# 232 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
class error_code
{
  public:





    inline error_code(void);




    inline error_code(int val, const error_category &cat);




    template <typename ErrorCodeEnum>
      error_code(ErrorCodeEnum e


        , typename thrust::detail::enable_if<is_error_code_enum<ErrorCodeEnum>::value>::type * = 0

        );





    inline void assign(int val, const error_category &cat);



    template <typename ErrorCodeEnum>


      typename thrust::detail::enable_if<is_error_code_enum<ErrorCodeEnum>::value, error_code>::type &



        operator=(ErrorCodeEnum e);



    inline void clear(void);





    inline int value(void) const;



    inline const error_category &category(void) const;



    inline error_condition default_error_condition(void) const;



    inline std::string message(void) const;






    inline operator bool (void) const;



  private:
    int m_val;
    const error_category *m_cat;


};
# 320 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
inline error_code make_error_code(errc::errc_t e);




inline bool operator<(const error_code &lhs, const error_code &rhs);




template <typename charT, typename traits>
  std::basic_ostream<charT,traits>&
    operator<<(std::basic_ostream<charT,traits>& os, const error_code &ec);
# 344 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
class error_condition
{
  public:






    inline error_condition(void);





    inline error_condition(int val, const error_category &cat);






    template<typename ErrorConditionEnum>
      error_condition(ErrorConditionEnum e


        , typename thrust::detail::enable_if<is_error_condition_enum<ErrorConditionEnum>::value>::type * = 0

                     );
# 382 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
    inline void assign(int val, const error_category &cat);







    template<typename ErrorConditionEnum>


      typename thrust::detail::enable_if<is_error_condition_enum<ErrorConditionEnum>::value, error_condition>::type &



        operator=(ErrorConditionEnum e);





    inline void clear(void);





    inline int value(void) const;



    inline const error_category &category(void) const;



    inline std::string message(void) const;






    inline operator bool (void) const;




  private:
    int m_val;
    const error_category *m_cat;



};
# 444 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h"
inline error_condition make_error_condition(errc::errc_t e);




inline bool operator<(const error_condition &lhs, const error_condition &rhs);







inline bool operator==(const error_code &lhs, const error_code &rhs);




inline bool operator==(const error_code &lhs, const error_condition &rhs);




inline bool operator==(const error_condition &lhs, const error_code &rhs);




inline bool operator==(const error_condition &lhs, const error_condition &rhs);




inline bool operator!=(const error_code &lhs, const error_code &rhs);




inline bool operator!=(const error_code &lhs, const error_condition &rhs);




inline bool operator!=(const error_condition &lhs, const error_code &rhs);




inline bool operator!=(const error_condition &lhs, const error_condition &rhs);





}



using system::error_category;
using system::error_code;
using system::error_condition;
using system::is_error_code_enum;
using system::is_error_condition_enum;
using system::make_error_code;
using system::make_error_condition;


namespace errc = system::errc;

using system::generic_category;
using system::system_category;

}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/error_category.inl" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/error_category.inl"
       




# 1 "/usr/include/c++/4.8/cstring" 1 3
# 39 "/usr/include/c++/4.8/cstring" 3
       
# 40 "/usr/include/c++/4.8/cstring" 3
# 71 "/usr/include/c++/4.8/cstring" 3
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;
# 120 "/usr/include/c++/4.8/cstring" 3

}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/error_category.inl" 2

namespace thrust
{

namespace system
{

error_category
  ::~error_category(void)
{
  ;
}


error_condition error_category
  ::default_error_condition(int ev) const
{
  return error_condition(ev, *this);
}


bool error_category
  ::equivalent(int code, const error_condition &condition) const
{
  return default_error_condition(code) == condition;
}


bool error_category
  ::equivalent(const error_code &code, int condition) const
{
  bool result = (this->operator==(code.category())) && (code.value() == condition);
  return result;
}


bool error_category
  ::operator==(const error_category &rhs) const
{
  return this == &rhs;
}


bool error_category
  ::operator!=(const error_category &rhs) const
{
  return !this->operator==(rhs);
}


bool error_category
  ::operator<(const error_category &rhs) const
{
  return thrust::less<const error_category*>()(this,&rhs);
}


namespace detail
{


class generic_error_category
  : public error_category
{
  public:
    inline generic_error_category(void) {}

    inline virtual const char *name(void) const
    {
      return "generic";
    }

    inline virtual std::string message(int ev) const
    {
      static const std::string unknown_err("Unknown error");



      const char *c_str = std::strerror(ev);
      return c_str ? std::string(c_str) : unknown_err;
    }
};


class system_error_category
  : public error_category
{
  public:
    inline system_error_category(void) {}

    inline virtual const char *name(void) const
    {
      return "system";
    }

    inline virtual std::string message(int ev) const
    {
      return generic_category().message(ev);
    }

    inline virtual error_condition default_error_condition(int ev) const
    {
      using namespace errc;

      switch(ev)
      {
        case eafnosupport: return make_error_condition(address_family_not_supported);
        case eaddrinuse: return make_error_condition(address_in_use);
        case eaddrnotavail: return make_error_condition(address_not_available);
        case eisconn: return make_error_condition(already_connected);
        case e2big: return make_error_condition(argument_list_too_long);
        case edom: return make_error_condition(argument_out_of_domain);
        case efault: return make_error_condition(bad_address);
        case ebadf: return make_error_condition(bad_file_descriptor);
        case ebadmsg: return make_error_condition(bad_message);
        case epipe: return make_error_condition(broken_pipe);
        case econnaborted: return make_error_condition(connection_aborted);
        case ealready: return make_error_condition(connection_already_in_progress);
        case econnrefused: return make_error_condition(connection_refused);
        case econnreset: return make_error_condition(connection_reset);
        case exdev: return make_error_condition(cross_device_link);
        case edestaddrreq: return make_error_condition(destination_address_required);
        case ebusy: return make_error_condition(device_or_resource_busy);
        case enotempty: return make_error_condition(directory_not_empty);
        case enoexec: return make_error_condition(executable_format_error);
        case eexist: return make_error_condition(file_exists);
        case efbig: return make_error_condition(file_too_large);
        case enametoolong: return make_error_condition(filename_too_long);
        case enosys: return make_error_condition(function_not_supported);
        case ehostunreach: return make_error_condition(host_unreachable);
        case eidrm: return make_error_condition(identifier_removed);
        case eilseq: return make_error_condition(illegal_byte_sequence);
        case enotty: return make_error_condition(inappropriate_io_control_operation);
        case eintr: return make_error_condition(interrupted);
        case einval: return make_error_condition(invalid_argument);
        case espipe: return make_error_condition(invalid_seek);
        case eio: return make_error_condition(io_error);
        case eisdir: return make_error_condition(is_a_directory);
        case emsgsize: return make_error_condition(message_size);
        case enetdown: return make_error_condition(network_down);
        case enetreset: return make_error_condition(network_reset);
        case enetunreach: return make_error_condition(network_unreachable);
        case enobufs: return make_error_condition(no_buffer_space);
        case echild: return make_error_condition(no_child_process);
        case enolink: return make_error_condition(no_link);
        case enolck: return make_error_condition(no_lock_available);
        case enodata: return make_error_condition(no_message_available);
        case enomsg: return make_error_condition(no_message);
        case enoprotoopt: return make_error_condition(no_protocol_option);
        case enospc: return make_error_condition(no_space_on_device);
        case enosr: return make_error_condition(no_stream_resources);
        case enxio: return make_error_condition(no_such_device_or_address);
        case enodev: return make_error_condition(no_such_device);
        case enoent: return make_error_condition(no_such_file_or_directory);
        case esrch: return make_error_condition(no_such_process);
        case enotdir: return make_error_condition(not_a_directory);
        case enotsock: return make_error_condition(not_a_socket);
        case enostr: return make_error_condition(not_a_stream);
        case enotconn: return make_error_condition(not_connected);
        case enomem: return make_error_condition(not_enough_memory);
        case enotsup: return make_error_condition(not_supported);
        case ecanceled: return make_error_condition(operation_canceled);
        case einprogress: return make_error_condition(operation_in_progress);
        case eperm: return make_error_condition(operation_not_permitted);
        case eopnotsupp: return make_error_condition(operation_not_supported);
        case ewouldblock: return make_error_condition(operation_would_block);
        case eownerdead: return make_error_condition(owner_dead);
        case eacces: return make_error_condition(permission_denied);
        case eproto: return make_error_condition(protocol_error);
        case eprotonosupport: return make_error_condition(protocol_not_supported);
        case erofs: return make_error_condition(read_only_file_system);
        case edeadlk: return make_error_condition(resource_deadlock_would_occur);
        case eagain: return make_error_condition(resource_unavailable_try_again);
        case erange: return make_error_condition(result_out_of_range);
        case enotrecoverable: return make_error_condition(state_not_recoverable);
        case etime: return make_error_condition(stream_timeout);
        case etxtbsy: return make_error_condition(text_file_busy);
        case etimedout: return make_error_condition(timed_out);
        case enfile: return make_error_condition(too_many_files_open_in_system);
        case emfile: return make_error_condition(too_many_files_open);
        case emlink: return make_error_condition(too_many_links);
        case eloop: return make_error_condition(too_many_symbolic_link_levels);
        case eoverflow: return make_error_condition(value_too_large);
        case eprototype: return make_error_condition(wrong_protocol_type);
        default: return error_condition(ev,system_category());
      }
    }
};


}


const error_category &generic_category(void)
{
  static const detail::generic_error_category result;
  return result;
}


const error_category &system_category(void)
{
  static const detail::system_error_category result;
  return result;
}


}

}
# 519 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/error_code.inl" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/error_code.inl"
       



namespace thrust
{

namespace system
{

error_code
  ::error_code(void)
    :m_val(0),m_cat(&system_category())
{
  ;
}


error_code
  ::error_code(int val, const error_category &cat)
    :m_val(val),m_cat(&cat)
{
  ;
}


template <typename ErrorCodeEnum>
  error_code
    ::error_code(ErrorCodeEnum e


                 , typename thrust::detail::enable_if<is_error_code_enum<ErrorCodeEnum>::value>::type *

                )
{
  *this = make_error_code(e);
}


void error_code
  ::assign(int val, const error_category &cat)
{
  m_val = val;
  m_cat = &cat;
}


template <typename ErrorCodeEnum>


  typename thrust::detail::enable_if<is_error_code_enum<ErrorCodeEnum>::value, error_code>::type &



    error_code
      ::operator=(ErrorCodeEnum e)
{
  *this = make_error_code(e);
  return *this;
}


void error_code
  ::clear(void)
{
  m_val = 0;
  m_cat = &system_category();
}


int error_code
  ::value(void) const
{
  return m_val;
}


const error_category &error_code
  ::category(void) const
{
  return *m_cat;
}


error_condition error_code
  ::default_error_condition(void) const
{
  return category().default_error_condition(value());
}


std::string error_code
  ::message(void) const
{
  return category().message(value());
}


error_code
  ::operator bool (void) const
{
  return value() != 0;
}


error_code make_error_code(errc::errc_t e)
{
  return error_code(static_cast<int>(e), generic_category());
}


bool operator<(const error_code &lhs, const error_code &rhs)
{
  bool result = lhs.category().operator<(rhs.category());
  result = result || lhs.category().operator==(rhs.category());
  result = result || lhs.value() < rhs.value();
  return result;
}


template<typename charT, typename traits>
  std::basic_ostream<charT,traits>&
    operator<<(std::basic_ostream<charT,traits> &os, const error_code &ec)
{
  return os << ec.category().name() << ':' << ec.value();
}


bool operator==(const error_code &lhs, const error_code &rhs)
{
  return lhs.category().operator==(rhs.category()) && lhs.value() == rhs.value();
}


bool operator==(const error_code &lhs, const error_condition &rhs)
{
  return lhs.category().equivalent(lhs.value(), rhs) || rhs.category().equivalent(lhs,rhs.value());
}


bool operator==(const error_condition &lhs, const error_code &rhs)
{
  return rhs.category().equivalent(lhs.value(), lhs) || lhs.category().equivalent(rhs, lhs.value());
}


bool operator==(const error_condition &lhs, const error_condition &rhs)
{
  return lhs.category().operator==(rhs.category()) && lhs.value() == rhs.value();
}


bool operator!=(const error_code &lhs, const error_code &rhs)
{
  return !(lhs == rhs);
}


bool operator!=(const error_code &lhs, const error_condition &rhs)
{
  return !(lhs == rhs);
}


bool operator!=(const error_condition &lhs, const error_code &rhs)
{
  return !(lhs == rhs);
}


bool operator!=(const error_condition &lhs, const error_condition &rhs)
{
  return !(lhs == rhs);
}


}

}
# 520 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/error_condition.inl" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/error_condition.inl"
       




namespace thrust
{

namespace system
{

error_condition
  ::error_condition(void)
    :m_val(0),m_cat(&generic_category())
{
  ;
}


error_condition
  ::error_condition(int val, const error_category &cat)
    :m_val(val),m_cat(&cat)
{
  ;
}


template<typename ErrorConditionEnum>
  error_condition
    ::error_condition(ErrorConditionEnum e


                      , typename thrust::detail::enable_if<is_error_condition_enum<ErrorConditionEnum>::value>::type *

                     )
{
  *this = make_error_condition(e);
}


void error_condition
  ::assign(int val, const error_category &cat)
{
  m_val = val;
  m_cat = &cat;
}


template<typename ErrorConditionEnum>


  typename thrust::detail::enable_if<is_error_condition_enum<ErrorConditionEnum>::value, error_condition>::type &



    error_condition
      ::operator=(ErrorConditionEnum e)
{
  *this = make_error_condition(e);
  return *this;
}


void error_condition
  ::clear(void)
{
  m_val = 0;
  m_cat = &generic_category();
}


int error_condition
  ::value(void) const
{
  return m_val;
}


const error_category &error_condition
  ::category(void) const
{
  return *m_cat;
}


std::string error_condition
  ::message(void) const
{
  return category().message(value());
}


error_condition
  ::operator bool (void) const
{
  return value() != 0;
}


error_condition make_error_condition(errc::errc_t e)
{
  return error_condition(static_cast<int>(e), generic_category());
}


bool operator<(const error_condition &lhs,
               const error_condition &rhs)
{
  return lhs.category().operator<(rhs.category()) || (lhs.category().operator==(rhs.category()) && (lhs.value() < rhs.value()));
}


}

}
# 521 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/error_code.h" 2
# 50 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system_error.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/system_error.h" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/system_error.h"
       


# 1 "/usr/include/c++/4.8/stdexcept" 1 3
# 36 "/usr/include/c++/4.8/stdexcept" 3
       
# 37 "/usr/include/c++/4.8/stdexcept" 3




namespace std __attribute__ ((__visibility__ ("default")))
{

# 55 "/usr/include/c++/4.8/stdexcept" 3
  class logic_error : public exception
  {
    string _M_msg;

  public:

    explicit
    logic_error(const string& __arg);

    virtual ~logic_error() throw();



    virtual const char*
    what() const throw();
  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg);
    virtual ~domain_error() throw();
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg);
    virtual ~invalid_argument() throw();
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg);
    virtual ~length_error() throw();
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg);
    virtual ~out_of_range() throw();
  };






  class runtime_error : public exception
  {
    string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg);

    virtual ~runtime_error() throw();



    virtual const char*
    what() const throw();
  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg);
    virtual ~range_error() throw();
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg);
    virtual ~overflow_error() throw();
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg);
    virtual ~underflow_error() throw();
  };




}
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/system_error.h" 2




namespace thrust
{

namespace system
{
# 89 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/system_error.h"
class system_error
  : public std::runtime_error
{
  public:
# 101 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/system_error.h"
    inline system_error(error_code ec, const std::string &what_arg);







    inline system_error(error_code ec, const char *what_arg);





    inline system_error(error_code ec);
# 124 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/system_error.h"
    inline system_error(int ev, const error_category &ecat, const std::string &what_arg);
# 133 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/system_error.h"
    inline system_error(int ev, const error_category &ecat, const char *what_arg);






    inline system_error(int ev, const error_category &ecat);



    inline virtual ~system_error(void) throw () {};





    inline const error_code &code(void) const throw();





    inline const char *what(void) const throw();



  private:
    error_code m_error_code;
    mutable std::string m_what;



};

}





using system::system_error;

}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/system_error.inl" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/system_error.inl"
       



namespace thrust
{

namespace system
{


system_error
  ::system_error(error_code ec, const std::string &what_arg)
    : std::runtime_error(what_arg), m_error_code(ec)
{

}


system_error
  ::system_error(error_code ec, const char *what_arg)
    : std::runtime_error(what_arg), m_error_code(ec)
{
  ;
}


system_error
  ::system_error(error_code ec)
    : std::runtime_error(""), m_error_code(ec)
{
  ;
}


system_error
  ::system_error(int ev, const error_category &ecat, const std::string &what_arg)
    : std::runtime_error(what_arg), m_error_code(ev,ecat)
{
  ;
}


system_error
  ::system_error(int ev, const error_category &ecat, const char *what_arg)
    : std::runtime_error(what_arg), m_error_code(ev,ecat)
{
  ;
}


system_error
  ::system_error(int ev, const error_category &ecat)
    : std::runtime_error(""), m_error_code(ev,ecat)
{
  ;
}


const error_code &system_error
  ::code(void) const throw()
{
  return m_error_code;
}


const char *system_error
  ::what(void) const throw()
{
  if(m_what.empty())
  {
    try
    {
      m_what = this->std::runtime_error::what();
      if(m_error_code)
      {
        if(!m_what.empty()) m_what += ": ";
        m_what += m_error_code.message();
      }
    }
    catch(...)
    {
      return std::runtime_error::what();
    }
  }

  return m_what.c_str();
}


}

}
# 179 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/system_error.h" 2
# 51 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system_error.h" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/throw_on_error.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/error.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/error.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/guarded_driver_types.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/guarded_driver_types.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/guarded_driver_types.h"
           




           
# 50 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/guarded_driver_types.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/driver_types.h" 1
# 51 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/guarded_driver_types.h" 2




           



           
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/error.h" 2

namespace thrust
{

namespace system
{

namespace cuda
{
# 47 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/error.h"
namespace errc
{



enum errc_t
{


  success = cudaSuccess,
  missing_configuration = cudaErrorMissingConfiguration,
  memory_allocation = cudaErrorMemoryAllocation,
  initialization_error = cudaErrorInitializationError,
  launch_failure = cudaErrorLaunchFailure,
  prior_launch_failure = cudaErrorPriorLaunchFailure,
  launch_timeout = cudaErrorLaunchTimeout,
  launch_out_of_resources = cudaErrorLaunchOutOfResources,
  invalid_device_function = cudaErrorInvalidDeviceFunction,
  invalid_configuration = cudaErrorInvalidConfiguration,
  invalid_device = cudaErrorInvalidDevice,
  invalid_value = cudaErrorInvalidValue,
  invalid_pitch_value = cudaErrorInvalidPitchValue,
  invalid_symbol = cudaErrorInvalidSymbol,
  map_buffer_object_failed = cudaErrorMapBufferObjectFailed,
  unmap_buffer_object_failed = cudaErrorUnmapBufferObjectFailed,
  invalid_host_pointer = cudaErrorInvalidHostPointer,
  invalid_device_pointer = cudaErrorInvalidDevicePointer,
  invalid_texture = cudaErrorInvalidTexture,
  invalid_texture_binding = cudaErrorInvalidTextureBinding,
  invalid_channel_descriptor = cudaErrorInvalidChannelDescriptor,
  invalid_memcpy_direction = cudaErrorInvalidMemcpyDirection,
  address_of_constant_error = cudaErrorAddressOfConstant,
  texture_fetch_failed = cudaErrorTextureFetchFailed,
  texture_not_bound = cudaErrorTextureNotBound,
  synchronization_error = cudaErrorSynchronizationError,
  invalid_filter_setting = cudaErrorInvalidFilterSetting,
  invalid_norm_setting = cudaErrorInvalidNormSetting,
  mixed_device_execution = cudaErrorMixedDeviceExecution,
  cuda_runtime_unloading = cudaErrorCudartUnloading,
  unknown = cudaErrorUnknown,
  not_yet_implemented = cudaErrorNotYetImplemented,
  memory_value_too_large = cudaErrorMemoryValueTooLarge,
  invalid_resource_handle = cudaErrorInvalidResourceHandle,
  not_ready = cudaErrorNotReady,
  insufficient_driver = cudaErrorInsufficientDriver,
  set_on_active_process_error = cudaErrorSetOnActiveProcess,
  no_device = cudaErrorNoDevice,
  ecc_uncorrectable = cudaErrorECCUncorrectable,


  shared_object_symbol_not_found = cudaErrorSharedObjectSymbolNotFound,
  shared_object_init_failed = cudaErrorSharedObjectInitFailed,
  unsupported_limit = cudaErrorUnsupportedLimit,
  duplicate_variable_name = cudaErrorDuplicateVariableName,
  duplicate_texture_name = cudaErrorDuplicateTextureName,
  duplicate_surface_name = cudaErrorDuplicateSurfaceName,
  devices_unavailable = cudaErrorDevicesUnavailable,
  invalid_kernel_image = cudaErrorInvalidKernelImage,
  no_kernel_image_for_device = cudaErrorNoKernelImageForDevice,
  incompatible_driver_context = cudaErrorIncompatibleDriverContext,
  peer_access_already_enabled = cudaErrorPeerAccessAlreadyEnabled,
  peer_access_not_enabled = cudaErrorPeerAccessNotEnabled,
  device_already_in_use = cudaErrorDeviceAlreadyInUse,
  profiler_disabled = cudaErrorProfilerDisabled,
  assert_triggered = cudaErrorAssert,
  too_many_peers = cudaErrorTooManyPeers,
  host_memory_already_registered = cudaErrorHostMemoryAlreadyRegistered,
  host_memory_not_registered = cudaErrorHostMemoryNotRegistered,
  operating_system_error = cudaErrorOperatingSystem,



  peer_access_unsupported = cudaErrorPeerAccessUnsupported,
  launch_max_depth_exceeded = cudaErrorLaunchMaxDepthExceeded,
  launch_file_scoped_texture_used = cudaErrorLaunchFileScopedTex,
  launch_file_scoped_surface_used = cudaErrorLaunchFileScopedSurf,
  sync_depth_exceeded = cudaErrorSyncDepthExceeded,
  attempted_operation_not_permitted = cudaErrorNotPermitted,
  attempted_operation_not_supported = cudaErrorNotSupported,


  startup_failure = cudaErrorStartupFailure
};


}

}
# 146 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/error.h"
inline const error_category &cuda_category(void);






template<> struct is_error_code_enum<cuda::errc::errc_t> : thrust::detail::true_type {};





inline error_code make_error_code(cuda::errc::errc_t e);





inline error_condition make_error_condition(cuda::errc::errc_t e);





}

namespace cuda
{


namespace errc = system::cuda::errc;

}

using system::cuda_category;

}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/error.inl" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/error.inl"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/guarded_cuda_runtime_api.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/guarded_cuda_runtime_api.h"
       
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/error.inl" 2

namespace thrust
{

namespace system
{


error_code make_error_code(cuda::errc::errc_t e)
{
  return error_code(static_cast<int>(e), cuda_category());
}


error_condition make_error_condition(cuda::errc::errc_t e)
{
  return error_condition(static_cast<int>(e), cuda_category());
}


namespace cuda
{

namespace detail
{


class cuda_error_category
  : public error_category
{
  public:
    inline cuda_error_category(void) {}

    inline virtual const char *name(void) const
    {
      return "cuda";
    }

    inline virtual std::string message(int ev) const
    {
      static const std::string unknown_err("Unknown error");
      const char *c_str = ::cudaGetErrorString(static_cast<cudaError_t>(ev));
      return c_str ? std::string(c_str) : unknown_err;
    }

    inline virtual error_condition default_error_condition(int ev) const
    {
      using namespace cuda::errc;

      if(ev < ::cudaErrorApiFailureBase)
      {
        return make_error_condition(static_cast<errc_t>(ev));
      }

      return system_category().default_error_condition(ev);
    }
};

}

}


const error_category &cuda_category(void)
{
  static const cuda::detail::cuda_error_category result;
  return result;
}


}

}
# 186 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/error.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/throw_on_error.hpp" 2
# 1 "/usr/include/c++/4.8/cstdio" 1 3
# 39 "/usr/include/c++/4.8/cstdio" 3
       
# 40 "/usr/include/c++/4.8/cstdio" 3
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/throw_on_error.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


inline __attribute__((host)) __attribute__((device))
void throw_on_error(cudaError_t e, const char *message)
{
  if(e)
  {






    printf("Error: %s\n", message);

    bulk_::detail::terminate();

  }
}


}
}
} } } }
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/future.hpp" 2






namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


struct future_core_access;


}


template<typename T> class future;


template<>
class future<void>
{
  public:
    __attribute__((host)) __attribute__((device))
    ~future()
    {
      if(valid())
      {
# 76 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/future.hpp"
      }
    }

    __attribute__((host)) __attribute__((device))
    void wait() const
    {
# 96 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/future.hpp"
      bulk_::detail::terminate();

    }

    __attribute__((host)) __attribute__((device))
    bool valid() const
    {
      return m_event != 0;
    }

    __attribute__((host)) __attribute__((device))
    future()
      : m_stream(0), m_event(0), m_owns_stream(false)
    {}



    __attribute__((host)) __attribute__((device))
    future(const future &other)
      : m_stream(0), m_event(0), m_owns_stream(false)
    {
      thrust::swap(m_stream, const_cast<future&>(other).m_stream);
      thrust::swap(m_event, const_cast<future&>(other).m_event);
      thrust::swap(m_owns_stream, const_cast<future&>(other).m_owns_stream);
    }



    __attribute__((host)) __attribute__((device))
    future &operator=(const future &other)
    {
      thrust::swap(m_stream, const_cast<future&>(other).m_stream);
      thrust::swap(m_event, const_cast<future&>(other).m_event);
      thrust::swap(m_owns_stream, const_cast<future&>(other).m_owns_stream);
      return *this;
    }

  private:
    friend struct detail::future_core_access;

    __attribute__((host)) __attribute__((device))
    future(cudaStream_t s, bool owns_stream)
      : m_stream(s),m_owns_stream(owns_stream)
    {




    }



    static const int create_flags = 0x02;

    cudaStream_t m_stream;
    cudaEvent_t m_event;
    bool m_owns_stream;
};


namespace detail
{


struct future_core_access
{
  __attribute__((host)) __attribute__((device))
  inline static future<void> create(cudaStream_t s, bool owns_stream)
  {
    return future<void>(s, owns_stream);
  }

  __attribute__((host)) __attribute__((device))
  inline static cudaEvent_t event(const future<void> &f)
  {
    return f.m_event;
  }
};


}


}
} } } }
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/execution_policy.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.hpp"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launch_config.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launch_config.hpp"
       




# 1 "/usr/include/c++/4.8/cstddef" 1 3
# 39 "/usr/include/c++/4.8/cstddef" 3
       
# 40 "/usr/include/c++/4.8/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 42 "/usr/include/c++/4.8/cstddef" 2 3
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launch_config.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/minmax.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/minmax.h"
       



namespace thrust
{


template<typename T, typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  T min (const T &lhs, const T &rhs, BinaryPredicate comp)
{
  return comp(rhs, lhs) ? rhs : lhs;
}

template<typename T>
__attribute__((host)) __attribute__((device))
  T min (const T &lhs, const T &rhs)
{
  return rhs < lhs ? rhs : lhs;
}

template<typename T, typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  T max (const T &lhs, const T &rhs, BinaryPredicate comp)
{
  return comp(lhs,rhs) ? rhs : lhs;
}

template<typename T>
__attribute__((host)) __attribute__((device))
  T max (const T &lhs, const T &rhs)
{
  return lhs < rhs ? rhs : lhs;
}


}
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launch_config.hpp" 2

namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{




struct device_properties_t
{


  int major;
  int maxGridSize[3];
  int maxThreadsPerBlock;
  int maxThreadsPerMultiProcessor;
  int minor;
  int multiProcessorCount;
  int regsPerBlock;
  size_t sharedMemPerBlock;
  int warpSize;
};




struct function_attributes_t
{


  size_t constSizeBytes;
  size_t localSizeBytes;
  int maxThreadsPerBlock;
  int numRegs;
  int ptxVersion;
  size_t sharedSizeBytes;
};
# 74 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launch_config.hpp"
inline __attribute__((host)) __attribute__((device))
std::size_t block_size_with_maximum_potential_occupancy(const function_attributes_t &attributes,
                                                        const device_properties_t &properties);
# 89 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launch_config.hpp"
template<typename UnaryFunction>
inline __attribute__((host)) __attribute__((device))
std::size_t block_size_with_maximum_potential_occupancy(const function_attributes_t &attributes,
                                                        const device_properties_t &properties,
                                                        UnaryFunction block_size_to_dynamic_smem_size);
# 103 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launch_config.hpp"
inline __attribute__((host)) __attribute__((device))
size_t proportional_smem_allocation(const device_properties_t &properties,
                                    const function_attributes_t &attributes,
                                    size_t blocks_per_processor);


template<typename UnaryFunction>
inline __attribute__((host)) __attribute__((device))
size_t max_blocksize_subject_to_smem_usage(const device_properties_t &properties,
                                           const function_attributes_t &attributes,
                                           UnaryFunction blocksize_to_dynamic_smem_usage);



namespace cuda_launch_config_detail
{

using std::size_t;

namespace util
{


template<typename T>
inline __attribute__((host)) __attribute__((device))
T min_(const T &lhs, const T &rhs)
{
  return rhs < lhs ? rhs : lhs;
}


template <typename T>
struct zero_function
{
  inline __attribute__((host)) __attribute__((device))
  T operator()(T)
  {
    return 0;
  }
};



template<typename L, typename R>
  inline __attribute__((host)) __attribute__((device)) L divide_ri(const L x, const R y)
{
    return (x + (y - 1)) / y;
}


template<typename L, typename R>
  inline __attribute__((host)) __attribute__((device)) L divide_rz(const L x, const R y)
{
    return x / y;
}


template<typename L, typename R>
  inline __attribute__((host)) __attribute__((device)) L round_i(const L x, const R y){ return y * divide_ri(x, y); }


template<typename L, typename R>
  inline __attribute__((host)) __attribute__((device)) L round_z(const L x, const R y){ return y * divide_rz(x, y); }

}




inline __attribute__((host)) __attribute__((device))
size_t smem_allocation_unit(const device_properties_t &properties)
{
  switch(properties.major)
  {
    case 1: return 512;
    case 2: return 128;
    case 3: return 256;
    default: return 256;
  }
}



inline __attribute__((host)) __attribute__((device))
int reg_allocation_unit(const device_properties_t &properties, const size_t regsPerThread)
{
  switch(properties.major)
  {
    case 1: return (properties.minor <= 1) ? 256 : 512;
    case 2: switch(regsPerThread)
             {
               case 21:
               case 22:
               case 29:
               case 30:
               case 37:
               case 38:
               case 45:
               case 46:
                 return 128;
               default:
                 return 64;
             }
    case 3: return 256;
    default: return 256;
  }
}



inline __attribute__((host)) __attribute__((device))
size_t warp_allocation_multiple(const device_properties_t &properties)
{
  return (properties.major <= 1) ? 2 : 1;
}


inline __attribute__((host)) __attribute__((device))
size_t num_sides_per_multiprocessor(const device_properties_t &properties)
{
  switch(properties.major)
  {
    case 1: return 1;
    case 2: return 2;
    case 3: return 4;
    default: return 4;
  }
}


inline __attribute__((host)) __attribute__((device))
size_t max_blocks_per_multiprocessor(const device_properties_t &properties)
{
  return (properties.major <= 2) ? 8 : 16;
}


inline __attribute__((host)) __attribute__((device))
size_t max_active_blocks_per_multiprocessor(const device_properties_t &properties,
                                            const function_attributes_t &attributes,
                                            size_t CTA_SIZE,
                                            size_t dynamic_smem_bytes)
{






  const size_t maxThreadsPerSM = properties.maxThreadsPerMultiProcessor;
  const size_t maxBlocksPerSM = max_blocks_per_multiprocessor(properties);


  const size_t ctaLimitThreads = (CTA_SIZE <= size_t(properties.maxThreadsPerBlock)) ? maxThreadsPerSM / CTA_SIZE : 0;
  const size_t ctaLimitBlocks = maxBlocksPerSM;




  const size_t smemAllocationUnit = smem_allocation_unit(properties);
  const size_t smemBytes = attributes.sharedSizeBytes + dynamic_smem_bytes;
  const size_t smemPerCTA = util::round_i(smemBytes, smemAllocationUnit);


  const size_t ctaLimitSMem = smemPerCTA > 0 ? properties.sharedMemPerBlock / smemPerCTA : maxBlocksPerSM;




  const int regAllocationUnit = reg_allocation_unit(properties, attributes.numRegs);
  const size_t warpAllocationMultiple = warp_allocation_multiple(properties);
  const size_t numWarps = util::round_i(util::divide_ri(CTA_SIZE, properties.warpSize), warpAllocationMultiple);


  size_t ctaLimitRegs;
  if(properties.major <= 1)
  {


    const size_t regsPerCTA = util::round_i(attributes.numRegs * properties.warpSize * numWarps, regAllocationUnit);
    ctaLimitRegs = regsPerCTA > 0 ? properties.regsPerBlock / regsPerCTA : maxBlocksPerSM;
  }
  else
  {


    const size_t regsPerWarp = util::round_i(attributes.numRegs * properties.warpSize, regAllocationUnit);
    const size_t numSides = num_sides_per_multiprocessor(properties);
    const size_t numRegsPerSide = properties.regsPerBlock / numSides;
    ctaLimitRegs = regsPerWarp > 0 ? ((numRegsPerSide / regsPerWarp) * numSides) / numWarps : maxBlocksPerSM;
  }




  return util::min_(ctaLimitRegs, util::min_(ctaLimitSMem, util::min_(ctaLimitThreads, ctaLimitBlocks)));
}


}


template<typename UnaryFunction>
inline __attribute__((host)) __attribute__((device))
std::size_t block_size_with_maximum_potential_occupancy(const function_attributes_t &attributes,
                                                        const device_properties_t &properties,
                                                        UnaryFunction block_size_to_dynamic_smem_size)
{
  size_t max_occupancy = properties.maxThreadsPerMultiProcessor;
  size_t largest_blocksize = cuda_launch_config_detail::util::min_(properties.maxThreadsPerBlock, attributes.maxThreadsPerBlock);
  size_t granularity = properties.warpSize;
  size_t max_blocksize = 0;
  size_t highest_occupancy = 0;

  for(size_t blocksize = largest_blocksize; blocksize != 0; blocksize -= granularity)
  {
    size_t occupancy = blocksize * cuda_launch_config_detail::max_active_blocks_per_multiprocessor(properties, attributes, blocksize, block_size_to_dynamic_smem_size(blocksize));

    if(occupancy > highest_occupancy)
    {
      max_blocksize = blocksize;
      highest_occupancy = occupancy;
    }


    if(highest_occupancy == max_occupancy)
      break;
  }

  return max_blocksize;
}


inline __attribute__((host)) __attribute__((device))
std::size_t block_size_with_maximum_potential_occupancy(const function_attributes_t &attributes,
                                                        const device_properties_t &properties)
{
  return block_size_with_maximum_potential_occupancy(attributes, properties, cuda_launch_config_detail::util::zero_function<std::size_t>());
}


inline __attribute__((host)) __attribute__((device))
size_t proportional_smem_allocation(const device_properties_t &properties,
                                    const function_attributes_t &attributes,
                                    size_t blocks_per_processor)
{
  size_t smem_per_processor = properties.sharedMemPerBlock;
  size_t smem_allocation_unit = cuda_launch_config_detail::smem_allocation_unit(properties);

  size_t total_smem_per_block = cuda_launch_config_detail::util::round_z(smem_per_processor / blocks_per_processor, smem_allocation_unit);
  size_t static_smem_per_block = attributes.sharedSizeBytes;

  return total_smem_per_block - static_smem_per_block;
}


template<typename UnaryFunction>
inline __attribute__((host)) __attribute__((device))
size_t max_blocksize_subject_to_smem_usage(const device_properties_t &properties,
                                           const function_attributes_t &attributes,
                                           UnaryFunction blocksize_to_dynamic_smem_usage)
{
  size_t largest_blocksize = (thrust::min)(properties.maxThreadsPerBlock, attributes.maxThreadsPerBlock);
  size_t granularity = properties.warpSize;

  for(int blocksize = largest_blocksize; blocksize > 0; blocksize -= granularity)
  {
    size_t total_smem_usage = blocksize_to_dynamic_smem_usage(blocksize) + attributes.sharedSizeBytes;

    if(total_smem_usage <= properties.sharedMemPerBlock)
    {
      return blocksize;
    }
  }

  return 0;
}


}
}
} } } }
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.hpp" 2


# 1 "/usr/include/c++/4.8/cstddef" 1 3
# 39 "/usr/include/c++/4.8/cstddef" 3
       
# 40 "/usr/include/c++/4.8/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 42 "/usr/include/c++/4.8/cstddef" 2 3
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.hpp" 2
# 81 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.hpp"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/util/blocking.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/util/blocking.h"
       



namespace thrust
{

namespace detail
{

namespace util
{


template<typename L, typename R>
  inline __attribute__((host)) __attribute__((device)) L divide_ri(const L x, const R y)
{
    return (x + (y - 1)) / y;
}


template<typename L, typename R>
  inline __attribute__((host)) __attribute__((device)) L divide_rz(const L x, const R y)
{
    return x / y;
}


template<typename L, typename R>
  inline __attribute__((host)) __attribute__((device)) L round_i(const L x, const R y){ return y * divide_ri(x, y); }


template<typename L, typename R>
  inline __attribute__((host)) __attribute__((device)) L round_z(const L x, const R y){ return y * divide_rz(x, y); }

}

}

}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.inl" 2





namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


__attribute__((host)) __attribute__((device))
inline device_properties_t device_properties_uncached(int device_id)
{
  device_properties_t prop = {0,{0,0,0},0,0,0,0,0,0,0};

  cudaError_t error = cudaErrorNoDevice;
# 56 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.inl"
  (void) device_id;


  throw_on_error(error, "cudaDeviceGetProperty in get_device_properties");

  return prop;
}


inline device_properties_t device_properties_cached(int device_id)
{


  static const int max_num_devices = 16;

  static bool properties_exist[max_num_devices] = {0};
  static device_properties_t device_properties[max_num_devices] = {};

  if(device_id >= max_num_devices)
  {
    return device_properties_uncached(device_id);
  }

  if(!properties_exist[device_id])
  {
    device_properties[device_id] = device_properties_uncached(device_id);



    __sync_synchronize();

    properties_exist[device_id] = true;
  }

  return device_properties[device_id];
}


__attribute__((host)) __attribute__((device))
inline device_properties_t device_properties(int device_id)
{



  return device_properties_uncached(device_id);

}


__attribute__((host)) __attribute__((device))
inline int current_device()
{
  int result = -1;





  if(result < 0)
  {
    bulk_::detail::throw_on_error(cudaErrorNoDevice, "current_device(): after cudaGetDevice");
  }

  return result;
}


__attribute__((host)) __attribute__((device))
inline device_properties_t device_properties()
{
  return device_properties(current_device());
}


template <typename KernelFunction>
__attribute__((host)) __attribute__((device))
inline function_attributes_t function_attributes(KernelFunction kernel)
{
# 155 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.inl"
  return function_attributes_t();

}

__attribute__((host)) __attribute__((device))
inline size_t compute_capability(const device_properties_t &properties)
{
  return 10 * properties.major + properties.minor;
}


__attribute__((host)) __attribute__((device))
inline size_t compute_capability()
{
  return compute_capability(device_properties());
}


}
}
} } } }
# 82 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/runtime_introspection.hpp" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/execution_policy.hpp" 2
# 1 "/usr/include/c++/4.8/cstddef" 1 3
# 39 "/usr/include/c++/4.8/cstddef" 3
       
# 40 "/usr/include/c++/4.8/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 42 "/usr/include/c++/4.8/cstddef" 2 3
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/execution_policy.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
# 57 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/execution_policy.hpp"
static const int invalid_index = 2147483647;




template<std::size_t grainsize_ = 1>
class agent
{
  public:
    typedef int size_type;

    static const size_type static_grainsize = grainsize_;

    __attribute__((host)) __attribute__((device))
    agent(size_type i = invalid_index)
      : m_index(i)
    {}

    __attribute__((host)) __attribute__((device))
    size_type index() const
    {
      return m_index;
    }

    __attribute__((host)) __attribute__((device))
    size_type grainsize() const
    {
      return static_grainsize;
    }

  private:
    const size_type m_index;
};


static const int use_default = 2147483647;

static const int dynamic_group_size = 0;


namespace detail
{
namespace group_detail
{


template<typename ExecutionAgent, std::size_t size_>
class group_base
{
  public:
    typedef ExecutionAgent agent_type;

    typedef int size_type;

    static const size_type static_size = size_;

    __attribute__((host)) __attribute__((device))
    group_base(agent_type exec = agent_type(), size_type i = invalid_index)
      : this_exec(exec),
        m_index(i)
    {}

    __attribute__((host)) __attribute__((device))
    size_type index() const
    {
      return m_index;
    }

    __attribute__((host)) __attribute__((device))
    size_type size() const
    {
      return static_size;
    }

    __attribute__((device))
    size_type global_index() const
    {
      return index() * size() + this_exec.index();
    }

    agent_type this_exec;

  private:
    const size_type m_index;
};


template<typename ExecutionAgent>
class group_base<ExecutionAgent,dynamic_group_size>
{
  public:
    typedef ExecutionAgent agent_type;

    typedef int size_type;

    __attribute__((host)) __attribute__((device))
    group_base(size_type sz, agent_type exec = agent_type(), size_type i = invalid_index)
      : this_exec(exec),
        m_size(sz),
        m_index(i)
    {}

    __attribute__((host)) __attribute__((device))
    size_type index() const
    {
      return m_index;
    }

    __attribute__((host)) __attribute__((device))
    size_type size() const
    {
      return m_size;
    }

    __attribute__((host)) __attribute__((device))
    size_type global_index() const
    {
      return index() * size() + this_exec.index();
    }

    agent_type this_exec;

  private:
    const size_type m_size;
    const size_type m_index;
};


}
}



template<typename ExecutionAgent = agent<>,
         std::size_t size_ = dynamic_group_size>
class parallel_group
  : public detail::group_detail::group_base<ExecutionAgent,size_>
{
  private:
    typedef detail::group_detail::group_base<
      ExecutionAgent,
      size_
    > super_t;

  public:
    typedef typename super_t::agent_type agent_type;

    typedef typename super_t::size_type size_type;


    __attribute__((host)) __attribute__((device))
    parallel_group(agent_type exec = agent_type(), size_type i = invalid_index)
      : super_t(exec,i)
    {}
};


template<typename ExecutionAgent>
class parallel_group<ExecutionAgent,dynamic_group_size>
  : public detail::group_detail::group_base<ExecutionAgent,dynamic_group_size>
{
  private:
    typedef detail::group_detail::group_base<
      ExecutionAgent,
      dynamic_group_size
    > super_t;

  public:
    typedef typename super_t::agent_type agent_type;

    typedef typename super_t::size_type size_type;


    __attribute__((host)) __attribute__((device))
    parallel_group(size_type size, agent_type exec = agent_type(), size_type i = invalid_index)
      : super_t(size,exec,i)
    {}
};



inline __attribute__((host)) __attribute__((device))
parallel_group<> par(size_t size)
{
  return parallel_group<>(size);
}



template<typename ExecutionAgent>
__attribute__((host)) __attribute__((device))
parallel_group<ExecutionAgent> par(ExecutionAgent exec, size_t size)
{
  return parallel_group<ExecutionAgent>(size, exec);
}


template<typename ExecutionAgent>
class async_launch
{
  public:
    __attribute__((host)) __attribute__((device))
    async_launch(ExecutionAgent exec, cudaStream_t s, cudaEvent_t be = 0)
      : stream_valid(true),e(exec),s(s),be(be)
    {}

    __attribute__((host))
    async_launch(ExecutionAgent exec, cudaEvent_t be)
      : stream_valid(false),e(exec),s(0),be(be)
    {}

    __attribute__((host)) __attribute__((device))
    ExecutionAgent exec() const
    {
      return e;
    }

    __attribute__((host)) __attribute__((device))
    cudaStream_t stream() const
    {
      return s;
    }

    __attribute__((host)) __attribute__((device))
    cudaEvent_t before_event() const
    {
      return be;
    }

    __attribute__((host)) __attribute__((device))
    bool is_stream_valid() const
    {
      return stream_valid;
    }

  private:
    bool stream_valid;
    ExecutionAgent e;
    cudaStream_t s;
    cudaEvent_t be;
};


inline __attribute__((host)) __attribute__((device))
async_launch<bulk_::parallel_group<> > par(cudaStream_t s, size_t num_threads)
{
  return async_launch<bulk_::parallel_group<> >(bulk_::parallel_group<>(num_threads), s);
}


template<typename ExecutionAgent>
inline __attribute__((host)) __attribute__((device))
async_launch<bulk_::parallel_group<ExecutionAgent> > par(cudaStream_t s, ExecutionAgent exec, size_t num_groups)
{
  return async_launch<bulk_::parallel_group<ExecutionAgent> >(bulk_::par(exec, num_groups), s);
}


inline async_launch<bulk_::parallel_group<> > par(bulk_::future<void> &before, size_t num_threads)
{
  cudaEvent_t before_event = bulk_::detail::future_core_access::event(before);

  return async_launch<bulk_::parallel_group<> >(bulk_::parallel_group<>(num_threads), before_event);
}



template<typename ExecutionAgent = agent<>,
         std::size_t size_ = dynamic_group_size>
class concurrent_group
  : public parallel_group<ExecutionAgent,size_>
{
  private:
    typedef parallel_group<
      ExecutionAgent,
      size_
    > super_t;

  public:
    typedef typename super_t::agent_type agent_type;
    typedef typename super_t::size_type size_type;


    __attribute__((host)) __attribute__((device))
    concurrent_group(size_type heap_size = use_default,
                     agent_type exec = agent_type(),
                     size_type i = invalid_index)
      : super_t(exec,i),
        m_heap_size(heap_size)
    {}

    __attribute__((device))
    void wait() const
    {


      __syncthreads();

    }

    __attribute__((host)) __attribute__((device))
    size_type heap_size() const
    {
      return m_heap_size;
    }


    __attribute__((host)) __attribute__((device))
    inline static size_type hardware_concurrency()
    {



      return 0;

    }

  private:
    size_type m_heap_size;
};


template<typename ExecutionAgent>
class concurrent_group<ExecutionAgent,dynamic_group_size>
  : public parallel_group<ExecutionAgent,dynamic_group_size>
{
  private:
    typedef parallel_group<
      ExecutionAgent,
      dynamic_group_size
    > super_t;

  public:
    typedef typename super_t::agent_type agent_type;

    typedef typename super_t::size_type size_type;


    __attribute__((host)) __attribute__((device))
    concurrent_group(size_type size,
                     size_type heap_size = use_default,
                     agent_type exec = agent_type(),
                     size_type i = invalid_index)
      : super_t(size,exec,i),
        m_heap_size(heap_size)
    {}

    __attribute__((device))
    void wait()
    {


      __syncthreads();

    }

    __attribute__((host)) __attribute__((device))
    size_type heap_size() const
    {
      return m_heap_size;
    }


    __attribute__((host)) __attribute__((device))
    inline static size_type hardware_concurrency()
    {



      return 0;

    }

  private:
    size_type m_heap_size;
};



inline __attribute__((host)) __attribute__((device))
concurrent_group<> con(size_t size, size_t heap_size = use_default)
{
  return concurrent_group<>(size,heap_size);
}



template<typename ExecutionAgent>
__attribute__((host)) __attribute__((device))
concurrent_group<ExecutionAgent> con(ExecutionAgent exec, size_t size, size_t heap_size = use_default)
{
  return concurrent_group<ExecutionAgent>(size,heap_size,exec);
}



template<std::size_t groupsize, std::size_t grainsize>
__attribute__((host)) __attribute__((device))
concurrent_group<bulk_::agent<grainsize>,groupsize>
con(size_t heap_size)
{
  return concurrent_group<bulk_::agent<grainsize>,groupsize>(heap_size);
}



template<std::size_t bound_, typename ExecutionAgent>
class bounded
  : public ExecutionAgent
{
  public:
    typedef typename ExecutionAgent::size_type size_type;

    static const size_type static_bound = bound_;

    __attribute__((host)) __attribute__((device))
    size_type bound() const
    {
      return static_bound;
    }


    __attribute__((host)) __attribute__((device))
    ExecutionAgent &unbound()
    {
      return *this;
    }


    __attribute__((host)) __attribute__((device))
    const ExecutionAgent &unbound() const
    {
      return *this;
    }


  private:

    bounded();

    bounded(const bounded &);
};


template<std::size_t bound_, typename ExecutionAgent>
__attribute__((host)) __attribute__((device))
bounded<bound_, ExecutionAgent> &bound(ExecutionAgent &exec)
{
  return static_cast<bounded<bound_, ExecutionAgent>&>(exec);
}


template<std::size_t bound_, typename ExecutionAgent>
__attribute__((host)) __attribute__((device))
const bounded<bound_, ExecutionAgent> &bound(const ExecutionAgent &exec)
{
  return static_cast<const bounded<bound_, ExecutionAgent>&>(exec);
}


namespace detail
{


template<unsigned int depth, typename ExecutionAgent>
struct agent_at_depth
{
  typedef typename agent_at_depth<
    depth-1,ExecutionAgent
  >::type parent_agent_type;

  typedef typename parent_agent_type::agent_type type;
};


template<typename ExecutionAgent>
struct agent_at_depth<0,ExecutionAgent>
{
  typedef ExecutionAgent type;
};


template<typename Cursor, typename ExecutionGroup>
struct cursor_result
{
  typedef typename agent_at_depth<Cursor::depth,ExecutionGroup>::type & type;
};


template<unsigned int d> struct cursor;


template<unsigned int d>
struct cursor
{
  static const unsigned int depth = d;

  __attribute__((host)) __attribute__((device)) cursor() {}

  cursor<depth+1> this_exec;

  template<typename ExecutionGroup>
  static __attribute__((host)) __attribute__((device))
  typename cursor_result<cursor,ExecutionGroup>::type
  get(ExecutionGroup &root)
  {
    return cursor<depth-1>::get(root.this_exec);
  }
};


template<> struct cursor<3>
{
  static const unsigned int depth = 3;

  __attribute__((host)) __attribute__((device)) cursor() {}

  template<typename ExecutionGroup>
  static __attribute__((host)) __attribute__((device))
  typename cursor_result<cursor,ExecutionGroup>::type
  get(ExecutionGroup &root)
  {
    return cursor<depth-1>::get(root.this_exec);
  }
};


template<> struct cursor<0>
{
  static const unsigned int depth = 0;

  __attribute__((host)) __attribute__((device)) cursor() {}

  cursor<1> this_exec;


  template<typename ExecutionAgent>
  static __attribute__((host)) __attribute__((device))
  ExecutionAgent &get(ExecutionAgent &root)
  {
    return root;
  }
};


template<typename T> struct is_cursor : thrust::detail::false_type {};


template<unsigned int d>
struct is_cursor<cursor<d> >
  : thrust::detail::true_type
{};


}



static const __attribute__((device)) detail::cursor<0> root;






inline __attribute__((host)) __attribute__((device))
parallel_group<concurrent_group<> > grid(size_t num_groups = use_default, size_t group_size = use_default, size_t heap_size = use_default)
{
  return par(con(group_size,heap_size), num_groups);
}




inline __attribute__((host)) __attribute__((device))
async_launch<
  parallel_group<concurrent_group<> >
>
  grid(size_t num_groups, size_t group_size, size_t heap_size, cudaStream_t stream)
{
  return par(stream, con(group_size,heap_size), num_groups);
}


template<std::size_t groupsize, std::size_t grainsize>
__attribute__((host)) __attribute__((device))
parallel_group<
  concurrent_group<
    bulk_::agent<grainsize>,
    groupsize
  >
>
  grid(size_t num_groups, size_t heap_size = use_default)
{
  return par(con<groupsize,grainsize>(heap_size), num_groups);
}


template<std::size_t groupsize, std::size_t grainsize>
__attribute__((host)) __attribute__((device))
async_launch<
  parallel_group<
    concurrent_group<
      bulk_::agent<grainsize>,
      groupsize
    >
  >
>
  grid(size_t num_groups, size_t heap_size, cudaStream_t stream)
{
  return par(stream, con<groupsize,grainsize>(heap_size), num_groups);
}


}
} } } }
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/bulk.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/choose_sizes.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/choose_sizes.hpp"
       






namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<typename Function>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f);


template<typename Function, typename Arg1>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1);


template<typename Function, typename Arg1, typename Arg2>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2);


template<typename Function, typename Arg1, typename Arg2, typename Arg3>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3);


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);


}
} } } }

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/choose_sizes.inl" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/choose_sizes.inl"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/closure.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/closure.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/apply_from_tuple.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/apply_from_tuple.hpp"
       




namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename Function>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<> &)
{
  f();
}


template<typename Function, typename Arg1>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1> &args)
{
  f(thrust::get<0>(args));
}


template<typename Function, typename Arg1, typename Arg2>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2,Arg3> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args),
    thrust::get<2>(args));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2,Arg3,Arg4> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args),
    thrust::get<2>(args),
    thrust::get<3>(args));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args),
    thrust::get<2>(args),
    thrust::get<3>(args),
    thrust::get<4>(args));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args),
    thrust::get<2>(args),
    thrust::get<3>(args),
    thrust::get<4>(args),
    thrust::get<5>(args));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args),
    thrust::get<2>(args),
    thrust::get<3>(args),
    thrust::get<4>(args),
    thrust::get<5>(args),
    thrust::get<6>(args));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args),
    thrust::get<2>(args),
    thrust::get<3>(args),
    thrust::get<4>(args),
    thrust::get<5>(args),
    thrust::get<6>(args),
    thrust::get<7>(args));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args),
    thrust::get<2>(args),
    thrust::get<3>(args),
    thrust::get<4>(args),
    thrust::get<5>(args),
    thrust::get<6>(args),
    thrust::get<7>(args),
    thrust::get<8>(args));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, typename Arg10>
__attribute__((host)) __attribute__((device))
void apply_from_tuple(Function f, const thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9,Arg10> &args)
{
  f(thrust::get<0>(args),
    thrust::get<1>(args),
    thrust::get<2>(args),
    thrust::get<3>(args),
    thrust::get<4>(args),
    thrust::get<5>(args),
    thrust::get<6>(args),
    thrust::get<7>(args),
    thrust::get<8>(args),
    thrust::get<9>(args));
}


}
}
} } } }
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/closure.hpp" 2




namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename Function, typename Tuple>
class closure
{
  public:
    typedef Function function_type;

    typedef Tuple arguments_type;

    __attribute__((host)) __attribute__((device))
    closure(function_type f, const arguments_type &args)
      :f(f),
       args(args)
    {}


    __attribute__((host)) __attribute__((device))
    void operator()()
    {
      apply_from_tuple(f,args);
    }


    __attribute__((host)) __attribute__((device))
    function_type function() const
    {
      return f;
    }


    __attribute__((host)) __attribute__((device))
    arguments_type arguments() const
    {
      return args;
    }


  private:
    function_type f;
    arguments_type args;
};


template<typename Function, typename Arguments>
__attribute__((host)) __attribute__((device))
const closure<Function,Arguments> &make_closure(const closure<Function,Arguments> &c)
{
  return c;
}


template<typename Function>
__attribute__((host)) __attribute__((device))
closure<Function, thrust::tuple<> > make_closure(Function f)
{
  return closure<Function,thrust::tuple<> >(f, thrust::tuple<>());
}


template<typename Function, typename Arg1>
__attribute__((host)) __attribute__((device))
closure<Function, thrust::tuple<Arg1> > make_closure(Function f, const Arg1 &a1)
{
  return closure<Function,thrust::tuple<Arg1> >(f, thrust::make_tuple(a1));
}


template<typename Function, typename Arg1, typename Arg2>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2)
{
  return closure<Function,thrust::tuple<Arg1,Arg2> >(f, thrust::make_tuple(a1,a2));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2,Arg3>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2, const Arg3 &a3)
{
  return closure<Function,thrust::tuple<Arg1,Arg2,Arg3> >(f, thrust::make_tuple(a1,a2,a3));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2,Arg3,Arg4>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4)
{
  return closure<Function,thrust::tuple<Arg1,Arg2,Arg3,Arg4> >(f, thrust::make_tuple(a1,a2,a3,a4));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5)
{
  return closure<Function,thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5> >(f, thrust::make_tuple(a1,a2,a3,a4,a5));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6)
{
  return closure<Function,thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6> >(f, thrust::make_tuple(a1,a2,a3,a4,a5,a6));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6, const Arg7 &a7)
{
  return closure<Function,thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7> >(f, thrust::make_tuple(a1,a2,a3,a4,a5,a6,a7));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6, const Arg7 &a7, const Arg8 &a8)
{
  return closure<Function,thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8> >(f, thrust::make_tuple(a1,a2,a3,a4,a5,a6,a7,a8));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6, const Arg7 &a7, const Arg8 &a8, const Arg9 &a9)
{
  return closure<Function,thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9> >(f, thrust::make_tuple(a1,a2,a3,a4,a5,a6,a7,a8,a9));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, typename Arg10>
__attribute__((host)) __attribute__((device))
closure<
  Function,
  thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9,Arg10>
>
  make_closure(Function f, const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6, const Arg7 &a7, const Arg8 &a8, const Arg9 &a9, const Arg10 &a10)
{
  return closure<Function,thrust::tuple<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8,Arg9,Arg10> >(f, thrust::make_tuple(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10));
}


}
}
} } } }
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/choose_sizes.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launcher.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launcher.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/alignment.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/alignment.hpp"
       



namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{
namespace alignment_of_detail
{


template<typename T> class alignment_of_impl;

template<typename T, std::size_t size_diff>
  struct helper
{
  static const std::size_t value = size_diff;
};

template<typename T>
  class helper<T,0>
{
  public:
    static const std::size_t value = alignment_of_impl<T>::value;
};

template<typename T>
  class alignment_of_impl
{
  private:
    struct big { T x; char c; };

  public:
    static const std::size_t value = helper<big, sizeof(big) - sizeof(T)>::value;
};


}


template<typename T>
  struct alignment_of
    : alignment_of_detail::alignment_of_impl<T>
{};


template<std::size_t Align> struct aligned_type;
# 190 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/alignment.hpp"
template<std::size_t Align> struct aligned_type
{
  struct __attribute__((aligned(Align))) type { };
};
# 203 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/alignment.hpp"
template<std::size_t Len, std::size_t Align>
  struct aligned_storage
{
  union type
  {
    unsigned char data[Len];

    typename aligned_type<Align>::type align;
  };
};


}
}
} } } }
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launcher.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_task.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_task.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/malloc.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/malloc.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/pointer_traits.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/pointer_traits.hpp"
       



namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


inline __attribute__((device)) unsigned int __isShared(const void *ptr)
{

  (void) ptr;

  unsigned int ret;


  asm volatile ("{ \n\t"
                "    .reg .pred p; \n\t"
                "    isspacep.shared p, %1; \n\t"
                "    selp.u32 %0, 1, 0, p;  \n\t"

                "} \n\t" : "=r"(ret) : "l"(ptr));







  return ret;
}


inline __attribute__((device)) bool is_shared(const void *ptr)
{
  return __isShared(ptr);
}


inline __attribute__((device)) bool is_global(const void *ptr)
{

  (void) ptr;


  return __isGlobal(ptr);



}


}
}
} } } }
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/malloc.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/uninitialized.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/uninitialized.hpp"
       



# 1 "/usr/include/c++/4.8/cstddef" 1 3
# 39 "/usr/include/c++/4.8/cstddef" 3
       
# 40 "/usr/include/c++/4.8/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 42 "/usr/include/c++/4.8/cstddef" 2 3
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/uninitialized.hpp" 2



namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<typename T>
  class uninitialized
{
  private:
    typename bulk_::detail::aligned_storage<
      sizeof(T),
      bulk_::detail::alignment_of<T>::value
    >::type storage;

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    const T* ptr() const
    {
      const void *result = storage.data;
      return reinterpret_cast<const T*>(result);
    }

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    T* ptr()
    {
      void *result = storage.data;
      return reinterpret_cast<T*>(result);
    }

  public:

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    uninitialized<T> &operator=(const T &other)
    {
      T& self = *this;
      self = other;
      return *this;
    }

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    T& get()
    {
      return *ptr();
    }

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    const T& get() const
    {
      return *ptr();
    }

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    operator T& ()
    {
      return get();
    }

    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    operator const T&() const
    {
      return get();
    }

    # pragma hd_warning_disable
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct()
    {
      ::new(ptr()) T();
    }

    # pragma hd_warning_disable
    template<typename Arg>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg &a)
    {
      ::new(ptr()) T(a);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2)
    {
      ::new(ptr()) T(a1,a2);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2, typename Arg3>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2, const Arg3 &a3)
    {
      ::new(ptr()) T(a1,a2,a3);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2, typename Arg3, typename Arg4>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4)
    {
      ::new(ptr()) T(a1,a2,a3,a4);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5)
    {
      ::new(ptr()) T(a1,a2,a3,a4,a5);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6)
    {
      ::new(ptr()) T(a1,a2,a3,a4,a5,a6);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6, const Arg7 &a7)
    {
      ::new(ptr()) T(a1,a2,a3,a4,a5,a6,a7);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6, const Arg7 &a7, const Arg8 &a8)
    {
      ::new(ptr()) T(a1,a2,a3,a4,a5,a6,a7,a8);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6, const Arg7 &a7, const Arg8 &a8, const Arg9 &a9)
    {
      ::new(ptr()) T(a1,a2,a3,a4,a5,a6,a7,a8,a9);
    }

    # pragma hd_warning_disable
    template<typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, typename Arg10>
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void construct(const Arg1 &a1, const Arg2 &a2, const Arg3 &a3, const Arg4 &a4, const Arg5 &a5, const Arg6 &a6, const Arg7 &a7, const Arg8 &a8, const Arg9 &a9, const Arg10 &a10)
    {
      ::new(ptr()) T(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
    }

    # pragma hd_warning_disable
    __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
    void destroy()
    {
      T& self = *this;
      self.~T();
    }
};


template<typename T, std::size_t N>
  class uninitialized_array
{
  public:
    typedef T value_type;
    typedef T& reference;
    typedef const T& const_reference;
    typedef T* pointer;
    typedef const T* const_pointer;
    typedef pointer iterator;
    typedef const_pointer const_iterator;
    typedef std::size_t size_type;

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    iterator begin()
    {
      return data();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    const_iterator begin() const
    {
      return data();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    iterator end()
    {
      return begin() + size();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    const_iterator end() const
    {
      return begin() + size();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    const_iterator cbegin() const
    {
      return begin();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    const_iterator cend() const
    {
      return end();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    size_type size() const
    {
      return N;
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    bool empty() const
    {
      return false;
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    T* data()
    {
      return impl.get();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    const T* data() const
    {
      return impl.get();
    }


    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    reference operator[](size_type n)
    {
      return data()[n];
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    const_reference operator[](size_type n) const
    {
      return data()[n];
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    reference front()
    {
      return *data();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    const_reference front() const
    {
      return *data();
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    reference back()
    {
      return data()[size() - size_type(1)];
    }

    __inline__ __attribute__((always_inline)) __attribute__((host)) __attribute__((device))
    const_reference back() const
    {
      return data()[size() - size_type(1)];
    }

  private:
    uninitialized<T[N]> impl;
};


}
} } } }
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/malloc.hpp" 2

# 1 "/usr/include/c++/4.8/cstdlib" 1 3
# 39 "/usr/include/c++/4.8/cstdlib" 3
       
# 40 "/usr/include/c++/4.8/cstdlib" 3
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/malloc.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


inline __attribute__((device)) bool is_on_chip(void *ptr)
{
  return bulk_::detail::is_shared(ptr);
}


template<typename T>
inline __attribute__((device)) T *on_chip_cast(T *ptr)
{
  extern __attribute__((shared)) char s_begin[];
  void *result = (reinterpret_cast<char*>(ptr) - s_begin) + s_begin;
  return reinterpret_cast<T*>(result);
}


namespace detail
{


extern __attribute__((shared)) int s_data_segment_begin[];


class os
{
  public:
    __attribute__((device)) inline os(size_t max_data_segment_size)
      : m_program_break(s_data_segment_begin),
        m_max_data_segment_size(max_data_segment_size)
    {
    }


    __attribute__((device)) inline int brk(void *end_data_segment)
    {
      if(end_data_segment <= m_program_break)
      {
        m_program_break = end_data_segment;
        return 0;
      }

      return -1;
    }


    __attribute__((device)) inline void *sbrk(size_t increment)
    {
      if(data_segment_size() + increment <= m_max_data_segment_size)
      {
        m_program_break = reinterpret_cast<char*>(m_program_break) + increment;
      }
      else
      {
        return reinterpret_cast<void*>(-1);
      }

      return m_program_break;
    }


    __attribute__((device)) inline void *program_break() const
    {
      return m_program_break;
    }


    __attribute__((device)) inline void *data_segment_begin() const
    {
      return s_data_segment_begin;
    }


  private:
    __attribute__((device)) inline size_t data_segment_size()
    {
      return reinterpret_cast<char*>(m_program_break) - reinterpret_cast<char*>(s_data_segment_begin);
    }


    void *m_program_break;


    size_t m_max_data_segment_size;
};



class singleton_unsafe_on_chip_allocator
{
  public:
    __attribute__((device)) inline singleton_unsafe_on_chip_allocator(size_t max_data_segment_size)
      : m_os(max_data_segment_size)
    {}

    __attribute__((device)) inline void *allocate(size_t size)
    {
      size_t aligned_size = align8(size);

      block *prev = find_first_free_insertion_point(heap_begin(), heap_end(), aligned_size);

      block *b;

      if(prev != heap_end() && (b = prev->next()) != heap_end())
      {

        if((b->size() - aligned_size) >= sizeof(block))
        {
          split_block(b, aligned_size);
        }

        b->set_is_free(false);
      }
      else
      {

        b = extend_heap(prev, aligned_size);
        if(b == heap_end())
        {
          return 0;
        }
      }

      return b->data();
    }


    __attribute__((device)) inline void deallocate(void *ptr)
    {
      if(ptr != 0)
      {
        block *b = get_block(ptr);


        b->set_is_free(true);


        if(b->prev() && b->prev()->is_free())
        {
          b = b->prev();
          fuse_block(b);
        }


        if(b->next() != heap_end())
        {
          fuse_block(b);
        }
        else
        {

          m_os.brk(b);
        }
      }
    }


  private:

    class block : public bulk_::detail::aligned_type<sizeof(size_t) + sizeof(block*)>::type
    {
      public:
        __attribute__((device)) inline size_t size() const
        {
          return m_size;
        }

        __attribute__((device)) void set_size(size_t sz)
        {
          m_size = sz;
        }

        __attribute__((device)) inline block *prev() const
        {
          return m_prev;
        }

        __attribute__((device)) void set_prev(block *p)
        {
          m_prev = p;
        }


        __attribute__((device)) inline void *byte_at(size_t index) const
        {
          return reinterpret_cast<char*>(data()) + index;
        }

        __attribute__((device)) inline block *next() const
        {
          return reinterpret_cast<block*>(byte_at(size()));
        }

        __attribute__((device)) inline bool is_free() const
        {
          return m_is_free;
        }

        __attribute__((device)) inline void set_is_free(bool f)
        {
          m_is_free = f;
        }

        __attribute__((device)) inline void *data() const
        {
          return reinterpret_cast<char*>(const_cast<block*>(this)) + sizeof(block);
        }

      private:



        bool m_is_free : 1;
        size_t m_size : 8 * sizeof(size_t) - 1;
        block *m_prev;
    };


    os m_os;

    __attribute__((device)) inline block *heap_begin() const
    {
      return reinterpret_cast<block*>(m_os.data_segment_begin());
    }


    __attribute__((device)) inline block *heap_end() const
    {
      return reinterpret_cast<block*>(m_os.program_break());
    }


    __attribute__((device)) inline void split_block(block *b, size_t size)
    {
      block *new_block;


      new_block = reinterpret_cast<block*>(b->byte_at(size));


      new_block->set_size(b->size() - size - sizeof(block));

      new_block->set_prev(b);
      new_block->set_is_free(true);


      b->set_size(size);


      if(new_block->next() != heap_end())
      {
        new_block->next()->set_prev(new_block);
      }
    }


    __attribute__((device)) inline bool fuse_block(block *b)
    {
      if(b->next() != heap_end() && b->next()->is_free())
      {

        b->set_size(sizeof(block) + b->next()->size() + b->size());

        if(b->next() != heap_end())
        {
          b->next()->set_prev(b);
        }

        return true;
      }

      return false;
    }


    __attribute__((device)) inline static block *get_block(void *data)
    {

      void *ptr = reinterpret_cast<char*>(data) - sizeof(block);
      return reinterpret_cast<block *>(ptr);
    }


    __attribute__((device)) inline static block *find_first_free_insertion_point(block *first, block *last, size_t size)
    {
      block *prev = last;

      while(first != last && !(first->is_free() && first->size() >= size))
      {
        prev = first;
        first = first->next();
      }

      return prev;
    }


    __attribute__((device)) inline block *extend_heap(block *prev, size_t size)
    {

      block *new_block = heap_end();


      if(m_os.sbrk(sizeof(block) + size) == reinterpret_cast<void*>(-1))
      {

        return new_block;
      }

      on_chip_cast(new_block)->set_size(size);
      on_chip_cast(new_block)->set_prev(prev);
      on_chip_cast(new_block)->set_is_free(false);

      return new_block;
    }


    __attribute__((device)) inline static size_t align8(size_t size)
    {
      return ((((size - 1) >> 3) << 3) + 8);
    }
};


class singleton_on_chip_allocator
{
  public:

    inline __attribute__((device)) __attribute__((host))
    singleton_on_chip_allocator(size_t max_data_segment_size)
      : m_mutex(),
        m_alloc(max_data_segment_size)
    {}


    inline __attribute__((device))
    void *unsafe_allocate(size_t size)
    {
      return m_alloc.allocate(size);
    }


    inline __attribute__((device))
    void *allocate(size_t size)
    {
      void *result;

      m_mutex.lock();
      {
        result = unsafe_allocate(size);
      }
      m_mutex.unlock();

      return result;
    }


    inline __attribute__((device))
    void unsafe_deallocate(void *ptr)
    {
      m_alloc.deallocate(ptr);
    }


    inline __attribute__((device))
    void deallocate(void *ptr)
    {
      m_mutex.lock();
      {
        unsafe_deallocate(ptr);
      }
      m_mutex.unlock();
    }


  private:
    class mutex
    {
      public:
        inline __attribute__((device))
        mutex()
          : m_in_use(0)
        {}


        inline __attribute__((device))
        bool try_lock()
        {

          return atomicCAS(&m_in_use, 0, 1) != 0;



        }


        inline __attribute__((device))
        void lock()
        {

          while(try_lock()) ;
        }


        inline __attribute__((device))
        void unlock()
        {
          m_in_use = 0;
        }


      private:
        unsigned int m_in_use;
    };


    mutex m_mutex;
    singleton_unsafe_on_chip_allocator m_alloc;
};



namespace
{

__attribute__((shared)) uninitialized<singleton_on_chip_allocator> s_on_chip_allocator;

}


inline __attribute__((device)) void init_on_chip_malloc(size_t max_data_segment_size)
{
  s_on_chip_allocator.construct(max_data_segment_size);
}


inline __attribute__((device)) void *on_chip_malloc(size_t size)
{
  void *result = s_on_chip_allocator.get().allocate(size);
  return on_chip_cast(result);
}


inline __attribute__((device)) void on_chip_free(void *ptr)
{
  s_on_chip_allocator.get().deallocate(ptr);
}


inline __attribute__((device)) void *unsafe_on_chip_malloc(size_t size)
{
  void *result = s_on_chip_allocator.get().unsafe_allocate(size);
  return on_chip_cast(result);
}


inline __attribute__((device)) void unsafe_on_chip_free(void *ptr)
{
  s_on_chip_allocator.get().unsafe_deallocate(ptr);
}


}


inline __attribute__((device)) void *shmalloc(size_t num_bytes)
{

  void *result = detail::on_chip_malloc(num_bytes);


  if(!result)
  {
    result = std::malloc(num_bytes);
  }


  return result;
}


inline __attribute__((device)) void *unsafe_shmalloc(size_t num_bytes)
{

  void *result = detail::unsafe_on_chip_malloc(num_bytes);


  if(!result)
  {
    result = std::malloc(num_bytes);
  }


  return result;
}


inline __attribute__((device)) void shfree(void *ptr)
{

  if(bulk_::is_on_chip(ptr))
  {
    bulk_::detail::on_chip_free(bulk_::on_chip_cast(ptr));
  }
  else
  {
    std::free(ptr);
  }



}


inline __attribute__((device)) void unsafe_shfree(void *ptr)
{

  if(bulk_::is_on_chip(ptr))
  {
    bulk_::detail::unsafe_on_chip_free(bulk_::on_chip_cast(ptr));
  }
  else
  {
    std::free(ptr);
  }



}


template<typename ConcurrentGroup>
__attribute__((device))
inline void *malloc(ConcurrentGroup &g, size_t num_bytes)
{
  __attribute__((shared)) void *s_result;



  g.wait();

  if(g.this_exec.index() == 0)
  {
    s_result = bulk_::unsafe_shmalloc(num_bytes);
  }

  g.wait();

  return s_result;
}


template<typename ConcurrentGroup>
__attribute__((device))
inline void free(ConcurrentGroup &g, void *ptr)
{
  if(g.this_exec.index() == 0)
  {
    bulk_::unsafe_shfree(ptr);
  }

  g.wait();
}


}
} } } }
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_task.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/tuple_transform.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/tuple_transform.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/tuple_meta_transform.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/tuple_meta_transform.hpp"
       




namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         unsigned int sz = thrust::tuple_size<Tuple>::value>
  struct tuple_meta_transform;

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,0>
{
  typedef thrust::tuple<> type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,1>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,2>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,3>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,4>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,5>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,6>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,7>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<6,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,8>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<6,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<7,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,9>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<6,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<7,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<8,Tuple>::type>::type
  > type;
};

template<typename Tuple,
         template<typename> class UnaryMetaFunction>
  struct tuple_meta_transform<Tuple,UnaryMetaFunction,10>
{
  typedef thrust::tuple<
    typename UnaryMetaFunction<typename thrust::tuple_element<0,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<1,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<2,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<3,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<4,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<5,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<6,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<7,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<8,Tuple>::type>::type,
    typename UnaryMetaFunction<typename thrust::tuple_element<9,Tuple>::type>::type
  > type;
};


}
}
} } } }
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/tuple_transform.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{

template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction,
         unsigned int sz = thrust::tuple_size<Tuple>::value>
  struct tuple_transform_functor;


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,0>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    return thrust::tuple<>();
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    return thrust::tuple<>();
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,1>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,2>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,3>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,4>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,5>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,6>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,7>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,8>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,9>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)),
                     f(thrust::get<8>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)),
                     f(thrust::get<8>(t)));
  }
};


template<typename Tuple,
         template<typename> class UnaryMetaFunction,
         typename UnaryFunction>
  struct tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction,10>
{
  static __attribute__((host))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)),
                     f(thrust::get<8>(t)),
                     f(thrust::get<9>(t)));
  }

  static __attribute__((host)) __attribute__((device))
  typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
  do_it_on_the_host_or_device(const Tuple &t, UnaryFunction f)
  {
    typedef typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type XfrmTuple;

    return XfrmTuple(f(thrust::get<0>(t)),
                     f(thrust::get<1>(t)),
                     f(thrust::get<2>(t)),
                     f(thrust::get<3>(t)),
                     f(thrust::get<4>(t)),
                     f(thrust::get<5>(t)),
                     f(thrust::get<6>(t)),
                     f(thrust::get<7>(t)),
                     f(thrust::get<8>(t)),
                     f(thrust::get<9>(t)));
  }
};


template<template<typename> class UnaryMetaFunction,
         typename Tuple,
         typename UnaryFunction>
typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
tuple_host_transform(const Tuple &t, UnaryFunction f)
{
  return tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction>::do_it_on_the_host(t,f);
}

template<template<typename> class UnaryMetaFunction,
         typename Tuple,
         typename UnaryFunction>
typename tuple_meta_transform<Tuple,UnaryMetaFunction>::type
__attribute__((host)) __attribute__((device))
tuple_host_device_transform(const Tuple &t, UnaryFunction f)
{
  return tuple_transform_functor<Tuple,UnaryMetaFunction,UnaryFunction>::do_it_on_the_host_or_device(t,f);
}

}
}
} } } }
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_task.hpp" 2





namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename ExecutionGroup, typename Closure>
class task_base
{
  public:
    typedef ExecutionGroup group_type;
    typedef Closure closure_type;

    __attribute__((host)) __attribute__((device))
    task_base(group_type g, closure_type c)
      : c(c), g(g)
    {}

  protected:
    __attribute__((host)) __attribute__((device))
    static void substitute_placeholders_and_execute(group_type &g, closure_type &c)
    {

      substituted_arguments_type new_args = substitute_placeholders(g, c.arguments());


      closure<typename closure_type::function_type, substituted_arguments_type> new_c(c.function(), new_args);


      new_c();
    }

    closure_type c;
    group_type g;

  private:
    template<typename T>
    struct substitutor_result
      : thrust::detail::eval_if<
          bulk_::detail::is_cursor<T>::value,
          cursor_result<T,ExecutionGroup>,
          thrust::detail::identity_<T>
        >
    {};

    typedef typename bulk_::detail::tuple_meta_transform<
      typename closure_type::arguments_type,
      substitutor_result
    >::type substituted_arguments_type;

    struct substitutor
    {
      group_type &g;

      __attribute__((device))
      substitutor(group_type &g)
        : g(g)
      {}

      template<unsigned int depth>
      __attribute__((device))
      typename bulk_::detail::cursor_result<cursor<depth>,group_type>::type
      operator()(cursor<depth> c) const
      {
        return c.get(g);
      }

      template<typename T>
      __attribute__((device))
      T &operator()(T &x) const
      {
        return x;
      }
    };

    __attribute__((host)) __attribute__((device))
    static substituted_arguments_type substitute_placeholders(group_type &g, typename closure_type::arguments_type args)
    {
      return bulk_::detail::tuple_host_device_transform<substitutor_result>(args, substitutor(g));
    }
};


template<std::size_t blocksize, std::size_t grainsize>
struct cuda_block
{
  typedef concurrent_group<agent<grainsize>, blocksize> type;
};


template<std::size_t gridsize, std::size_t blocksize, std::size_t grainsize>
struct cuda_grid
{
  typedef parallel_group<
    typename cuda_block<blocksize,grainsize>::type
  > type;
};


template<typename Group, typename Closure> class cuda_task;


template<typename Grid>
struct grid_maker
{
  __attribute__((host)) __attribute__((device))
  static Grid make(typename Grid::size_type size,
                   typename Grid::agent_type block,
                   typename Grid::size_type index)
  {
    return Grid(block, index);
  }
};


template<typename Block>
struct grid_maker<parallel_group<Block,dynamic_group_size> >
{
  __attribute__((host)) __attribute__((device))
  static parallel_group<Block,dynamic_group_size> make(typename parallel_group<Block,dynamic_group_size>::size_type size,
                                                       Block block,
                                                       typename parallel_group<Block,dynamic_group_size>::size_type index)
  {
    return parallel_group<Block,dynamic_group_size>(size, block, index);
  }
};


template<typename Block>
struct block_maker
{
  __attribute__((host)) __attribute__((device))
  static Block make(typename Block::size_type size,
                    typename Block::size_type heap_size,
                    typename Block::agent_type thread,
                    typename Block::size_type index)
  {
    return Block(heap_size, thread, index);
  }
};

template<typename Thread>
struct block_maker<concurrent_group<Thread,dynamic_group_size> >
{
  __attribute__((host)) __attribute__((device))
  static concurrent_group<Thread,dynamic_group_size> make(typename concurrent_group<Thread,dynamic_group_size>::size_type size,
                                                          typename concurrent_group<Thread,dynamic_group_size>::size_type heap_size,
                                                          Thread thread,
                                                          typename concurrent_group<Thread,dynamic_group_size>::size_type index)
  {
    return concurrent_group<Thread,dynamic_group_size>(size, heap_size, thread, index);
  }
};


template<typename Grid>
__attribute__((host)) __attribute__((device))
Grid make_grid(typename Grid::size_type size, typename Grid::agent_type block, typename Grid::size_type index = invalid_index)
{
  return grid_maker<Grid>::make(size, block, index);
}


template<typename Block>
__attribute__((host)) __attribute__((device))
Block make_block(typename Block::size_type size, typename Block::size_type heap_size, typename Block::agent_type thread = typename Block::agent_type(), typename Block::size_type index = invalid_index)
{
  return block_maker<Block>::make(size, heap_size, thread, index);
}



template<std::size_t gridsize, std::size_t blocksize, std::size_t grainsize, typename Closure>
class cuda_task<
  parallel_group<
    concurrent_group<
      agent<grainsize>,
      blocksize
    >,
    gridsize
  >,
  Closure
> : public task_base<typename cuda_grid<gridsize,blocksize,grainsize>::type,Closure>
{
  private:
    typedef task_base<typename cuda_grid<gridsize,blocksize,grainsize>::type,Closure> super_t;

  public:
    typedef typename super_t::group_type grid_type;
    typedef typename grid_type::agent_type block_type;
    typedef typename block_type::agent_type thread_type;
    typedef typename super_t::closure_type closure_type;
    typedef typename grid_type::size_type size_type;

  private:
    size_type block_offset;

  public:

    __attribute__((host)) __attribute__((device))
    cuda_task(grid_type g, closure_type c, size_type offset)
      : super_t(g,c),
        block_offset(offset)
    {}

    __attribute__((device))
    void operator()()
    {



      grid_type this_grid =
        make_grid<grid_type>(
          super_t::g.size(),
          make_block<block_type>(
            blockDim.x,
            super_t::g.this_exec.heap_size(),
            thread_type(threadIdx.x),
            block_offset + blockIdx.x
          ),
          0
      );



      if(this_grid.this_exec.this_exec.index() == 0)
      {
        bulk_::detail::init_on_chip_malloc(this_grid.this_exec.heap_size());
      }
      this_grid.this_exec.wait();


      substitute_placeholders_and_execute(this_grid, super_t::c);

    }
};



template<std::size_t blocksize, std::size_t grainsize, typename Closure>
class cuda_task<
  concurrent_group<
    agent<grainsize>,
    blocksize
  >,
  Closure
> : public task_base<typename cuda_block<blocksize,grainsize>::type,Closure>
{
  private:
    typedef task_base<typename cuda_block<blocksize,grainsize>::type,Closure> super_t;

  public:
    typedef typename super_t::group_type block_type;
    typedef typename block_type::agent_type thread_type;
    typedef typename super_t::closure_type closure_type;
    typedef typename block_type::size_type size_type;

  public:
    __attribute__((host)) __attribute__((device))
    cuda_task(block_type b, closure_type c)
      : super_t(b,c)
    {}

    __attribute__((device))
    void operator()()
    {



      block_type this_block =
        make_block<block_type>(
          blockDim.x,
          super_t::g.heap_size(),
          thread_type(threadIdx.x),
          0
        );



      if(this_block.this_exec.index() == 0)
      {
        bulk_::detail::init_on_chip_malloc(this_block.heap_size());
      }
      this_block.wait();


      substitute_placeholders_and_execute(this_block, super_t::c);

    }
};



template<std::size_t groupsize, std::size_t grainsize, typename Closure>
class cuda_task<parallel_group<agent<grainsize>,groupsize>,Closure>
  : public task_base<parallel_group<agent<grainsize>,groupsize>,Closure>
{
  private:
    typedef task_base<parallel_group<agent<grainsize>,groupsize>,Closure> super_t;

  public:
    typedef typename super_t::closure_type closure_type;
    typedef typename super_t::group_type group_type;

    __attribute__((host)) __attribute__((device))
    cuda_task(group_type g, closure_type c)
      : super_t(g,c)
    {}

    __attribute__((device))
    void operator()()
    {


      typedef int size_type;

      const size_type grid_size = gridDim.x * blockDim.x;

      for(size_type tid = blockDim.x * blockIdx.x + threadIdx.x;
          tid < super_t::g.size();
          tid += grid_size)
      {

        parallel_group<agent<grainsize>,groupsize> this_group(
          1,
          agent<grainsize>(tid),
          0
        );

        substitute_placeholders_and_execute(this_group, super_t::c);
      }

    }
};


}
}
} } } }
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launcher.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/triple_chevron_launcher.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/triple_chevron_launcher.hpp"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/parameter_ptr.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/parameter_ptr.hpp"
       






# 1 "/usr/include/c++/4.8/cstring" 1 3
# 39 "/usr/include/c++/4.8/cstring" 3
       
# 40 "/usr/include/c++/4.8/cstring" 3
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/parameter_ptr.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{



template<typename T>
class parameter_ptr
{
  public:
    typedef T element_type;

    __attribute__((host)) __attribute__((device))
    explicit parameter_ptr(element_type *ptr)
      : m_ptr(ptr)
    {}


    __attribute__((host)) __attribute__((device))
    parameter_ptr(const parameter_ptr& other_)
    {
      parameter_ptr& other = const_cast<parameter_ptr&>(other_);
      thrust::swap(m_ptr, other.m_ptr);
    }

    __attribute__((host)) __attribute__((device))
    ~parameter_ptr()
    {






      bulk_::detail::terminate_with_message("parameter_ptr dtor: cudaFree requires CUDART");

    }


    __attribute__((host)) __attribute__((device))
    parameter_ptr& operator=(const parameter_ptr& other_)
    {
      parameter_ptr& other = const_cast<parameter_ptr&>(other_);
      thrust::swap(m_ptr, other.m_ptr);
      return *this;
    }

    __attribute__((host)) __attribute__((device))
    T* get() const
    {
      return m_ptr;
    }

  private:
    T *m_ptr;
};


template<typename T>
__attribute__((host)) __attribute__((device))
parameter_ptr<T> make_parameter(const T& x)
{
  T* raw_ptr = 0;





  bulk_::detail::terminate_with_message("make_parameter(): cudaMalloc requires CUDART\n");







  std::memcpy(raw_ptr, &x, sizeof(T));


  return parameter_ptr<T>(raw_ptr);
}


}
}
} } } }
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/triple_chevron_launcher.hpp" 2
# 34 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/triple_chevron_launcher.hpp"
namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{
# 57 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/triple_chevron_launcher.hpp"
template<unsigned int block_size, typename Function, bool by_value = (sizeof(Function) <= 4096)> struct triple_chevron_launcher_base;


template<unsigned int block_size, typename Function>
__attribute__((global))
__attribute__((launch_bounds(block_size, 0)))
void launch_by_value(Function f)
{
  f();
}


template<unsigned int block_size, typename Function>
struct triple_chevron_launcher_base<block_size,Function,true>
{
  typedef void (*global_function_pointer_t)(Function);

  __attribute__((host)) __attribute__((device))
  static global_function_pointer_t global_function_pointer()
  {
    return launch_by_value<block_size,Function>;
  }
};


template<unsigned int block_size, typename Function>
__attribute__((global))
__attribute__((launch_bounds(block_size, 0)))
void launch_by_pointer(const Function *f)
{

  Function f_reg = *f;
  f_reg();
}


template<unsigned int block_size, typename Function>
struct triple_chevron_launcher_base<block_size,Function,false>
{
  typedef void (*global_function_pointer_t)(const Function*);

  __attribute__((host)) __attribute__((device))
  static global_function_pointer_t global_function_pointer()
  {
    return launch_by_pointer<block_size,Function>;
  }
};




template<unsigned int block_size_, typename Function, bool by_value = sizeof(Function) <= 4096>
class triple_chevron_launcher : protected triple_chevron_launcher_base<block_size_, Function>
{
  private:
    typedef triple_chevron_launcher_base<block_size_,Function> super_t;

  public:
    typedef Function task_type;

    inline __attribute__((host)) __attribute__((device))
    void launch(unsigned int num_blocks, unsigned int block_size, size_t num_dynamic_smem_bytes, cudaStream_t stream, task_type task)
    {
      struct workaround
      {
        __attribute__((host)) __attribute__((device))
        static void supported_path(unsigned int num_blocks, unsigned int block_size, size_t num_dynamic_smem_bytes, cudaStream_t stream, task_type task)
        {
# 137 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/triple_chevron_launcher.hpp"
        }

        __attribute__((host)) __attribute__((device))
        static void unsupported_path(unsigned int, unsigned int, size_t, cudaStream_t, task_type)
        {
          bulk_::detail::terminate_with_message("triple_chevron_launcher::launch(): CUDA kernel launch requires CUDART.");
        }
      };




      workaround::unsupported_path(num_blocks, block_size, num_dynamic_smem_bytes, stream, task);

    }
};






template<unsigned int block_size_, typename Function>
class triple_chevron_launcher<block_size_,Function,false> : protected triple_chevron_launcher_base<block_size_,Function>
{
  private:
    typedef triple_chevron_launcher_base<block_size_,Function> super_t;

  public:
    typedef Function task_type;

    inline __attribute__((host)) __attribute__((device))
    void launch(unsigned int num_blocks, unsigned int block_size, size_t num_dynamic_smem_bytes, cudaStream_t stream, task_type task)
    {
      struct workaround
      {
        __attribute__((host)) __attribute__((device))
        static void supported_path(unsigned int num_blocks, unsigned int block_size, size_t num_dynamic_smem_bytes, cudaStream_t stream, task_type task)
        {
          bulk_::detail::parameter_ptr<task_type> parm = bulk_::detail::make_parameter<task_type>(task);
# 191 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/triple_chevron_launcher.hpp"
        }

        __attribute__((host)) __attribute__((device))
        static void unsupported_path(unsigned int, unsigned int, size_t, cudaStream_t, task_type)
        {
          bulk_::detail::terminate_with_message("triple_chevron_launcher::launch(): CUDA kernel launch requires CUDART.");
        }
      };




      workaround::unsupported_path(num_blocks, block_size, num_dynamic_smem_bytes, stream, task);

    }
};


}
}
} } } }
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launcher.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/synchronize.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/synchronize.hpp"
       







namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


inline __attribute__((host)) __attribute__((device))
void synchronize(const char* message = "")
{



  bulk_::detail::terminate_with_message("cudaDeviceSynchronize() requires CUDART");
  (void)message;

}


inline __attribute__((host)) __attribute__((device))
void synchronize_if_enabled(const char* message = "")
{



  synchronize(message);




}


}
}
} } } }
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launcher.hpp" 2
# 40 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/cuda_launcher/cuda_launcher.hpp"
namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{




template<unsigned int block_size_, typename ExecutionGroup, typename Closure>
struct cuda_launcher_base
  : public triple_chevron_launcher<
      block_size_,
      cuda_task<ExecutionGroup,Closure>
    >
{
  typedef triple_chevron_launcher<block_size_, cuda_task<ExecutionGroup,Closure> > super_t;
  typedef typename super_t::task_type task_type;
  typedef typename ExecutionGroup::size_type size_type;


  __attribute__((host)) __attribute__((device))
  cuda_launcher_base()
    : m_device_properties(bulk_::detail::device_properties())
  {}


  __attribute__((host)) __attribute__((device))
  void launch(size_type num_blocks, size_type block_size, size_type num_dynamic_smem_bytes, cudaStream_t stream, task_type task)
  {
    if(num_blocks > 0)
    {
      super_t::launch(num_blocks, block_size, num_dynamic_smem_bytes, stream, task);

      bulk_::detail::synchronize_if_enabled("bulk_kernel_by_value");
    }
  }


  __attribute__((host)) __attribute__((device))
  static size_type max_active_blocks_per_multiprocessor(const device_properties_t &props,
                                                        const function_attributes_t &attr,
                                                        size_type num_threads_per_block,
                                                        size_type num_smem_bytes_per_block)
  {
    return bulk_::detail::cuda_launch_config_detail::max_active_blocks_per_multiprocessor(props, attr, num_threads_per_block, num_smem_bytes_per_block);
  }





  __attribute__((host)) __attribute__((device))
  static thrust::pair<size_type,size_type> dynamic_smem_occupancy_limit(const device_properties_t &props, const function_attributes_t &attr, size_type num_threads_per_block, size_type num_smem_bytes_per_block)
  {

    size_type occupancy = max_active_blocks_per_multiprocessor(props, attr, num_threads_per_block, num_smem_bytes_per_block);


    if(occupancy < 1) return thrust::make_pair(0,0);

    return thrust::make_pair(bulk_::detail::proportional_smem_allocation(props, attr, occupancy), occupancy);
  }


  __attribute__((host)) __attribute__((device))
  size_type choose_heap_size(const device_properties_t &props, size_type group_size, size_type requested_size)
  {
    function_attributes_t attr = bulk_::detail::function_attributes(super_t::global_function_pointer());



    if(attr.ptxVersion < 20 || requested_size == 0)
    {
      return 0;
    }


    size_type result = 0, occupancy = 0;
    thrust::tie(result,occupancy) = dynamic_smem_occupancy_limit(props, attr, group_size, 0);




    if(requested_size != use_default && requested_size > result && occupancy > 1)
    {

      requested_size += 48;


      if(requested_size > result)
      {

        size_type next_level_result = 0, next_level_occupancy = 0;
        thrust::tie(next_level_result, next_level_occupancy) = dynamic_smem_occupancy_limit(props, attr, group_size, requested_size);



        if(next_level_occupancy > 0) result = next_level_result;
      }
    }

    return result;
  }


  __attribute__((host)) __attribute__((device))
  size_type choose_group_size(size_type requested_size)
  {
    size_type result = requested_size;

    if(result == use_default)
    {
      bulk_::detail::function_attributes_t attr = bulk_::detail::function_attributes(super_t::global_function_pointer());

      return bulk_::detail::block_size_with_maximum_potential_occupancy(attr, device_properties());
    }

    return result;
  }


  __attribute__((host)) __attribute__((device))
  size_type choose_subscription(size_type block_size)
  {

    return block_size > 0 ? device_properties().maxThreadsPerMultiProcessor / block_size : 0;
  }


  __attribute__((host)) __attribute__((device))
  size_type choose_num_groups(size_type requested_num_groups, size_type group_size)
  {
    size_type result = requested_num_groups;

    if(result == use_default)
    {


      size_type subscription = choose_subscription(group_size);

      result = thrust::min<size_type>(subscription * device_properties().multiProcessorCount, max_physical_grid_size());
    }

    return result;
  }


  __attribute__((host)) __attribute__((device))
  size_type max_physical_grid_size()
  {

    int actual_limit = device_properties().maxGridSize[0];


    int ptx_version = bulk_::detail::function_attributes(super_t::global_function_pointer()).ptxVersion;

    int ptx_limit = 0;


    if(ptx_version < 30)
    {
      ptx_limit = 65535;
    }
    else
    {
      ptx_limit = (1u << 31) - 1;
    }

    return thrust::min<size_type>(actual_limit, ptx_limit);
  }


  __attribute__((host)) __attribute__((device))
  const device_properties_t &device_properties() const
  {
    return m_device_properties;
  }


  device_properties_t m_device_properties;
};


template<typename ExecutionGroup, typename Closure> struct cuda_launcher;


template<std::size_t gridsize, std::size_t blocksize, std::size_t grainsize, typename Closure>
struct cuda_launcher<
  parallel_group<
    concurrent_group<
      agent<grainsize>,
      blocksize
    >,
    gridsize
  >,
  Closure
>
  : public cuda_launcher_base<blocksize, typename cuda_grid<gridsize,blocksize,grainsize>::type,Closure>
{
  typedef cuda_launcher_base<blocksize, typename cuda_grid<gridsize,blocksize,grainsize>::type,Closure> super_t;
  typedef typename super_t::size_type size_type;

  typedef typename cuda_grid<gridsize,blocksize,grainsize>::type grid_type;
  typedef typename grid_type::agent_type block_type;
  typedef typename block_type::agent_type thread_type;

  typedef typename super_t::task_type task_type;


  __attribute__((host)) __attribute__((device))
  void launch(grid_type request, Closure c, cudaStream_t stream)
  {
    grid_type g = configure(request);

    size_type num_blocks = g.size();
    size_type block_size = g.this_exec.size();

    if(num_blocks > 0 && block_size > 0)
    {
      size_type heap_size = g.this_exec.heap_size();

      size_type max_physical_grid_size = super_t::max_physical_grid_size();




      if(block_size > 0)
      {
        size_type num_remaining_physical_blocks = num_blocks;
        for(size_type block_offset = 0;
            block_offset < num_blocks;
            block_offset += max_physical_grid_size)
        {
          task_type task(g, c, block_offset);

          size_type num_physical_blocks = thrust::min<size_type>(num_remaining_physical_blocks, max_physical_grid_size);

          super_t::launch(num_physical_blocks, block_size, heap_size, stream, task);

          num_remaining_physical_blocks -= num_physical_blocks;
        }
      }
    }
  }

  __attribute__((host)) __attribute__((device))
  grid_type configure(grid_type g)
  {
    size_type block_size = super_t::choose_group_size(g.this_exec.size());
    size_type heap_size = super_t::choose_heap_size(device_properties(), block_size, g.this_exec.heap_size());
    size_type num_blocks = g.size();

    return make_grid<grid_type>(num_blocks, make_block<block_type>(block_size, heap_size));
  }


  __attribute__((host)) __attribute__((device))
  thrust::pair<size_type, size_type> choose_sizes(size_type requested_num_groups, size_type requested_group_size)
  {


    size_type group_size = blocksize;
    if(group_size == 0)
    {
      group_size = super_t::choose_group_size(requested_group_size);
    }



    size_type num_groups = gridsize;
    if(num_groups == 0)
    {
      num_groups = super_t::choose_num_groups(requested_num_groups, group_size);
    }

    return thrust::make_pair(num_groups, group_size);
  }
};


template<std::size_t blocksize, std::size_t grainsize, typename Closure>
struct cuda_launcher<
  concurrent_group<
    agent<grainsize>,
    blocksize
  >,
  Closure
>
  : public cuda_launcher_base<blocksize,concurrent_group<agent<grainsize>,blocksize>,Closure>
{
  typedef cuda_launcher_base<blocksize,concurrent_group<agent<grainsize>,blocksize>,Closure> super_t;
  typedef typename super_t::size_type size_type;
  typedef typename super_t::task_type task_type;

  typedef concurrent_group<agent<grainsize>,blocksize> block_type;

  __attribute__((host)) __attribute__((device))
  void launch(block_type request, Closure c, cudaStream_t stream)
  {
    block_type b = configure(request);

    size_type block_size = b.size();
    size_type heap_size = b.heap_size();

    if(block_size > 0)
    {
      task_type task(b, c);
      super_t::launch(1, block_size, heap_size, stream, task);
    }
  }

  __attribute__((host)) __attribute__((device))
  block_type configure(block_type b)
  {
    size_type block_size = super_t::choose_group_size(b.size());
    size_type heap_size = super_t::choose_heap_size(device_properties(), block_size, b.heap_size());
    return make_block<block_type>(block_size, heap_size);
  }
};


template<std::size_t groupsize, std::size_t grainsize, typename Closure>
struct cuda_launcher<
  parallel_group<
    agent<grainsize>,
    groupsize
  >,
  Closure
>
  : public cuda_launcher_base<dynamic_group_size, parallel_group<agent<grainsize>,groupsize>,Closure>
{
  typedef cuda_launcher_base<dynamic_group_size, parallel_group<agent<grainsize>,groupsize>,Closure> super_t;
  typedef typename super_t::size_type size_type;
  typedef typename super_t::task_type task_type;

  typedef parallel_group<agent<grainsize>,groupsize> group_type;

  __attribute__((host)) __attribute__((device))
  void launch(group_type g, Closure c, cudaStream_t stream)
  {
    size_type num_blocks, block_size;
    thrust::tie(num_blocks,block_size) = configure(g);

    if(num_blocks > 0 && block_size > 0)
    {
      task_type task(g, c);

      super_t::launch(num_blocks, block_size, 0, stream, task);
    }
  }

  __attribute__((host)) __attribute__((device))
  thrust::tuple<size_type,size_type> configure(group_type g)
  {
    size_type block_size = thrust::min<size_type>(g.size(), super_t::choose_group_size(use_default));


    size_type max_blocks = super_t::choose_num_groups(bulk_::use_default, block_size);


    size_type num_blocks = (block_size > 0) ? (g.size() + block_size - 1) / block_size : 0;


    num_blocks = thrust::min<size_type>(num_blocks, max_blocks);

    return thrust::make_tuple(num_blocks, block_size);
  }
};


}
}
} } } }
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/choose_sizes.inl" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename Closure>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Closure)
{
  bulk_::detail::cuda_launcher<
    parallel_group<concurrent_group<> >,
    Closure
  > launcher;

  return launcher.choose_sizes(g.size(), g.this_exec.size());
}


}


template<typename Function>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f)
{
  return bulk_::detail::choose_sizes(g, detail::make_closure(f));
}


template<typename Function, typename Arg1>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1)
{
  return bulk_::detail::choose_sizes(g, detail::make_closure(f,arg1));
}


template<typename Function, typename Arg1, typename Arg2>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2)
{
  return bulk_::detail::choose_sizes(g, detail::make_closure(f,arg1,arg2));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3)
{
  return bulk_::detail::choose_sizes(g, detail::make_closure(f,arg1,arg2,arg3));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)
{
  return bulk_::detail::choose_sizes(g, detail::make_closure(f,arg1,arg2,arg3,arg4));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)
{
  return bulk_::detail::choose_sizes(g, detail::make_closure(f,arg1,arg2,arg3,arg4,arg5));
}


template<typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
__attribute__((host)) __attribute__((device))
thrust::pair<typename parallel_group<concurrent_group<> >::size_type,
             typename concurrent_group<>::size_type>
  choose_sizes(parallel_group<concurrent_group<> > g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)
{
  return bulk_::detail::choose_sizes(g, detail::make_closure(f,arg1,arg2,arg3,arg4,arg5,arg6));
}


}
} } } }
# 82 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/choose_sizes.hpp" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/bulk.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/async.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/async.hpp"
       





# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/cstdint.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/cstdint.h"
       


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 48 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;



typedef unsigned long int uint64_t;
# 65 "/usr/include/stdint.h" 3 4
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 90 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 103 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 119 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 134 "/usr/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stdint.h" 2 3 4
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/cstdint.h" 2


namespace thrust
{
namespace detail
{
# 50 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/cstdint.h"
typedef ::int8_t int8_t;
typedef ::int16_t int16_t;
typedef ::int32_t int32_t;
typedef ::int64_t int64_t;
typedef ::uint8_t uint8_t;
typedef ::uint16_t uint16_t;
typedef ::uint32_t uint32_t;
typedef ::uint64_t uint64_t;





template<int word_size = sizeof(void*)> struct divine_intptr_t;
template<int word_size = sizeof(void*)> struct divine_uintptr_t;


template<> struct divine_intptr_t<4> { typedef thrust::detail::int32_t type; };
template<> struct divine_uintptr_t<4> { typedef thrust::detail::uint32_t type; };


template<> struct divine_intptr_t<8> { typedef thrust::detail::int64_t type; };
template<> struct divine_uintptr_t<8> { typedef thrust::detail::uint64_t type; };

typedef divine_intptr_t<>::type intptr_t;
typedef divine_uintptr_t<>::type uintptr_t;

}
}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/async.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<typename ExecutionGroup, typename Function>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f);


template<typename ExecutionGroup, typename Function, typename Arg1>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8, Arg9 arg9);


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, typename Arg10>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8, Arg9 arg9, Arg10 arg10);


}
} } } }

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/async.inl" 1
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/async.inl"
namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename ExecutionGroup, typename Closure>
__attribute__((host)) __attribute__((device))
future<void> async_in_stream(ExecutionGroup g, Closure c, cudaStream_t s, cudaEvent_t before_event)
{






  bulk_::detail::terminate_with_message("async_in_stream(): cudaStreamWaitEvent requires CUDART");


  bulk_::detail::cuda_launcher<ExecutionGroup, Closure> launcher;
  launcher.launch(g, c, s);

  return future_core_access::create(s, false);
}


template<typename ExecutionGroup, typename Closure>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Closure c, cudaEvent_t before_event)
{
  cudaStream_t s;






  s = 0;
  bulk_::detail::terminate_with_message("bulk::async(): cudaStreamCreate() is unsupported in __device__ code.");
# 73 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/async.inl"
  bulk_::detail::terminate_with_message("async_in_stream(): cudaStreamWaitEvent requires CUDART");


  bulk_::detail::cuda_launcher<ExecutionGroup, Closure> launcher;
  launcher.launch(g, c, s);


  return future_core_access::create(s, true);
}


template<typename ExecutionGroup, typename Closure>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Closure c)
{
  return bulk_::detail::async_in_stream(g, c, 0, 0);
}


template<typename ExecutionGroup, typename Closure>
__attribute__((host)) __attribute__((device))
future<void> async(async_launch<ExecutionGroup> launch, Closure c)
{
  return launch.is_stream_valid() ?
    bulk_::detail::async_in_stream(launch.exec(), c, launch.stream(), launch.before_event()) :
    bulk_::detail::async(launch.exec(), c, launch.before_event());
}


}


template<typename ExecutionGroup, typename Function>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f)
{
  return bulk_::detail::async(g, detail::make_closure(f));
}


template<typename ExecutionGroup, typename Function, typename Arg1>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2,arg3));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2,arg3,arg4));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2,arg3,arg4,arg5));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2,arg3,arg4,arg5,arg6));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2,arg3,arg4,arg5,arg6,arg7));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8, Arg9 arg9)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9));
}


template<typename ExecutionGroup, typename Function, typename Arg1, typename Arg2, typename Arg3, typename Arg4, typename Arg5, typename Arg6, typename Arg7, typename Arg8, typename Arg9, typename Arg10>
__attribute__((host)) __attribute__((device))
future<void> async(ExecutionGroup g, Function f, Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5, Arg6 arg6, Arg7 arg7, Arg8 arg8, Arg9 arg9, Arg10 arg10)
{
  return bulk_::detail::async(g, detail::make_closure(f,arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10));
}


}
} } } }
# 90 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/async.hpp" 2
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/bulk.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/copy.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/copy.hpp"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/is_contiguous_iterator.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/is_contiguous_iterator.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/is_trivial_iterator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/is_trivial_iterator.h"
       






namespace __gnu_cxx
{

template<typename Iterator, typename Container> class __normal_iterator;

}
# 42 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/is_trivial_iterator.h"
namespace thrust
{
namespace detail
{


template<typename T>
  struct is_gnu_normal_iterator
    : false_type
{};



template<typename Iterator, typename Container>
  struct is_gnu_normal_iterator< __gnu_cxx::__normal_iterator<Iterator, Container> >
    : true_type
{};
# 79 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/is_trivial_iterator.h"
template<typename T>
  struct is_trivial_iterator :
    integral_constant<
      bool,
        is_pointer<T>::value
      | thrust::detail::is_thrust_pointer<T>::value

      | is_gnu_normal_iterator<T>::value




    >
{};

}
}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/is_contiguous_iterator.hpp" 2

namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename T>
  struct is_contiguous_iterator
    : thrust::detail::is_trivial_iterator<T>
{};


}
}
} } } }
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/copy.hpp" 2




namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__inline__ __attribute__((always_inline)) __attribute__((device))
RandomAccessIterator2 copy_n(const bounded<bound,agent<grainsize> > &b,
                             RandomAccessIterator1 first,
                             Size n,
                             RandomAccessIterator2 result)
{
  typedef typename bounded<bound,agent<grainsize> >::size_type size_type;

  if(bound <= n)
  {
    for(size_type i = 0; i < b.bound(); ++i, ++result, ++first)
    {
      *result = *first;
    }
  }
  else
  {
    for(size_type i = 0; i < b.bound(); ++i, ++first)
    {
      if(i < n)
      {
        *result = *first;
        ++result;
      }
    }
  }

  return result;
}



namespace detail
{


template<typename ConcurrentGroup,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__inline__ __attribute__((always_inline)) __attribute__((device))
RandomAccessIterator2 simple_copy_n(ConcurrentGroup &g, RandomAccessIterator1 first, Size n, RandomAccessIterator2 result)
{
  for(Size i = g.this_exec.index();
      i < n;
      i += g.size())
  {
    result[i] = first[i];
  }

  g.wait();

  return result + n;
}


template<std::size_t size,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__inline__ __attribute__((always_inline)) __attribute__((device))
typename thrust::detail::enable_if<
  (size * grainsize > 0),
  RandomAccessIterator2
>::type
  simple_copy_n(bulk_::concurrent_group<
                  agent<grainsize>,
                  size
                > &g,
                RandomAccessIterator1 first, Size n,
                RandomAccessIterator2 result)
{
  typedef bulk_::concurrent_group<
    agent<grainsize>,
    size
  > group_type;

  RandomAccessIterator2 return_me = result + n;

  typedef typename group_type::size_type size_type;
  size_type chunk_size = size * grainsize;

  size_type tid = g.this_exec.index();


  if(chunk_size == n)
  {

    first += tid;
    result += tid;

    for(size_type i = 0; i < grainsize; ++i, first += size, result += size)
    {
      *result = *first;
    }
  }
  else
  {

    for(RandomAccessIterator1 last = first + n;
        first < last;
        first += chunk_size, result += chunk_size)
    {

      if((last - first) >= chunk_size)
      {
        for(size_type i = 0; i < grainsize; ++i)
        {
          size_type idx = size * i + tid;
          result[idx] = first[idx];
        }
      }
      else
      {
        for(size_type i = 0; i < grainsize; ++i)
        {
          size_type idx = size * i + tid;
          if(idx < (last - first))
          {
            result[idx] = first[idx];
          }
        }
      }
    }
  }

  g.wait();

  return return_me;
}


template<std::size_t size,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__inline__ __attribute__((always_inline)) __attribute__((device))
RandomAccessIterator2 copy_n(concurrent_group<
                               agent<grainsize>,
                               size
                             > &g,
                             RandomAccessIterator1 first,
                             Size n,
                             RandomAccessIterator2 result)
{
  return detail::simple_copy_n(g, first, n, result);
}


}


template<std::size_t groupsize,
         typename Executor,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__inline__ __attribute__((always_inline)) __attribute__((device))
RandomAccessIterator2
  copy_n(bulk_::concurrent_group<Executor,groupsize> &g, RandomAccessIterator1 first, Size n, RandomAccessIterator2 result)
{
  return detail::copy_n(g, first, n, result);
}


template<std::size_t bound, std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator1, typename Size, typename RandomAccessIterator2>
__attribute__((device))
typename thrust::detail::enable_if<
  (bound <= groupsize * grainsize),
  RandomAccessIterator2
>::type
copy_n(bulk_::bounded<
         bound,
         concurrent_group<
           agent<grainsize>,
           groupsize
         >
       > &g,
       RandomAccessIterator1 first,
       Size n,
       RandomAccessIterator2 result)
{
  typedef bounded<
    bound,
    concurrent_group<
      agent<grainsize>,
      groupsize
    >
  > group_type;

  typedef typename group_type::size_type size_type;

  size_type tid = g.this_exec.index();

  typedef typename thrust::iterator_value<RandomAccessIterator1>::type value_type;


  value_type stage[grainsize];


  if(groupsize * grainsize <= n)
  {
    for(size_type i = 0; i < grainsize; ++i)
    {
      size_type src_idx = g.size() * i + tid;
      stage[i] = first[src_idx];
    }

    for(size_type i = 0; i < grainsize; ++i)
    {
      size_type dst_idx = g.size() * i + tid;
      result[dst_idx] = stage[i];
    }
  }
  else
  {
    for(size_type i = 0; i < grainsize; ++i)
    {
      size_type src_idx = g.size() * i + tid;
      if(src_idx < n)
      {
        stage[i] = first[src_idx];
      }
    }

    for(size_type i = 0; i < grainsize; ++i)
    {
      size_type dst_idx = g.size() * i + tid;
      if(dst_idx < n)
      {
        result[dst_idx] = stage[i];
      }
    }
  }

  g.wait();

  return result + thrust::min<Size>(g.size() * grainsize, n);
}


}
} } } }
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce.hpp"
       





# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/iterator/strided_iterator.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/iterator/strided_iterator.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_adaptor.h" 1
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_adaptor.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h" 1
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_facade_category.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_facade_category.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_facade_category.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/is_iterator_category.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/is_iterator_category.h"
       





namespace thrust
{

namespace detail
{

template <typename T>
  struct is_host_iterator_category
    : thrust::detail::or_<
        thrust::detail::is_convertible<T, thrust::input_host_iterator_tag>,
        thrust::detail::is_convertible<T, thrust::output_host_iterator_tag>
      >
{
};

template <typename T>
  struct is_device_iterator_category
    : thrust::detail::or_<
        thrust::detail::is_convertible<T, thrust::input_device_iterator_tag>,
        thrust::detail::is_convertible<T, thrust::output_device_iterator_tag>
      >
{
};


template <typename T>
  struct is_iterator_category
    : thrust::detail::or_<
        is_host_iterator_category<T>,
        is_device_iterator_category<T>
      >
{
};

}

}
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_facade_category.h" 2



namespace thrust
{

namespace detail
{
# 81 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_facade_category.h"
template<typename System, typename Traversal, typename ValueParam, typename Reference>
  struct iterator_facade_default_category;
# 95 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_facade_category.h"
template<typename Traversal, typename ValueParam, typename Reference>
  struct iterator_facade_default_category_std :
    thrust::detail::eval_if<
      thrust::detail::is_convertible<Traversal, thrust::forward_traversal_tag>::value,
      thrust::detail::eval_if<
        thrust::detail::is_convertible<Traversal, thrust::random_access_traversal_tag>::value,
        thrust::detail::identity_<std::random_access_iterator_tag>,
        thrust::detail::eval_if<
          thrust::detail::is_convertible<Traversal, thrust::bidirectional_traversal_tag>::value,
          thrust::detail::identity_<std::bidirectional_iterator_tag>,
          thrust::detail::identity_<std::forward_iterator_tag>
        >
      >,
      thrust::detail::eval_if<
        thrust::detail::is_convertible<Traversal, thrust::single_pass_traversal_tag>::value,
        thrust::detail::identity_<std::input_iterator_tag>,
        thrust::detail::identity_<Traversal>
      >
    >
{
};



template<typename Traversal, typename ValueParam, typename Reference>
  struct iterator_facade_default_category_host :
    thrust::detail::eval_if<
      thrust::detail::is_convertible<Traversal, thrust::forward_traversal_tag>::value,
      thrust::detail::eval_if<
        thrust::detail::is_convertible<Traversal, thrust::random_access_traversal_tag>::value,
        thrust::detail::identity_<thrust::random_access_host_iterator_tag>,
        thrust::detail::eval_if<
          thrust::detail::is_convertible<Traversal, thrust::bidirectional_traversal_tag>::value,
          thrust::detail::identity_<thrust::bidirectional_host_iterator_tag>,
          thrust::detail::identity_<thrust::forward_host_iterator_tag>
        >
      >,
      thrust::detail::eval_if<
        thrust::detail::is_convertible<Traversal, thrust::single_pass_traversal_tag>::value,
        thrust::detail::identity_<thrust::input_host_iterator_tag>,
        thrust::detail::identity_<Traversal>
      >
    >
{
};



template<typename Traversal, typename ValueParam, typename Reference>
  struct iterator_facade_default_category_device :
    thrust::detail::eval_if<
      thrust::detail::is_convertible<Traversal, thrust::forward_traversal_tag>::value,
      thrust::detail::eval_if<
        thrust::detail::is_convertible<Traversal, thrust::random_access_traversal_tag>::value,
        thrust::detail::identity_<thrust::random_access_device_iterator_tag>,
        thrust::detail::eval_if<
          thrust::detail::is_convertible<Traversal, thrust::bidirectional_traversal_tag>::value,
          thrust::detail::identity_<thrust::bidirectional_device_iterator_tag>,
          thrust::detail::identity_<thrust::forward_device_iterator_tag>
        >
      >,
      thrust::detail::eval_if<
        thrust::detail::is_convertible<Traversal, thrust::single_pass_traversal_tag>::value,
        thrust::detail::identity_<thrust::input_device_iterator_tag>,
        thrust::detail::identity_<Traversal>
      >
    >
{
};



template<typename Traversal, typename ValueParam, typename Reference>
  struct iterator_facade_default_category_any
{
  typedef thrust::detail::iterator_category_with_system_and_traversal<
    typename iterator_facade_default_category_std<Traversal, ValueParam, Reference>::type,
    thrust::any_system_tag,
    Traversal
  > type;
};


template<typename System, typename Traversal, typename ValueParam, typename Reference>
  struct iterator_facade_default_category

    : thrust::detail::eval_if<
        thrust::detail::is_convertible<System, thrust::any_system_tag>::value,
        iterator_facade_default_category_any<Traversal, ValueParam, Reference>,


        thrust::detail::eval_if<
          thrust::detail::is_convertible<System, thrust::host_system_tag>::value,
          iterator_facade_default_category_host<Traversal, ValueParam, Reference>,


          thrust::detail::eval_if<
            thrust::detail::is_convertible<System, thrust::device_system_tag>::value,
            iterator_facade_default_category_device<Traversal, ValueParam, Reference>,



            thrust::detail::identity_<
              thrust::detail::iterator_category_with_system_and_traversal<
                typename iterator_facade_default_category_std<Traversal, ValueParam, Reference>::type,
                System,
                Traversal
              >
            >
          >
        >
      >
{};


template<typename System, typename Traversal, typename ValueParam, typename Reference>
  struct iterator_facade_category_impl
{
  typedef typename iterator_facade_default_category<
    System,Traversal,ValueParam,Reference
  >::type category;



  typedef typename thrust::detail::eval_if<
    thrust::detail::and_<
      thrust::detail::is_same<
        Traversal,
        typename thrust::detail::iterator_category_to_traversal<category>::type
      >,
      thrust::detail::is_same<
        System,
        typename thrust::detail::iterator_category_to_system<category>::type
      >
    >::value,
    thrust::detail::identity_<category>,
    thrust::detail::identity_<thrust::detail::iterator_category_with_system_and_traversal<category,System,Traversal> >
  >::type type;
};


template<typename CategoryOrSystem,
         typename CategoryOrTraversal,
         typename ValueParam,
         typename Reference>
  struct iterator_facade_category
{
  typedef typename
  thrust::detail::eval_if<
    thrust::detail::is_iterator_category<CategoryOrTraversal>::value,
    thrust::detail::identity_<CategoryOrTraversal>,
    iterator_facade_category_impl<CategoryOrSystem, CategoryOrTraversal, ValueParam, Reference>
  >::type type;
};


}
}
# 38 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/distance_from_result.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/distance_from_result.h"
       




namespace thrust
{

namespace detail
{



template<typename IteratorFacade1, typename IteratorFacade2>
  struct distance_from_result
    : eval_if<
        is_convertible<IteratorFacade2,IteratorFacade1>::value,
        identity_<typename IteratorFacade1::difference_type>,
        identity_<typename IteratorFacade2::difference_type>
      >
{};

}

}
# 39 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h" 2

namespace thrust
{
# 55 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h"
template<typename Derived, typename Value, typename System, typename Traversal, typename Reference, typename Difference> class iterator_facade;





class iterator_core_access
{




    template<typename Derived, typename Value, typename System, typename Traversal, typename Reference, typename Difference> friend class iterator_facade;


    template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
              typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
    inline __attribute__((host)) __attribute__((device))
    friend bool
    operator ==(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
                iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs);

    template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
              typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
    inline __attribute__((host)) __attribute__((device))
    friend bool
    operator !=(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
                iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs);

    template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
              typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
    inline __attribute__((host)) __attribute__((device))
    friend bool
    operator <(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
               iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs);

    template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
              typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
    inline __attribute__((host)) __attribute__((device))
    friend bool
    operator >(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
               iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs);

    template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
              typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
    inline __attribute__((host)) __attribute__((device))
    friend bool
    operator <=(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
                iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs);

    template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
              typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
    inline __attribute__((host)) __attribute__((device))
    friend bool
    operator >=(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
                iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs);


    template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
              typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
    inline __attribute__((host)) __attribute__((device))
    friend
      typename thrust::detail::distance_from_result<
        iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1>,
        iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2>
      >::type
    operator-(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
              iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs);

    template<typename Facade>
    __attribute__((host)) __attribute__((device))
    static typename Facade::reference dereference(Facade const& f)
    {
      return f.dereference();
    }

    template<typename Facade>
    __attribute__((host)) __attribute__((device))
    static void increment(Facade& f)
    {
      f.increment();
    }

    template<typename Facade>
    __attribute__((host)) __attribute__((device))
    static void decrement(Facade& f)
    {
      f.decrement();
    }

    template <class Facade1, class Facade2>
    __attribute__((host)) __attribute__((device))
    static bool equal(Facade1 const& f1, Facade2 const& f2)
    {
      return f1.equal(f2);
    }
# 167 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h"
    template <class Facade>
    __attribute__((host)) __attribute__((device))
    static void advance(Facade& f, typename Facade::difference_type n)
    {
      f.advance(n);
    }



    template <class Facade1, class Facade2>
    __attribute__((host)) __attribute__((device))
    static typename Facade1::difference_type
      distance_from(Facade1 const& f1, Facade2 const& f2, thrust::detail::true_type)
    {
      return -f1.distance_to(f2);
    }



    template <class Facade1, class Facade2>
    __attribute__((host)) __attribute__((device))
    static typename Facade2::difference_type
      distance_from(Facade1 const& f1, Facade2 const& f2, thrust::detail::false_type)
    {
      return f2.distance_to(f1);
    }

    template <class Facade1, class Facade2>
    __attribute__((host)) __attribute__((device))
    static typename thrust::detail::distance_from_result<Facade1,Facade2>::type
      distance_from(Facade1 const& f1, Facade2 const& f2)
    {


      return distance_from(f1, f2,
        typename thrust::detail::is_convertible<Facade2,Facade1>::type());
    }




    template <typename Derived, typename Value, typename System, typename Traversal, typename Reference, typename Difference>
    __attribute__((host)) __attribute__((device))
    static Derived& derived(iterator_facade<Derived,Value,System,Traversal,Reference,Difference>& facade)
    {
      return *static_cast<Derived*>(&facade);
    }

    template <typename Derived, typename Value, typename System, typename Traversal, typename Reference, typename Difference>
    __attribute__((host)) __attribute__((device))
    static Derived const& derived(iterator_facade<Derived,Value,System,Traversal,Reference,Difference> const& facade)
    {
      return *static_cast<Derived const*>(&facade);
    }



};
# 246 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h"
template<typename Derived,
         typename Value,
         typename System,
         typename Traversal,
         typename Reference,
         typename Difference = std::ptrdiff_t>
  class iterator_facade
{
  private:






    __attribute__((host)) __attribute__((device))
    Derived& derived()
    {
      return *static_cast<Derived*>(this);
    }

    __attribute__((host)) __attribute__((device))
    Derived const& derived() const
    {
      return *static_cast<Derived const*>(this);
    }



  public:


    typedef typename thrust::detail::remove_const<Value>::type value_type;



    typedef Reference reference;
# 291 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h"
    typedef void pointer;




    typedef Difference difference_type;



    typedef typename thrust::detail::iterator_facade_category<
      System, Traversal, Value, Reference
    >::type iterator_category;




    __attribute__((host)) __attribute__((device))
    reference operator*() const
    {
      return iterator_core_access::dereference(this->derived());
    }
# 325 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h"
    __attribute__((host)) __attribute__((device))
    reference operator[](difference_type n) const
    {
      return *(this->derived() + n);
    }




    __attribute__((host)) __attribute__((device))
    Derived& operator++()
    {
      iterator_core_access::increment(this->derived());
      return this->derived();
    }




    __attribute__((host)) __attribute__((device))
    Derived operator++(int)
    {
      Derived tmp(this->derived());
      ++*this;
      return tmp;
    }




    __attribute__((host)) __attribute__((device))
    Derived& operator--()
    {
      iterator_core_access::decrement(this->derived());
      return this->derived();
    }




    __attribute__((host)) __attribute__((device))
    Derived operator--(int)
    {
      Derived tmp(this->derived());
      --*this;
      return tmp;
    }





    __attribute__((host)) __attribute__((device))
    Derived& operator+=(difference_type n)
    {
      iterator_core_access::advance(this->derived(), n);
      return this->derived();
    }





    __attribute__((host)) __attribute__((device))
    Derived& operator-=(difference_type n)
    {
      iterator_core_access::advance(this->derived(), -n);
      return this->derived();
    }





    __attribute__((host)) __attribute__((device))
    Derived operator-(difference_type n) const
    {
      Derived result(this->derived());
      return result -= n;
    }
};





template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
          typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
inline __attribute__((host)) __attribute__((device))


bool
operator ==(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
            iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs)
{
  return iterator_core_access
    ::equal(*static_cast<Derived1 const*>(&lhs),
            *static_cast<Derived2 const*>(&rhs));
}

template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
          typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
inline __attribute__((host)) __attribute__((device))


bool
operator !=(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
            iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs)
{
  return !iterator_core_access
    ::equal(*static_cast<Derived1 const*>(&lhs),
            *static_cast<Derived2 const*>(&rhs));
}

template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
          typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
inline __attribute__((host)) __attribute__((device))


bool
operator <(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
           iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs)
{
  return 0 > iterator_core_access
    ::distance_from(*static_cast<Derived1 const*>(&lhs),
                    *static_cast<Derived2 const*>(&rhs));
}

template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
          typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
inline __attribute__((host)) __attribute__((device))


bool
operator >(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
           iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs)
{
  return 0 < iterator_core_access
    ::distance_from(*static_cast<Derived1 const*>(&lhs),
                    *static_cast<Derived2 const*>(&rhs));
}

template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
          typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
inline __attribute__((host)) __attribute__((device))


bool
operator <=(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
            iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs)
{
  return 0 >= iterator_core_access
    ::distance_from(*static_cast<Derived1 const*>(&lhs),
                    *static_cast<Derived2 const*>(&rhs));
}

template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
          typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
inline __attribute__((host)) __attribute__((device))


bool
operator >=(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
            iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs)
{
  return 0 <= iterator_core_access
    ::distance_from(*static_cast<Derived1 const*>(&lhs),
                    *static_cast<Derived2 const*>(&rhs));
}


template <typename Derived1, typename Value1, typename System1, typename Traversal1, typename Reference1, typename Difference1,
          typename Derived2, typename Value2, typename System2, typename Traversal2, typename Reference2, typename Difference2>
inline __attribute__((host)) __attribute__((device))


typename thrust::detail::distance_from_result<
  iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1>,
  iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2>
>::type

operator-(iterator_facade<Derived1,Value1,System1,Traversal1,Reference1,Difference1> const& lhs,
          iterator_facade<Derived2,Value2,System2,Traversal2,Reference2,Difference2> const& rhs)
{
  return iterator_core_access
    ::distance_from(*static_cast<Derived1 const*>(&lhs),
                    *static_cast<Derived2 const*>(&rhs));
}


template <typename Derived, typename Value, typename System, typename Traversal, typename Reference, typename Difference>
inline __attribute__((host)) __attribute__((device))
Derived operator+ (iterator_facade<Derived,Value,System,Traversal,Reference,Difference> const& i,
                   typename Derived::difference_type n)
{
  Derived tmp(static_cast<Derived const&>(i));
  return tmp += n;
}

template <typename Derived, typename Value, typename System, typename Traversal, typename Reference, typename Difference>
inline __attribute__((host)) __attribute__((device))
Derived operator+ (typename Derived::difference_type n,
                   iterator_facade<Derived,Value,System,Traversal,Reference,Difference> const& i)
{
  Derived tmp(static_cast<Derived const&>(i));
  return tmp += n;
}
# 542 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_facade.h"
}
# 37 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_adaptor.h" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_adaptor_base.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/iterator_adaptor_base.h"
       






namespace thrust
{



template<typename Derived,
         typename Base,
         typename Value,
         typename System,
         typename Traversal,
         typename Reference,
         typename Difference
>
class iterator_adaptor;


namespace detail
{




template <class T, class DefaultNullaryFn>
struct ia_dflt_help
  : thrust::detail::eval_if<
        thrust::detail::is_same<T, thrust::use_default>::value
      , DefaultNullaryFn
      , thrust::detail::identity_<T>
    >
{
};




template<typename Derived,
         typename Base,
         typename Value,
         typename System,
         typename Traversal,
         typename Reference,
         typename Difference
>
  struct iterator_adaptor_base
{
  typedef typename ia_dflt_help<
    Value,
    iterator_value<Base>
  >::type value;

  typedef typename ia_dflt_help<
    System,
    thrust::iterator_system<Base>
  >::type system;

  typedef typename ia_dflt_help<
    Traversal,
    thrust::iterator_traversal<Base>
  >::type traversal;

  typedef typename ia_dflt_help<
    Reference,
    thrust::detail::eval_if<
      thrust::detail::is_same<Value,use_default>::value,
      thrust::iterator_reference<Base>,
      thrust::detail::add_reference<Value>
    >
  >::type reference;

  typedef typename ia_dflt_help<
    Difference,
    iterator_difference<Base>
  >::type difference;

  typedef thrust::iterator_facade<
    Derived,
    value,
    system,
    traversal,
    reference,
    difference
  > type;
};


}
}
# 39 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_adaptor.h" 2

namespace thrust
{
# 114 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/iterator_adaptor.h"
template<typename Derived,
         typename Base,
         typename Value = use_default,
         typename System = use_default,
         typename Traversal = use_default,
         typename Reference = use_default,
         typename Difference = use_default>
  class iterator_adaptor:
    public detail::iterator_adaptor_base<
      Derived, Base, Value, System, Traversal, Reference, Difference
    >::type
{



    friend class thrust::iterator_core_access;

  protected:
    typedef typename detail::iterator_adaptor_base<
        Derived, Base, Value, System, Traversal, Reference, Difference
    >::type super_t;




  public:


    __attribute__((host)) __attribute__((device))
    iterator_adaptor(){}



    __attribute__((host)) __attribute__((device))
    explicit iterator_adaptor(Base const& iter)
      : m_iterator(iter)
    {}



    typedef Base base_type;



    typedef typename super_t::reference reference;

    typedef typename super_t::difference_type difference_type;





    __attribute__((host)) __attribute__((device))
    Base const& base() const
    { return m_iterator; }

  protected:


    __attribute__((host)) __attribute__((device))
    Base const& base_reference() const
    { return m_iterator; }



    __attribute__((host)) __attribute__((device))
    Base& base_reference()
    { return m_iterator; }



  private:

    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    typename iterator_adaptor::reference dereference() const
    { return *m_iterator; }

    #pragma hd_warning_disable
    template<typename OtherDerived, typename OtherIterator, typename V, typename S, typename T, typename R, typename D>
    __attribute__((host)) __attribute__((device))
    bool equal(iterator_adaptor<OtherDerived, OtherIterator, V, S, T, R, D> const& x) const
    { return m_iterator == x.base(); }

    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    void advance(typename iterator_adaptor::difference_type n)
    {

      m_iterator += n;
    }

    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    void increment()
    { ++m_iterator; }

    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    void decrement()
    {

      --m_iterator;
    }

    #pragma hd_warning_disable
    template<typename OtherDerived, typename OtherIterator, typename V, typename S, typename T, typename R, typename D>
    __attribute__((host)) __attribute__((device))
    typename iterator_adaptor::difference_type distance_to(iterator_adaptor<OtherDerived, OtherIterator, V, S, T, R, D> const& y) const
    { return y.base() - m_iterator; }

  private:
    Base m_iterator;



};







}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/iterator/strided_iterator.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<typename Iterator,
         typename Size = typename thrust::iterator_difference<Iterator>::type>
class strided_iterator
  : public thrust::iterator_adaptor<
      strided_iterator<Iterator>,
      Iterator
    >
{
  private:
    typedef thrust::iterator_adaptor<strided_iterator<Iterator>,Iterator> super_t;

  public:
    typedef Size stride_type;

    inline __attribute__((host)) __attribute__((device))
    strided_iterator()
      : super_t(), m_stride(1)
    {}

    inline __attribute__((host)) __attribute__((device))
    strided_iterator(const strided_iterator& other)
      : super_t(other), m_stride(other.m_stride)
    {}

    inline __attribute__((host)) __attribute__((device))
    strided_iterator(const Iterator &base, stride_type stride)
      : super_t(base), m_stride(stride)
    {}

    inline __attribute__((host)) __attribute__((device))
    stride_type stride() const
    {
      return m_stride;
    }

  private:
    friend class thrust::iterator_core_access;

    __attribute__((host)) __attribute__((device))
    void increment()
    {
      super_t::base_reference() += stride();
    }

    __attribute__((host)) __attribute__((device))
    void decrement()
    {
      super_t::base_reference() -= stride();
    }

    __attribute__((host)) __attribute__((device))
    void advance(typename super_t::difference_type n)
    {
      super_t::base_reference() += n * stride();
    }

    template<typename OtherIterator>
    __attribute__((host)) __attribute__((device))
    typename super_t::difference_type distance_to(const strided_iterator<OtherIterator> &other) const
    {
      if(other.base() >= this->base())
      {
        return (other.base() - this->base() + (stride() - 1)) / stride();
      }

      return (other.base() - this->base() - (stride() - 1)) / stride();
    }

    stride_type m_stride;
};


template<typename Iterator, typename Size>
__attribute__((host)) __attribute__((device))
strided_iterator<Iterator,Size> make_strided_iterator(Iterator iter, Size stride)
{
  return strided_iterator<Iterator,Size>(iter, stride);
}


}
} } } }
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce.hpp" 2




namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator,
         typename T,
         typename BinaryFunction>
__inline__ __attribute__((always_inline)) __attribute__((device))
T reduce(const bulk_::bounded<bound,bulk_::agent<grainsize> > &exec,
         RandomAccessIterator first,
         RandomAccessIterator last,
         T init,
         BinaryFunction binary_op)
{
  typedef typename bulk_::bounded<bound,bulk_::agent<grainsize> >::size_type size_type;

  size_type n = last - first;

  for(size_type i = 0; i < exec.bound(); ++i)
  {
    if(i < n)
    {
      init = binary_op(init, first[i]);
    }
  }

  return init;
}


namespace detail
{
namespace reduce_detail
{


template<typename ConcurrentGroup, typename RandomAccessIterator, typename Size, typename T, typename BinaryFunction>
__attribute__((device)) T destructive_reduce_n(ConcurrentGroup &g, RandomAccessIterator first, Size n, T init, BinaryFunction binary_op)
{
  typedef int size_type;

  size_type tid = g.this_exec.index();

  Size m = n;

  while(m > 1)
  {
    Size half_m = m >> 1;

    if(tid < half_m)
    {
      T old_val = first[tid];

      first[tid] = binary_op(old_val, first[m - tid - 1]);
    }

    g.wait();

    m -= half_m;
  }

  g.wait();

  T result = init;
  if(n > 0)
  {
    result = binary_op(result,first[0]);
  }

  g.wait();

  return result;
}


}
}


template<std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator, typename T, typename BinaryFunction>
__attribute__((device))
T reduce(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &g,
         RandomAccessIterator first,
         RandomAccessIterator last,
         T init,
         BinaryFunction binary_op)
{
  typedef int size_type;

  const size_type elements_per_group = groupsize * grainsize;

  size_type tid = g.this_exec.index();

  T this_sum;

  bool this_sum_defined = false;

  size_type n = last - first;




  for(size_type offset = 0; offset < n; first += elements_per_group, offset += elements_per_group)
  {
    size_type partition_size = thrust::min<size_type>(elements_per_group, last - first);

    typedef typename thrust::iterator_value<RandomAccessIterator>::type input_type;


    input_type local_inputs[grainsize];



    strided_iterator<RandomAccessIterator,size_type> local_first = make_strided_iterator(first + tid, static_cast<size_type>(groupsize));




    size_type local_size = 0;
    if(partition_size < elements_per_group)
    {
# 163 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce.hpp"
      RandomAccessIterator iter = local_first.base();
      size_type index = tid;
      for(size_type i = 0; i < grainsize; ++i, index += groupsize, iter += groupsize)
      {
        if(index < partition_size)
        {
          local_inputs[i] = *iter;
          ++local_size;
        }
      }
    }
    else
    {
      local_size = grainsize;





      RandomAccessIterator iter = local_first.base();
      for(size_type i = 0; i < grainsize; ++i, iter += groupsize)
      {
        local_inputs[i] = *iter;
      }
    }


    this_sum = this_sum_defined ?
      bulk_::reduce(bulk_::bound<grainsize>(g.this_exec), local_inputs, local_inputs + local_size, this_sum, binary_op) :
      bulk_::reduce(bulk_::bound<grainsize-1>(g.this_exec), local_inputs + 1, local_inputs + local_size, T(local_inputs[0]), binary_op);

    this_sum_defined = true;
  }


  T *buffer = reinterpret_cast<T*>(bulk_::malloc(g, groupsize * sizeof(T)));





  if(this_sum_defined)
  {
    buffer[tid] = this_sum;
  }

  g.wait();


  T result = bulk_::detail::reduce_detail::destructive_reduce_n(g, buffer, thrust::min<size_type>(groupsize,n), init, binary_op);


  bulk_::free(g,buffer);


  return result;
}


template<typename RandomAccessIterator, typename T, typename BinaryFunction>
__attribute__((device))
T reduce(bulk_::concurrent_group<> &g,
         RandomAccessIterator first,
         RandomAccessIterator last,
         T init,
         BinaryFunction binary_op)
{
  typedef int size_type;

  size_type tid = g.this_exec.index();

  T this_sum;

  bool this_sum_defined = false;

  typename thrust::iterator_difference<RandomAccessIterator>::type n = last - first;

  T *buffer = reinterpret_cast<T*>(bulk_::malloc(g, g.size() * sizeof(T)));

  for(size_type i = tid; i < n; i += g.size())
  {
    typedef typename thrust::iterator_value<RandomAccessIterator>::type input_type;
    input_type x = first[i];
    this_sum = this_sum_defined ? binary_op(this_sum, x) : x;

    this_sum_defined = true;
  }

  if(this_sum_defined)
  {
    buffer[tid] = this_sum;
  }

  g.wait();


  T result = detail::reduce_detail::destructive_reduce_n(g, buffer, thrust::min<size_type>(g.size(),n), init, binary_op);

  bulk_::free(g,buffer);

  return result;
}


}
} } } }
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/scan.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/scan.hpp"
       





# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/accumulate.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/accumulate.hpp"
       







namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator,
         typename T,
         typename BinaryFunction>
__inline__ __attribute__((always_inline)) __attribute__((device))
T accumulate(const bounded<bound,bulk_::agent<grainsize> > &exec,
             RandomAccessIterator first,
             RandomAccessIterator last,
             T init,
             BinaryFunction binary_op)
{
  typedef typename bounded<bound,bulk_::agent<grainsize> >::size_type size_type;

  size_type n = last - first;

  for(size_type i = 0; i < exec.bound(); ++i)
  {
    if(i < n)
    {
      init = binary_op(init, first[i]);
    }
  }

  return init;
}


namespace detail
{
namespace accumulate_detail
{




template<typename ConcurrentGroup, typename RandomAccessIterator, typename Size, typename T, typename BinaryFunction>
__attribute__((device)) T destructive_accumulate_n(ConcurrentGroup &g, RandomAccessIterator first, Size n, T init, BinaryFunction binary_op)
{
  typedef typename ConcurrentGroup::size_type size_type;

  size_type tid = g.this_exec.index();

  T x = init;
  if(tid < n)
  {
    x = first[tid];
  }

  g.wait();

  for(size_type offset = 1; offset < g.size(); offset += offset)
  {
    if(tid >= offset && tid - offset < n)
    {
      x = binary_op(first[tid - offset], x);
    }

    g.wait();

    if(tid < n)
    {
      first[tid] = x;
    }

    g.wait();
  }

  return binary_op(init, first[n - 1]);
}


template<std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator, typename T>
struct buffer
{
  typedef typename thrust::iterator_value<RandomAccessIterator>::type value_type;

  union
  {
    uninitialized_array<value_type, groupsize * grainsize> inputs;
    uninitialized_array<T, groupsize> sums;
  };
};


template<std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator, typename T, typename BinaryFunction>
__attribute__((device))
T accumulate(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &g,
             RandomAccessIterator first,
             RandomAccessIterator last,
             T init,
             BinaryFunction binary_op)
{
  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  const size_type elements_per_group = groupsize * grainsize;

  size_type tid = g.this_exec.index();

  T sum = init;

  typename thrust::iterator_difference<RandomAccessIterator>::type n = last - first;

  typedef detail::accumulate_detail::buffer<
    groupsize,
    grainsize,
    RandomAccessIterator,
    T
  > buffer_type;


  buffer_type *buffer = reinterpret_cast<buffer_type*>(bulk_::malloc(g, sizeof(buffer_type)));





  for(; first < last; first += elements_per_group)
  {


    size_type partition_size = thrust::min<size_type>(elements_per_group, last - first);


    bulk_::copy_n(g, first, partition_size, buffer->inputs.data());

    T this_sum;
    size_type local_offset = grainsize * g.this_exec.index();

    size_type local_size = thrust::max<size_type>(0,thrust::min<size_type>(grainsize, partition_size - grainsize * tid));

    if(local_size)
    {
      this_sum = buffer->inputs[local_offset];
      this_sum = bulk_::accumulate(bound<grainsize-1>(g.this_exec),
                                  buffer->inputs.data() + local_offset + 1,
                                  buffer->inputs.data() + local_offset + local_size,
                                  this_sum,
                                  binary_op);
    }

    g.wait();

    if(local_size)
    {
      buffer->sums[tid] = this_sum;
    }

    g.wait();


    sum = accumulate_detail::destructive_accumulate_n(g, buffer->sums.data(), thrust::min<size_type>(groupsize,n), sum, binary_op);
  }


  bulk_::free(g, buffer);


  return sum;
}
}
}


template<std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator, typename T, typename BinaryFunction>
__attribute__((device))
T accumulate(bulk_::concurrent_group<bulk_::agent<grainsize>, groupsize> &g,
             RandomAccessIterator first,
             RandomAccessIterator last,
             T init,
             BinaryFunction binary_op)
{

  if(thrust::detail::is_commutative<BinaryFunction>::value)
  {
    init = bulk_::reduce(g, first, last, init, binary_op);
  }
  else
  {
    init = detail::accumulate_detail::accumulate(g, first, last, init, binary_op);
  }

  return init;
}


}
} } } }
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/scan.hpp" 2






namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<std::size_t bound, std::size_t grainsize, typename RandomAccessIterator1, typename RandomAccessIterator2, typename T, typename BinaryFunction>
__inline__ __attribute__((always_inline)) __attribute__((device))
RandomAccessIterator2
  inclusive_scan(const bounded<bound, bulk_::agent<grainsize> > &exec,
                 RandomAccessIterator1 first,
                 RandomAccessIterator1 last,
                 RandomAccessIterator2 result,
                 T init,
                 BinaryFunction binary_op)
{
  for(int i = 0; i < exec.bound(); ++i)
  {
    if(first + i < last)
    {
      init = binary_op(init, first[i]);
      result[i] = init;
    }
  }

  return result + (last - first);
}


template<std::size_t bound, std::size_t grainsize, typename RandomAccessIterator1, typename RandomAccessIterator2, typename T, typename BinaryFunction>
__inline__ __attribute__((always_inline)) __attribute__((device))
RandomAccessIterator2
  exclusive_scan(const bounded<bound, bulk_::agent<grainsize> > &exec,
                 RandomAccessIterator1 first,
                 RandomAccessIterator1 last,
                 RandomAccessIterator2 result,
                 T init,
                 BinaryFunction binary_op)
{
  for(int i = 0; i < exec.bound(); ++i)
  {
    if(first + i < last)
    {
      result[i] = init;
      init = binary_op(init, first[i]);
    }
  }

  return result + (last - first);
}


namespace detail
{
namespace scan_detail
{


template<typename InputIterator, typename OutputIterator, typename BinaryFunction>
struct scan_intermediate
  : thrust::detail::eval_if<
      thrust::detail::has_result_type<BinaryFunction>::value,
      thrust::detail::result_type<BinaryFunction>,
      thrust::detail::eval_if<
        thrust::detail::is_output_iterator<OutputIterator>::value,
        thrust::iterator_value<InputIterator>,
        thrust::iterator_value<OutputIterator>
      >
    >
{};


template<typename ConcurrentGroup, typename RandomAccessIterator, typename T, typename BinaryFunction>
__attribute__((device)) T inplace_exclusive_scan(ConcurrentGroup &g, RandomAccessIterator first, T init, BinaryFunction binary_op)
{
  typedef typename ConcurrentGroup::size_type size_type;

  size_type tid = g.this_exec.index();

  if(tid == 0)
  {
    first[0] = binary_op(init, first[0]);
  }

  T x = first[tid];

  g.wait();

  for(size_type offset = 1; offset < g.size(); offset += offset)
  {
    if(tid >= offset)
    {
      x = binary_op(first[tid - offset], x);
    }

    g.wait();

    first[tid] = x;

    g.wait();
  }

  T result = first[g.size() - 1];

  if(tid == 0)
  {
    x = init;
  }
  else
  {
    x = first[tid - 1];
  }

  g.wait();

  first[tid] = x;

  g.wait();

  return result;
}


template<typename ConcurrentGroup, typename RandomAccessIterator, typename Size, typename T, typename BinaryFunction>
__attribute__((device)) T small_inplace_exclusive_scan(ConcurrentGroup &g, RandomAccessIterator first, Size n, T init, BinaryFunction binary_op)
{
  typedef typename ConcurrentGroup::size_type size_type;

  size_type tid = g.this_exec.index();

  if(tid == 0)
  {
    first[0] = binary_op(init, first[0]);
  }

  T x = tid < n ? first[tid] : init;

  g.wait();

  for(size_type offset = 1; offset < g.size(); offset += offset)
  {
    if(tid >= offset && tid - offset < n)
    {
      x = binary_op(first[tid - offset], x);
    }

    g.wait();

    if(tid < n)
    {
      first[tid] = x;
    }

    g.wait();
  }

  T result = first[n - 1];

  if(tid < n)
  {
    if(tid == 0)
    {
      x = init;
    }
    else
    {
      x = first[tid - 1];
    }
  }

  g.wait();

  if(tid < n)
  {
    first[tid] = x;
  }

  g.wait();

  return result;
}



template<typename ConcurrentGroup, typename RandomAccessIterator, typename Size, typename T, typename BinaryFunction>
__attribute__((device)) T bounded_inplace_exclusive_scan(ConcurrentGroup &g, RandomAccessIterator first, Size n, T init, BinaryFunction binary_op)
{
  return (n == g.size()) ?
    inplace_exclusive_scan(g, first, init, binary_op) :
    small_inplace_exclusive_scan(g, first, n, init, binary_op);
}


template<bool inclusive,
         std::size_t bound, std::size_t groupsize, std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename T,
         typename BinaryFunction>
__attribute__((device))





T
scan(bulk_::bounded<
       bound,
       bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>
     > &g,
     RandomAccessIterator1 first, RandomAccessIterator1 last,
     RandomAccessIterator2 result,
     T carry_in,
     BinaryFunction binary_op)
{
  typedef typename thrust::iterator_value<RandomAccessIterator1>::type input_type;

  typedef typename scan_intermediate<
    RandomAccessIterator1,
    RandomAccessIterator2,
    BinaryFunction
  >::type intermediate_type;

  typedef typename bulk_::bounded<
    bound,
    bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>
  >::size_type size_type;

  size_type tid = g.this_exec.index();
  size_type n = last - first;


  input_type local_inputs[grainsize];

  size_type local_offset = grainsize * tid;
  size_type local_size = thrust::max<size_type>(0,thrust::min<size_type>(grainsize, n - grainsize * tid));

  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), first + local_offset, local_size, local_inputs);


  intermediate_type x;

  if(local_size)
  {
    x = local_inputs[0];
    x = bulk_::accumulate(bulk_::bound<grainsize-1>(g.this_exec), local_inputs + 1, local_inputs + local_size, x, binary_op);
  }

  g.wait();

  if(local_size)
  {
    result[tid] = x;
  }

  g.wait();


  const size_type spine_n = (n >= g.size() * g.this_exec.grainsize()) ? g.size() : (n + g.this_exec.grainsize() - 1) / g.this_exec.grainsize();




  carry_in = bounded_inplace_exclusive_scan(g, result, spine_n, carry_in, binary_op);

  if(local_size)
  {
    x = result[tid];
  }

  g.wait();

  if(inclusive)
  {
    bulk_::inclusive_scan(bulk_::bound<grainsize>(g.this_exec), local_inputs, local_inputs + local_size, result + local_offset, x, binary_op);
  }
  else
  {
    bulk_::exclusive_scan(bulk_::bound<grainsize>(g.this_exec), local_inputs, local_inputs + local_size, result + local_offset, x, binary_op);
  }

  g.wait();

  return carry_in;
}


template<std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator1, typename RandomAccessIterator2, typename BinaryFunction>
struct scan_buffer
{
  typedef typename thrust::iterator_value<RandomAccessIterator1>::type input_type;

  typedef typename scan_intermediate<
    RandomAccessIterator1,
    RandomAccessIterator2,
    BinaryFunction
  >::type intermediate_type;

  union
  {
    uninitialized_array<input_type, groupsize * grainsize> inputs;
    uninitialized_array<intermediate_type, groupsize * grainsize> results;
  };
};


template<bool inclusive, std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator1, typename RandomAccessIterator2, typename T, typename BinaryFunction>
__attribute__((device)) void scan_with_buffer(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &g,
                                 RandomAccessIterator1 first, RandomAccessIterator1 last,
                                 RandomAccessIterator2 result,
                                 T carry_in,
                                 BinaryFunction binary_op,
                                 scan_buffer<groupsize,grainsize,RandomAccessIterator1,RandomAccessIterator2,BinaryFunction> &buffer)
{
  typedef scan_buffer<
    groupsize,
    grainsize,
    RandomAccessIterator1,
    RandomAccessIterator2,
    BinaryFunction
  > buffer_type;

  typedef typename buffer_type::input_type input_type;
  typedef typename buffer_type::intermediate_type intermediate_type;




  union {
    input_type *inputs;
    intermediate_type *results;
  } stage;

  stage.inputs = buffer.inputs.data();

  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  size_type tid = g.this_exec.index();

  const size_type elements_per_group = groupsize * grainsize;

  for(; first < last; first += elements_per_group, result += elements_per_group)
  {
    size_type partition_size = thrust::min<size_type>(elements_per_group, last - first);


    bulk_::copy_n(g, first, partition_size, stage.inputs);

    carry_in = scan<inclusive>(bulk_::bound<elements_per_group>(g),
                               stage.inputs, stage.inputs + partition_size,
                               stage.results,
                               carry_in,
                               binary_op);


    bulk_::copy_n(g, stage.results, partition_size, result);
  }
}


}
}


template<std::size_t bound,
         std::size_t groupsize,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename T,
         typename BinaryFunction>
__attribute__((device))
typename thrust::detail::enable_if<
  bound <= groupsize * grainsize,
  RandomAccessIterator2
>::type
inclusive_scan(bulk_::bounded<
                 bound,
                 bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>
               > &g,
               RandomAccessIterator1 first, RandomAccessIterator1 last,
               RandomAccessIterator2 result,
               T carry_in,
               BinaryFunction binary_op)
{
  detail::scan_detail::scan<true>(g, first, last, result, carry_in, binary_op);
  return result + (last - first);
}


template<std::size_t bound,
         std::size_t groupsize,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename BinaryFunction>
__attribute__((device))
typename thrust::detail::enable_if<
  bound <= groupsize * grainsize,
  RandomAccessIterator2
>::type
inclusive_scan(bulk_::bounded<
                 bound,
                 bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>
               > &g,
               RandomAccessIterator1 first, RandomAccessIterator1 last,
               RandomAccessIterator2 result,
               BinaryFunction binary_op)
{
  if(bound > 0 && first < last)
  {
    typename thrust::iterator_value<RandomAccessIterator1>::type init = *first;


    g.wait();

    if(g.this_exec.index() == 0)
    {
      *result = init;
    }

    detail::scan_detail::scan<true>(g, first + 1, last, result + 1, init, binary_op);
  }

  return result + (last - first);
}


template<std::size_t groupsize,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename T,
         typename BinaryFunction>
__attribute__((device)) void inclusive_scan(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &g,
                               RandomAccessIterator1 first, RandomAccessIterator1 last,
                               RandomAccessIterator2 result,
                               T init,
                               BinaryFunction binary_op)
{
  typedef detail::scan_detail::scan_buffer<groupsize,grainsize,RandomAccessIterator1,RandomAccessIterator2,BinaryFunction> buffer_type;


  buffer_type *buffer = reinterpret_cast<buffer_type*>(bulk_::malloc(g, sizeof(buffer_type)));

  if(bulk_::is_on_chip(buffer))
  {
    detail::scan_detail::scan_with_buffer<true>(g, first, last, result, init, binary_op, *bulk_::on_chip_cast(buffer));
  }
  else
  {
    detail::scan_detail::scan_with_buffer<true>(g, first, last, result, init, binary_op, *buffer);
  }

  bulk_::free(g, buffer);




}


template<std::size_t size,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename BinaryFunction>
__attribute__((device))
RandomAccessIterator2
inclusive_scan(bulk_::concurrent_group<bulk_::agent<grainsize>,size> &this_group,
               RandomAccessIterator1 first,
               RandomAccessIterator1 last,
               RandomAccessIterator2 result,
               BinaryFunction binary_op)
{
  if(first < last)
  {




    typename detail::scan_detail::scan_intermediate<
      RandomAccessIterator1,
      RandomAccessIterator2,
      BinaryFunction
    >::type init = *first;


    this_group.wait();

    if(this_group.this_exec.index() == 0)
    {
      *result = init;
    }

    bulk_::inclusive_scan(this_group, first + 1, last, result + 1, init, binary_op);
  }

  return result + (last - first);
}


template<std::size_t bound, std::size_t groupsize, std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename T,
         typename BinaryFunction>
__attribute__((device))
typename thrust::detail::enable_if<
  bound <= groupsize * grainsize,
  RandomAccessIterator2
>::type
exclusive_scan(bulk_::bounded<
                 bound,
                 bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>
               > &g,
               RandomAccessIterator1 first, RandomAccessIterator1 last,
               RandomAccessIterator2 result,
               T carry_in,
               BinaryFunction binary_op)
{
  detail::scan_detail::scan<true>(g, first, last, result, carry_in, binary_op);
  return result + (last - first);
}


template<std::size_t groupsize,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename T,
         typename BinaryFunction>
__attribute__((device))
typename thrust::detail::enable_if<
  (groupsize > 0),
  RandomAccessIterator2
>::type
exclusive_scan(bulk_::concurrent_group<agent<grainsize>,groupsize> &g,
               RandomAccessIterator1 first, RandomAccessIterator1 last,
               RandomAccessIterator2 result,
               T init,
               BinaryFunction binary_op)
{
  typedef detail::scan_detail::scan_buffer<groupsize,grainsize,RandomAccessIterator1,RandomAccessIterator2,BinaryFunction> buffer_type;


  buffer_type *buffer = reinterpret_cast<buffer_type*>(bulk_::malloc(g, sizeof(buffer_type)));

  if(bulk_::is_on_chip(buffer))
  {
    detail::scan_detail::scan_with_buffer<false>(g, first, last, result, init, binary_op, *bulk_::on_chip_cast(buffer));
  }
  else
  {
    detail::scan_detail::scan_with_buffer<false>(g, first, last, result, init, binary_op, *buffer);
  }

  bulk_::free(g, buffer);





  return result + (last - first);
}


}
} } } }
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/merge.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/merge.hpp"
       





# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/gather.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/gather.hpp"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/permutation_iterator.h" 1
# 32 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/permutation_iterator.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/permutation_iterator_base.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/permutation_iterator_base.h"
       






namespace thrust
{

template<typename,typename> class permutation_iterator;


namespace detail
{

template<typename ElementIterator,
         typename IndexIterator>
  struct permutation_iterator_base
{
  typedef typename thrust::iterator_system<ElementIterator>::type System1;
  typedef typename thrust::iterator_system<IndexIterator>::type System2;

  typedef thrust::iterator_adaptor<
    permutation_iterator<ElementIterator,IndexIterator>,
    IndexIterator,
    typename thrust::iterator_value<ElementIterator>::type,
    typename detail::minimum_system<System1,System2>::type,
    thrust::use_default,
    typename thrust::iterator_reference<ElementIterator>::type
  > type;
};

}

}
# 37 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/permutation_iterator.h" 2



namespace thrust
{
# 118 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/permutation_iterator.h"
template <typename ElementIterator,
          typename IndexIterator>
  class permutation_iterator
    : public thrust::detail::permutation_iterator_base<
        ElementIterator,
        IndexIterator
      >::type
{


  private:
    typedef typename detail::permutation_iterator_base<ElementIterator,IndexIterator>::type super_t;

    friend class thrust::iterator_core_access;



  public:



    __attribute__((host)) __attribute__((device))
    permutation_iterator()
      : m_element_iterator() {}
# 150 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/permutation_iterator.h"
    __attribute__((host)) __attribute__((device))
    explicit permutation_iterator(ElementIterator x, IndexIterator y)
      : super_t(y), m_element_iterator(x) {}




    template<typename OtherElementIterator, typename OtherIndexIterator>
    __attribute__((host)) __attribute__((device))
    permutation_iterator(permutation_iterator<OtherElementIterator,OtherIndexIterator> const &r

    , typename detail::enable_if_convertible<OtherElementIterator, ElementIterator>::type* = 0
    , typename detail::enable_if_convertible<OtherIndexIterator, IndexIterator>::type* = 0
    )
      : super_t(r.base()), m_element_iterator(r.m_element_iterator)
    {}



  private:
    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    typename super_t::reference dereference() const
    {
      return *(m_element_iterator + *this->base());
    }


    template<typename,typename> friend class permutation_iterator;

    ElementIterator m_element_iterator;


};
# 196 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/permutation_iterator.h"
template<typename ElementIterator, typename IndexIterator>
__attribute__((host)) __attribute__((device))
permutation_iterator<ElementIterator,IndexIterator> make_permutation_iterator(ElementIterator e, IndexIterator i)
{
  return permutation_iterator<ElementIterator,IndexIterator>(e,i);
}







}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/gather.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{



template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename RandomAccessIterator3>
__inline__ __attribute__((always_inline)) __attribute__((device))
RandomAccessIterator3 gather(const bounded<bound,agent<grainsize> > &,
                             RandomAccessIterator1 map_first,
                             RandomAccessIterator1 map_last,
                             RandomAccessIterator2 input_first,
                             RandomAccessIterator3 result)
{
  typedef typename bulk_::bounded<bound,bulk_::agent<grainsize> >::size_type size_type;

  size_type n = map_last - map_first;

  if(bound <= n)
  {
    for(size_type i = 0; i < bound; ++i)
    {
      result[i] = input_first[map_first[i]];
    }
  }
  else
  {
    for(size_type i = 0; i < bound; ++i)
    {
      if(i < n)
      {
        result[i] = input_first[map_first[i]];
      }
    }
  }

  return result + n;
}


template<typename ExecutionGroup, typename RandomAccessIterator1, typename RandomAccessIterator2, typename RandomAccessIterator3>
__inline__ __attribute__((always_inline)) __attribute__((device))
RandomAccessIterator3 gather(ExecutionGroup &g,
                             RandomAccessIterator1 map_first,
                             RandomAccessIterator1 map_last,
                             RandomAccessIterator2 input_first,
                             RandomAccessIterator3 result)
{
  return bulk_::copy_n(g,
                      thrust::make_permutation_iterator(input_first, map_first),
                      map_last - map_first,
                      result);
}


}
} } } }
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/merge.hpp" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/counting_iterator.h" 1
# 32 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/counting_iterator.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/counting_iterator.inl" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/counting_iterator.inl"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/numeric_traits.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/numeric_traits.h"
       


# 1 "/usr/include/c++/4.8/limits" 1 3
# 40 "/usr/include/c++/4.8/limits" 3
       
# 41 "/usr/include/c++/4.8/limits" 3
# 147 "/usr/include/c++/4.8/limits" 3
namespace std __attribute__ ((__visibility__ ("default")))
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 191 "/usr/include/c++/4.8/limits" 3
  struct __numeric_limits_base
  {


    static const bool is_specialized = false;




    static const int digits = 0;


    static const int digits10 = 0;
# 212 "/usr/include/c++/4.8/limits" 3
    static const bool is_signed = false;


    static const bool is_integer = false;




    static const bool is_exact = false;



    static const int radix = 0;



    static const int min_exponent = 0;



    static const int min_exponent10 = 0;




    static const int max_exponent = 0;



    static const int max_exponent10 = 0;


    static const bool has_infinity = false;



    static const bool has_quiet_NaN = false;



    static const bool has_signaling_NaN = false;


    static const float_denorm_style has_denorm = denorm_absent;



    static const bool has_denorm_loss = false;



    static const bool is_iec559 = false;




    static const bool is_bounded = false;
# 277 "/usr/include/c++/4.8/limits" 3
    static const bool is_modulo = false;


    static const bool traps = false;


    static const bool tinyness_before = false;




    static const float_round_style round_style =
          round_toward_zero;
  };
# 303 "/usr/include/c++/4.8/limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static _Tp
      min() throw() { return _Tp(); }


      static _Tp
      max() throw() { return _Tp(); }
# 324 "/usr/include/c++/4.8/limits" 3
      static _Tp
      epsilon() throw() { return _Tp(); }


      static _Tp
      round_error() throw() { return _Tp(); }


      static _Tp
      infinity() throw() { return _Tp(); }



      static _Tp
      quiet_NaN() throw() { return _Tp(); }



      static _Tp
      signaling_NaN() throw() { return _Tp(); }




      static _Tp
      denorm_min() throw() { return _Tp(); }
    };
# 370 "/usr/include/c++/4.8/limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static const bool is_specialized = true;

      static bool
      min() throw() { return false; }

      static bool
      max() throw() { return true; }





      static const int digits = 1;
      static const int digits10 = 0;



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static bool
      epsilon() throw() { return false; }

      static bool
      round_error() throw() { return false; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static bool
      infinity() throw() { return false; }

      static bool
      quiet_NaN() throw() { return false; }

      static bool
      signaling_NaN() throw() { return false; }

      static bool
      denorm_min() throw() { return false; }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;




      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static const bool is_specialized = true;

      static char
      min() throw() { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static char
      max() throw() { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }






      static const int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static const int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((char)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static char
      epsilon() throw() { return 0; }

      static char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static
      char infinity() throw() { return char(); }

      static char
      quiet_NaN() throw() { return char(); }

      static char
      signaling_NaN() throw() { return char(); }

      static char
      denorm_min() throw() { return static_cast<char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = !is_signed;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static const bool is_specialized = true;

      static signed char
      min() throw() { return -127 - 1; }

      static signed char
      max() throw() { return 127; }






      static const int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static const int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static signed char
      epsilon() throw() { return 0; }

      static signed char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static signed char
      infinity() throw() { return static_cast<signed char>(0); }

      static signed char
      quiet_NaN() throw() { return static_cast<signed char>(0); }

      static signed char
      signaling_NaN() throw()
      { return static_cast<signed char>(0); }

      static signed char
      denorm_min() throw()
      { return static_cast<signed char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static const bool is_specialized = true;

      static unsigned char
      min() throw() { return 0; }

      static unsigned char
      max() throw() { return 127 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned char
      epsilon() throw() { return 0; }

      static unsigned char
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned char
      infinity() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      quiet_NaN() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      signaling_NaN() throw()
      { return static_cast<unsigned char>(0); }

      static unsigned char
      denorm_min() throw()
      { return static_cast<unsigned char>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static const bool is_specialized = true;

      static wchar_t
      min() throw() { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static wchar_t
      max() throw() { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }






      static const int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static const int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = ((wchar_t)(-1) < 0);
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static wchar_t
      epsilon() throw() { return 0; }

      static wchar_t
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static wchar_t
      infinity() throw() { return wchar_t(); }

      static wchar_t
      quiet_NaN() throw() { return wchar_t(); }

      static wchar_t
      signaling_NaN() throw() { return wchar_t(); }

      static wchar_t
      denorm_min() throw() { return wchar_t(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = !is_signed;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };
# 841 "/usr/include/c++/4.8/limits" 3
  template<>
    struct numeric_limits<short>
    {
      static const bool is_specialized = true;

      static short
      min() throw() { return -32767 - 1; }

      static short
      max() throw() { return 32767; }






      static const int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static const int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static short
      epsilon() throw() { return 0; }

      static short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static short
      infinity() throw() { return short(); }

      static short
      quiet_NaN() throw() { return short(); }

      static short
      signaling_NaN() throw() { return short(); }

      static short
      denorm_min() throw() { return short(); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static const bool is_specialized = true;

      static unsigned short
      min() throw() { return 0; }

      static unsigned short
      max() throw() { return 32767 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned short
      epsilon() throw() { return 0; }

      static unsigned short
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned short
      infinity() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      quiet_NaN() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      signaling_NaN() throw()
      { return static_cast<unsigned short>(0); }

      static unsigned short
      denorm_min() throw()
      { return static_cast<unsigned short>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static const bool is_specialized = true;

      static int
      min() throw() { return -2147483647 - 1; }

      static int
      max() throw() { return 2147483647; }






      static const int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static const int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static int
      epsilon() throw() { return 0; }

      static int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static int
      infinity() throw() { return static_cast<int>(0); }

      static int
      quiet_NaN() throw() { return static_cast<int>(0); }

      static int
      signaling_NaN() throw() { return static_cast<int>(0); }

      static int
      denorm_min() throw() { return static_cast<int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static const bool is_specialized = true;

      static unsigned int
      min() throw() { return 0; }

      static unsigned int
      max() throw() { return 2147483647 * 2U + 1; }






      static const int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned int
      epsilon() throw() { return 0; }

      static unsigned int
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned int
      infinity() throw() { return static_cast<unsigned int>(0); }

      static unsigned int
      quiet_NaN() throw()
      { return static_cast<unsigned int>(0); }

      static unsigned int
      signaling_NaN() throw()
      { return static_cast<unsigned int>(0); }

      static unsigned int
      denorm_min() throw()
      { return static_cast<unsigned int>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static const bool is_specialized = true;

      static long
      min() throw() { return -9223372036854775807L - 1; }

      static long
      max() throw() { return 9223372036854775807L; }






      static const int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static const int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long
      epsilon() throw() { return 0; }

      static long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long
      infinity() throw() { return static_cast<long>(0); }

      static long
      quiet_NaN() throw() { return static_cast<long>(0); }

      static long
      signaling_NaN() throw() { return static_cast<long>(0); }

      static long
      denorm_min() throw() { return static_cast<long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static const bool is_specialized = true;

      static unsigned long
      min() throw() { return 0; }

      static unsigned long
      max() throw() { return 9223372036854775807L * 2UL + 1; }






      static const int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long
      epsilon() throw() { return 0; }

      static unsigned long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long
      infinity() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      quiet_NaN() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      signaling_NaN() throw()
      { return static_cast<unsigned long>(0); }

      static unsigned long
      denorm_min() throw()
      { return static_cast<unsigned long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static const bool is_specialized = true;

      static long long
      min() throw() { return -9223372036854775807LL - 1; }

      static long long
      max() throw() { return 9223372036854775807LL; }






      static const int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static const int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static long long
      epsilon() throw() { return 0; }

      static long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static long long
      infinity() throw() { return static_cast<long long>(0); }

      static long long
      quiet_NaN() throw() { return static_cast<long long>(0); }

      static long long
      signaling_NaN() throw()
      { return static_cast<long long>(0); }

      static long long
      denorm_min() throw() { return static_cast<long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static const bool is_specialized = true;

      static unsigned long long
      min() throw() { return 0; }

      static unsigned long long
      max() throw() { return 9223372036854775807LL * 2ULL + 1; }






      static const int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned long long
      epsilon() throw() { return 0; }

      static unsigned long long
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned long long
      infinity() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      quiet_NaN() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      signaling_NaN() throw()
      { return static_cast<unsigned long long>(0); }

      static unsigned long long
      denorm_min() throw()
      { return static_cast<unsigned long long>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<__int128>
    {
      static const bool is_specialized = true;

      static __int128
      min() throw() { return (((__int128)(-1) < 0) ? -(((__int128)(-1) < 0) ? (((((__int128)1 << ((sizeof(__int128) * 8 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0) - 1 : (__int128)0); }

      static __int128
      max() throw() { return (((__int128)(-1) < 0) ? (((((__int128)1 << ((sizeof(__int128) * 8 - ((__int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(__int128)0); }






      static const int digits
       = (sizeof(__int128) * 8 - ((__int128)(-1) < 0));
      static const int digits10
       = ((sizeof(__int128) * 8 - ((__int128)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = true;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static __int128
      epsilon() throw() { return 0; }

      static __int128
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static __int128
      infinity() throw()
      { return static_cast<__int128>(0); }

      static __int128
      quiet_NaN() throw()
      { return static_cast<__int128>(0); }

      static __int128
      signaling_NaN() throw()
      { return static_cast<__int128>(0); }

      static __int128
      denorm_min() throw()
      { return static_cast<__int128>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps
       = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned __int128>
    {
      static const bool is_specialized = true;

      static unsigned __int128
      min() throw() { return 0; }

      static unsigned __int128
      max() throw() { return (((unsigned __int128)(-1) < 0) ? (((((unsigned __int128)1 << ((sizeof(unsigned __int128) * 8 - ((unsigned __int128)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(unsigned __int128)0); }






      static const int digits
       = (sizeof(unsigned __int128) * 8 - ((unsigned __int128)(-1) < 0));
      static const int digits10
       = ((sizeof(unsigned __int128) * 8 - ((unsigned __int128)(-1) < 0)) * 643L / 2136);



      static const bool is_signed = false;
      static const bool is_integer = true;
      static const bool is_exact = true;
      static const int radix = 2;

      static unsigned __int128
      epsilon() throw() { return 0; }

      static unsigned __int128
      round_error() throw() { return 0; }

      static const int min_exponent = 0;
      static const int min_exponent10 = 0;
      static const int max_exponent = 0;
      static const int max_exponent10 = 0;

      static const bool has_infinity = false;
      static const bool has_quiet_NaN = false;
      static const bool has_signaling_NaN = false;
      static const float_denorm_style has_denorm
       = denorm_absent;
      static const bool has_denorm_loss = false;

      static unsigned __int128
      infinity() throw()
      { return static_cast<unsigned __int128>(0); }

      static unsigned __int128
      quiet_NaN() throw()
      { return static_cast<unsigned __int128>(0); }

      static unsigned __int128
      signaling_NaN() throw()
      { return static_cast<unsigned __int128>(0); }

      static unsigned __int128
      denorm_min() throw()
      { return static_cast<unsigned __int128>(0); }

      static const bool is_iec559 = false;
      static const bool is_bounded = true;
      static const bool is_modulo = true;

      static const bool traps = true;
      static const bool tinyness_before = false;
      static const float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<float>
    {
      static const bool is_specialized = true;

      static float
      min() throw() { return 1.17549435082228750797e-38F; }

      static float
      max() throw() { return 3.40282346638528859812e+38F; }






      static const int digits = 24;
      static const int digits10 = 6;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static float
      epsilon() throw() { return 1.19209289550781250000e-7F; }

      static float
      round_error() throw() { return 0.5F; }

      static const int min_exponent = (-125);
      static const int min_exponent10 = (-37);
      static const int max_exponent = 128;
      static const int max_exponent10 = 38;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
       = false;

      static float
      infinity() throw() { return __builtin_huge_valf(); }

      static float
      quiet_NaN() throw() { return __builtin_nanf(""); }

      static float
      signaling_NaN() throw() { return __builtin_nansf(""); }

      static float
      denorm_min() throw() { return 1.40129846432481707092e-45F; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static const bool is_specialized = true;

      static double
      min() throw() { return double(2.22507385850720138309e-308L); }

      static double
      max() throw() { return double(1.79769313486231570815e+308L); }






      static const int digits = 53;
      static const int digits10 = 15;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static double
      epsilon() throw() { return double(2.22044604925031308085e-16L); }

      static double
      round_error() throw() { return 0.5; }

      static const int min_exponent = (-1021);
      static const int min_exponent10 = (-307);
      static const int max_exponent = 1024;
      static const int max_exponent10 = 308;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
        = false;

      static double
      infinity() throw() { return __builtin_huge_val(); }

      static double
      quiet_NaN() throw() { return __builtin_nan(""); }

      static double
      signaling_NaN() throw() { return __builtin_nans(""); }

      static double
      denorm_min() throw() { return double(4.94065645841246544177e-324L); }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before
       = false;
      static const float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static const bool is_specialized = true;

      static long double
      min() throw() { return 3.36210314311209350626e-4932L; }

      static long double
      max() throw() { return 1.18973149535723176502e+4932L; }






      static const int digits = 64;
      static const int digits10 = 18;




      static const bool is_signed = true;
      static const bool is_integer = false;
      static const bool is_exact = false;
      static const int radix = 2;

      static long double
      epsilon() throw() { return 1.08420217248550443401e-19L; }

      static long double
      round_error() throw() { return 0.5L; }

      static const int min_exponent = (-16381);
      static const int min_exponent10 = (-4931);
      static const int max_exponent = 16384;
      static const int max_exponent10 = 4932;

      static const bool has_infinity = 1;
      static const bool has_quiet_NaN = 1;
      static const bool has_signaling_NaN = has_quiet_NaN;
      static const float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static const bool has_denorm_loss
 = false;

      static long double
      infinity() throw() { return __builtin_huge_vall(); }

      static long double
      quiet_NaN() throw() { return __builtin_nanl(""); }

      static long double
      signaling_NaN() throw() { return __builtin_nansl(""); }

      static long double
      denorm_min() throw() { return 3.64519953188247460253e-4951L; }

      static const bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static const bool is_bounded = true;
      static const bool is_modulo = false;

      static const bool traps = false;
      static const bool tinyness_before =
      false;
      static const float_round_style round_style =
            round_to_nearest;
    };






}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/numeric_traits.h" 2



namespace thrust
{

namespace detail
{


typedef long long intmax_t;

template<typename Number>
  struct is_signed
    : integral_constant<bool, std::numeric_limits<Number>::is_signed>
{};


template<typename T>
  struct num_digits
    : eval_if<
        std::numeric_limits<T>::is_specialized,
        integral_constant<
          int,
          std::numeric_limits<T>::digits
        >,
        integral_constant<
          int,
          sizeof(T) * std::numeric_limits<unsigned char>::digits - (is_signed<T>::value ? 1 : 0)
        >
      >::type
{};


template<typename Integer>
  struct integer_difference
# 70 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/numeric_traits.h"
{
  private:


    template<bool x, bool y>
      struct and_
    {
      static const bool value = false;
    };

    template<bool y>
      struct and_<true,y>
    {
      static const bool value = y;
    };

  public:
    typedef typename
      eval_if<
        and_<
          std::numeric_limits<Integer>::is_signed,

          (!std::numeric_limits<Integer>::is_bounded || (int(std::numeric_limits<Integer>::digits) + 1 >= num_digits<intmax_t>::value))
        >::value,
        identity_<Integer>,
        eval_if<
          int(std::numeric_limits<Integer>::digits) + 1 < num_digits<signed int>::value,
          identity_<signed int>,
          eval_if<
            int(std::numeric_limits<Integer>::digits) + 1 < num_digits<signed long>::value,
            identity_<signed long>,
            identity_<intmax_t>
          >
        >
      >::type type;
};


template<typename Number>
  struct numeric_difference
    : eval_if<
      is_integral<Number>::value,
      integer_difference<Number>,
      identity_<Number>
    >
{};


template<typename Number>
__attribute__((host)) __attribute__((device))
typename numeric_difference<Number>::type
numeric_distance(Number x, Number y)
{
  typedef typename numeric_difference<Number>::type difference_type;
  return difference_type(y) - difference_type(x);
}

}

}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/counting_iterator.inl" 2

# 1 "/usr/include/c++/4.8/cstddef" 1 3
# 39 "/usr/include/c++/4.8/cstddef" 3
       
# 40 "/usr/include/c++/4.8/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h" 1 3 4
# 42 "/usr/include/c++/4.8/cstddef" 2 3
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/counting_iterator.inl" 2

namespace thrust
{


template <typename Incrementable, typename System, typename Traversal, typename Difference>
  class counting_iterator;

namespace detail
{

template <typename Incrementable, typename System, typename Traversal, typename Difference>
  struct counting_iterator_base
{
  typedef typename thrust::detail::eval_if<

    thrust::detail::is_same<System,use_default>::value,
    thrust::detail::identity_<thrust::any_system_tag>,
    thrust::detail::identity_<System>
  >::type system;

  typedef typename thrust::detail::ia_dflt_help<
      Traversal,
      thrust::detail::eval_if<
          thrust::detail::is_numeric<Incrementable>::value,
          thrust::detail::identity_<random_access_traversal_tag>,
          thrust::iterator_traversal<Incrementable>
      >
  >::type traversal;



  typedef typename thrust::detail::ia_dflt_help<
    Difference,
    thrust::detail::eval_if<
      thrust::detail::is_numeric<Incrementable>::value,
        thrust::detail::eval_if<
          thrust::detail::is_integral<Incrementable>::value,
          thrust::detail::numeric_difference<Incrementable>,
          thrust::detail::identity_<std::ptrdiff_t>
        >,
      thrust::iterator_difference<Incrementable>
    >
  >::type difference;





  typedef thrust::iterator_adaptor<
    counting_iterator<Incrementable, System, Traversal, Difference>,
    Incrementable,
    Incrementable,
    system,
    traversal,
    Incrementable,
    difference
  > type;
};


template<typename Difference, typename Incrementable1, typename Incrementable2>
  struct iterator_distance
{
  __attribute__((host)) __attribute__((device))
  static Difference distance(Incrementable1 x, Incrementable2 y)
  {
    return y - x;
  }
};


template<typename Difference, typename Incrementable1, typename Incrementable2>
  struct number_distance
{
  __attribute__((host)) __attribute__((device))
  static Difference distance(Incrementable1 x, Incrementable2 y)
  {
      return static_cast<Difference>(numeric_distance(x,y));
  }
};


template<typename Difference, typename Incrementable1, typename Incrementable2, typename Enable = void>
  struct counting_iterator_equal
{
  __attribute__((host)) __attribute__((device))
  static bool equal(Incrementable1 x, Incrementable2 y)
  {
    return x == y;
  }
};



template<typename Difference, typename Incrementable1, typename Incrementable2>
  struct counting_iterator_equal<
    Difference,
    Incrementable1,
    Incrementable2,
    typename thrust::detail::enable_if<
      thrust::detail::is_floating_point<Incrementable1>::value ||
      thrust::detail::is_floating_point<Incrementable2>::value
    >::type
  >
{
  __attribute__((host)) __attribute__((device))
  static bool equal(Incrementable1 x, Incrementable2 y)
  {
    typedef number_distance<Difference,Incrementable1,Incrementable2> d;
    return d::distance(x,y) == 0;
  }
};


}
}
# 41 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/counting_iterator.h" 2

namespace thrust
{
# 128 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/counting_iterator.h"
template<typename Incrementable,
         typename System = use_default,
         typename Traversal = use_default,
         typename Difference = use_default>
  class counting_iterator
    : public detail::counting_iterator_base<Incrementable, System, Traversal, Difference>::type
{


    typedef typename detail::counting_iterator_base<Incrementable, System, Traversal, Difference>::type super_t;

    friend class thrust::iterator_core_access;

  public:
    typedef typename super_t::reference reference;
    typedef typename super_t::difference_type difference_type;







    __attribute__((host)) __attribute__((device))
    counting_iterator(void){};






    __attribute__((host)) __attribute__((device))
    counting_iterator(counting_iterator const &rhs):super_t(rhs.base()){}






    template<typename OtherSystem>
    __attribute__((host)) __attribute__((device))
    counting_iterator(counting_iterator<Incrementable, OtherSystem, Traversal, Difference> const &rhs,
                      typename thrust::detail::enable_if_convertible<
                        typename thrust::iterator_system<counting_iterator<Incrementable,OtherSystem,Traversal,Difference> >::type,
                        typename thrust::iterator_system<super_t>::type
                      >::type * = 0)
      : super_t(rhs.base()){}







    __attribute__((host)) __attribute__((device))
    explicit counting_iterator(Incrementable x):super_t(x){}



  private:
    __attribute__((host)) __attribute__((device))
    reference dereference(void) const
    {
      return this->base_reference();
    }


    template <typename OtherIncrementable, typename OtherSystem, typename OtherTraversal, typename OtherDifference>
    __attribute__((host)) __attribute__((device))
    bool equal(counting_iterator<OtherIncrementable, OtherSystem, OtherTraversal, OtherDifference> const& y) const
    {
      typedef thrust::detail::counting_iterator_equal<difference_type,Incrementable,OtherIncrementable> e;
      return e::equal(this->base(), y.base());
    }

    template <class OtherIncrementable>
    __attribute__((host)) __attribute__((device))
    difference_type
    distance_to(counting_iterator<OtherIncrementable, System, Traversal, Difference> const& y) const
    {
      typedef typename
      thrust::detail::eval_if<
        thrust::detail::is_numeric<Incrementable>::value,
        thrust::detail::identity_<thrust::detail::number_distance<difference_type, Incrementable, OtherIncrementable> >,
        thrust::detail::identity_<thrust::detail::iterator_distance<difference_type, Incrementable, OtherIncrementable> >
      >::type d;

      return d::distance(this->base(), y.base());
    }



};
# 229 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/counting_iterator.h"
template <typename Incrementable>
inline __attribute__((host)) __attribute__((device))
counting_iterator<Incrementable> make_counting_iterator(Incrementable x)
{
  return counting_iterator<Incrementable>(x);
}







}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/merge.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/join_iterator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/join_iterator.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/join_iterator.h"
namespace thrust
{
namespace detail
{


template<typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename Difference,
         typename Reference>
class join_iterator;


namespace join_iterator_detail
{


template<typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename Difference,
         typename Reference>
struct join_iterator_base
{
  typedef typename thrust::detail::remove_reference<Reference>::type value_type;

  typedef typename thrust::iterator_system<RandomAccessIterator1>::type system1;
  typedef typename thrust::iterator_system<RandomAccessIterator2>::type system2;
  typedef typename thrust::detail::minimum_system<system1,system2>::type system;

  typedef thrust::iterator_adaptor<
    join_iterator<RandomAccessIterator1,RandomAccessIterator2,Difference,Reference>,
    thrust::counting_iterator<Difference>,
    value_type,
    system,
    thrust::random_access_traversal_tag,
    Reference,
    Difference
  > type;
};


}


template<typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename Difference = typename thrust::iterator_difference<RandomAccessIterator1>::type,
         typename Reference = typename thrust::iterator_value<RandomAccessIterator1>::type>
class join_iterator
  : public join_iterator_detail::join_iterator_base<RandomAccessIterator1, RandomAccessIterator2, Difference, Reference>::type
{
  private:
    typedef typename join_iterator_detail::join_iterator_base<RandomAccessIterator1, RandomAccessIterator2, Difference, Reference>::type super_t;
    typedef typename super_t::difference_type size_type;

  public:
    inline __attribute__((host)) __attribute__((device))
    join_iterator(RandomAccessIterator1 first1, size_type n, RandomAccessIterator2 first2)
      : super_t(thrust::counting_iterator<size_type>(0)),
        m_n1(n),
        m_iter1(first1),
        m_iter2(first2 - m_n1)
    {}


    inline __attribute__((host)) __attribute__((device))
    join_iterator(const join_iterator &other)
      : super_t(other),
        m_n1(other.m_n1),
        m_iter1(other.m_iter1),
        m_iter2(other.m_iter2)
    {}


  private:
    friend class thrust::iterator_core_access;


    __attribute__((host)) __attribute__((device))
    typename super_t::reference dereference() const
    {
      size_type i = *super_t::base();
      return (i < m_n1) ? m_iter1[i] : m_iter2[i];
    }


    size_type m_n1;
    RandomAccessIterator1 m_iter1;
    RandomAccessIterator2 m_iter2;
};


template<typename RandomAccessIterator1, typename Size, typename RandomAccessIterator2>
__attribute__((host)) __attribute__((device))
join_iterator<RandomAccessIterator1,RandomAccessIterator2,Size> make_join_iterator(RandomAccessIterator1 first1, Size n1, RandomAccessIterator2 first2)
{
  return join_iterator<RandomAccessIterator1,RandomAccessIterator2,Size>(first1, n1, first2);
}


}
}
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/merge.hpp" 2



namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<typename RandomAccessIterator1, typename Size, typename RandomAccessIterator2, typename Compare>
__attribute__((device))
Size merge_path(RandomAccessIterator1 first1, Size n1,
                RandomAccessIterator2 first2, Size n2,
                Size diag,
                Compare comp)
{
  Size begin = thrust::max<Size>(Size(0), diag - n2);
  Size end = thrust::min<Size>(diag, n1);

  while(begin < end)
  {
    Size mid = (begin + end) >> 1;

    if(comp(first2[diag - 1 - mid], first1[mid]))
    {
      end = mid;
    }
    else
    {
      begin = mid + 1;
    }
  }

  return begin;
}


template<std::size_t bound,
         std::size_t grainsize,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename Compare>
__attribute__((device))
OutputIterator merge(const bulk_::bounded<bound,agent<grainsize> > &e,
                     InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2, InputIterator2 last2,
                     OutputIterator result,
                     Compare comp)
{
  typedef typename bulk_::bounded<bound,bulk_::agent<grainsize> >::size_type size_type;

  typedef typename thrust::iterator_value<InputIterator1>::type value_type1;
  typedef typename thrust::iterator_value<InputIterator2>::type value_type2;

  size_type n = (last1 - first1) + (last2 - first2);



  value_type1 key_a;
  size_type n1 = last1 - first1;
  size_type idx1 = 0;

  if(n1 > 0)
  {

    key_a = first1[idx1];
  }


  value_type2 key_b;
  size_type n2 = last2 - first2;
  size_type idx2 = 0;

  if(n2 > 0)
  {

    key_b = first2[idx2];
  }


  if(bound <= n)
  {
    for(size_type i = 0; i < grainsize; ++i)
    {
      bool p = (idx2 >= n2) || ((idx1 < n1) && !comp(key_b, key_a));

      result[i] = p ? key_a : key_b;

      if(p)
      {
        ++idx1;


        key_a = first1[min(idx1, n1 - 1)];
      }
      else
      {
        ++idx2;


        key_b = first2[min(idx2, n2 - 1)];
      }
    }
  }
  else
  {
    for(size_type i = 0; i < grainsize; ++i)
    {
      if(i < n)
      {
        bool p = (idx2 >= n2) || ((idx1 < n1) && !comp(key_b, key_a));

        result[i] = p ? key_a : key_b;

        if(p)
        {
          ++idx1;


          key_a = first1[min(idx1, n1 - 1)];
        }
        else
        {
          ++idx2;


          key_b = first2[min(idx2, n2 - 1)];
        }
      }
    }
  }
# 169 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/merge.hpp"
  return result + n;
}


template<std::size_t bound, std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename RandomAccessIterator3,
         typename RandomAccessIterator4,
         typename RandomAccessIterator5,
         typename RandomAccessIterator6,
         typename Compare>
__attribute__((device))
thrust::pair<RandomAccessIterator5,RandomAccessIterator6>
  merge_by_key(const bulk_::bounded<bound,bulk_::agent<grainsize> > &,
               RandomAccessIterator1 keys_first1, RandomAccessIterator1 keys_last1,
               RandomAccessIterator2 keys_first2, RandomAccessIterator2 keys_last2,
               RandomAccessIterator3 values_first1,
               RandomAccessIterator4 values_first2,
               RandomAccessIterator5 keys_result,
               RandomAccessIterator6 values_result,
               Compare comp)
{
  typedef typename bulk_::bounded<bound,bulk_::agent<grainsize> >::size_type size_type;

  typedef typename thrust::iterator_value<RandomAccessIterator1>::type key_type1;
  typedef typename thrust::iterator_value<RandomAccessIterator2>::type key_type2;

  typedef typename thrust::iterator_value<RandomAccessIterator3>::type value_type1;
  typedef typename thrust::iterator_value<RandomAccessIterator4>::type value_type2;

  size_type n = (keys_last1 - keys_first1) + (keys_last2 - keys_first2);




  key_type1 key_a;
  value_type1 val_a;
  size_type n1 = keys_last1 - keys_first1;
  size_type idx1 = 0;

  if(n1 > 0)
  {


    key_a = keys_first1[idx1];
    val_a = values_first1[idx1];
  }



  key_type2 key_b;
  value_type2 val_b;
  size_type n2 = keys_last2 - keys_first2;
  size_type idx2 = 0;

  if(n2 > 0)
  {


    key_b = keys_first2[idx2];
    val_b = values_first2[idx2];
  }


  if(bound <= n)
  {
    for(size_type i = 0; i < grainsize; ++i)
    {
      bool p = (idx2 >= n2) || ((idx1 < n1) && !comp(key_b, key_a));

      keys_result[i] = p ? key_a : key_b;
      values_result[i] = p ? val_a : val_b;

      if(p)
      {
        ++idx1;


        key_a = keys_first1[min(idx1, n1 - 1)];
        val_a = values_first1[min(idx1, n1 - 1)];
      }
      else
      {
        ++idx2;


        key_b = keys_first2[min(idx2, n2 - 1)];
        val_b = values_first2[min(idx2, n2 - 1)];
      }
    }
  }
  else
  {
    for(size_type i = 0; i < grainsize; ++i)
    {
      if(i < n)
      {
        bool p = (idx2 >= n2) || ((idx1 < n1) && !comp(key_b, key_a));

        keys_result[i] = p ? key_a : key_b;
        values_result[i] = p ? val_a : val_b;

        if(p)
        {
          ++idx1;


          key_a = keys_first1[min(idx1, n1 - 1)];
          val_a = values_first1[min(idx1, n1 - 1)];
        }
        else
        {
          ++idx2;


          key_b = keys_first2[min(idx2, n2 - 1)];
          val_b = values_first2[min(idx2, n2 - 1)];
        }
      }
    }
  }
# 304 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/merge.hpp"
  return thrust::make_pair(keys_result + n, values_result + n);
}


template<std::size_t bound, std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator, typename Compare>
__attribute__((device))
typename thrust::detail::enable_if<
  (bound <= groupsize * grainsize)
>::type
inplace_merge(bulk_::bounded<
                bound,
                bulk_::concurrent_group<
                  bulk_::agent<grainsize>,
                  groupsize
                >
              > &g,
              RandomAccessIterator first, RandomAccessIterator middle, RandomAccessIterator last,
              Compare comp)
{
  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  size_type n1 = middle - first;
  size_type n2 = last - middle;


  size_type local_offset = grainsize * g.this_exec.index();

  size_type mp = bulk_::merge_path(first, n1, middle, n2, local_offset, comp);


  size_type local_offset1 = mp;
  size_type local_offset2 = n1 + local_offset - mp;

  typedef typename thrust::iterator_value<RandomAccessIterator>::type value_type;
  value_type local_result[grainsize];
  bulk_::merge(bulk_::bound<grainsize>(g.this_exec),
              first + local_offset1, middle,
              first + local_offset2, last,
              local_result,
              comp);

  g.wait();



  size_type local_size = thrust::max<size_type>(0, thrust::min<size_type>(grainsize, n1 + n2 - local_offset));
  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), local_result, local_size, first + local_offset);

  g.wait();
}


template<std::size_t bound, std::size_t groupsize, std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename RandomAccessIterator3,
         typename Compare>
__attribute__((device))
typename thrust::detail::enable_if<
  (bound <= groupsize * grainsize),
  RandomAccessIterator3
>::type
merge(bulk_::bounded<
        bound,
        bulk_::concurrent_group<
          bulk_::agent<grainsize>,
          groupsize
        >
      > &g,
      RandomAccessIterator1 first1, RandomAccessIterator1 last1,
      RandomAccessIterator2 first2, RandomAccessIterator2 last2,
      RandomAccessIterator3 result,
      Compare comp)
{
  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  size_type n1 = last1 - first1;
  size_type n2 = last2 - first2;


  size_type local_offset = grainsize * g.this_exec.index();

  size_type mp = bulk_::merge_path(first1, n1, first2, n2, local_offset, comp);


  size_type local_offset1 = mp;
  size_type local_offset2 = local_offset - mp;

  typedef typename thrust::iterator_value<RandomAccessIterator3>::type value_type;
  value_type local_result[grainsize];
  bulk_::merge(bulk_::bound<grainsize>(g.this_exec),
              first1 + local_offset1, last1,
              first2 + local_offset2, last2,
              local_result,
              comp);



  size_type local_size = thrust::max<size_type>(0, thrust::min<size_type>(grainsize, n1 + n2 - local_offset));
  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), local_result, local_size, result + local_offset);

  g.wait();

  return result + thrust::min<size_type>(groupsize * grainsize, n1 + n2);
}


namespace detail
{
namespace merge_detail
{



template<std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator1, typename RandomAccessIterator2, typename RandomAccessIterator3, typename RandomAccessIterator4, typename Compare>
__attribute__((device))
RandomAccessIterator4
  bounded_merge_with_buffer(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &exec,
                            RandomAccessIterator1 first1, RandomAccessIterator1 last1,
                            RandomAccessIterator2 first2, RandomAccessIterator2 last2,
                            RandomAccessIterator3 buffer,
                            RandomAccessIterator4 result,
                            Compare comp)
{
  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  size_type n1 = last1 - first1;
  size_type n2 = last2 - first2;


  bulk_::copy_n(bulk_::bound<groupsize * grainsize>(exec),
               thrust::detail::make_join_iterator(first1, n1, first2),
               n1 + n2,
               buffer);


  bulk_::inplace_merge(bulk_::bound<groupsize * grainsize>(exec),
                      buffer, buffer + n1, buffer + n1 + n2,
                      comp);



  return bulk_::copy_n(exec, buffer, n1 + n2, result);
}


}
}


template<std::size_t groupsize, std::size_t grainsize, typename RandomAccessIterator1, typename RandomAccessIterator2, typename RandomAccessIterator3, typename Compare>
__attribute__((device))
RandomAccessIterator3 merge(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &exec,
                            RandomAccessIterator1 first1, RandomAccessIterator1 last1,
                            RandomAccessIterator2 first2, RandomAccessIterator2 last2,
                            RandomAccessIterator3 result,
                            Compare comp)
{
  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  typedef typename thrust::iterator_value<RandomAccessIterator3>::type value_type;

  value_type *buffer = reinterpret_cast<value_type*>(bulk_::malloc(exec, exec.size() * exec.grainsize() * sizeof(value_type)));

  size_type chunk_size = exec.size() * exec.this_exec.grainsize();

  size_type n1 = last1 - first1;
  size_type n2 = last2 - first2;


  if(n1 + n2 <= chunk_size)
  {
    result = detail::merge_detail::bounded_merge_with_buffer(exec, first1, last1, first2, last2, buffer, result, comp);
  }
  else
  {
    while((first1 < last1) || (first2 < last2))
    {
      size_type n1 = last1 - first1;
      size_type n2 = last2 - first2;

      size_type diag = thrust::min<size_type>(chunk_size, n1 + n2);

      size_type mp = bulk_::merge_path(first1, n1, first2, n2, diag, comp);

      result = detail::merge_detail::bounded_merge_with_buffer(exec,
                                                               first1, first1 + mp,
                                                               first2, first2 + diag - mp,
                                                               buffer,
                                                               result,
                                                               comp);

      first1 += mp;
      first2 += diag - mp;
    }
  }

  bulk_::free(exec, buffer);

  return result;
}


template<std::size_t groupsize, std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename RandomAccessIterator3,
         typename RandomAccessIterator4,
         typename RandomAccessIterator5,
         typename RandomAccessIterator6,
         typename Compare>
__attribute__((device))
thrust::pair<RandomAccessIterator5,RandomAccessIterator6>
merge_by_key(bulk_::bounded<
               groupsize*grainsize,
               bulk_::concurrent_group<bulk_::agent<grainsize>, groupsize>
             > &g,
             RandomAccessIterator1 keys_first1, RandomAccessIterator1 keys_last1,
             RandomAccessIterator2 keys_first2, RandomAccessIterator2 keys_last2,
             RandomAccessIterator3 values_first1,
             RandomAccessIterator4 values_first2,
             RandomAccessIterator5 keys_result,
             RandomAccessIterator6 values_result,
             Compare comp)
{
  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  typedef typename thrust::iterator_value<RandomAccessIterator5>::type key_type;


  union
  {
    key_type *keys;
    size_type *indices;
  } stage;

  stage.keys = static_cast<key_type*>(bulk_::malloc(g, groupsize * grainsize * thrust::max(sizeof(key_type), sizeof(size_type))));
# 549 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/merge.hpp"
  size_type n1 = keys_last1 - keys_first1;
  size_type n2 = keys_last2 - keys_first2;
  size_type n = n1 + n2;


  bulk_::copy_n(g,
               thrust::detail::make_join_iterator(keys_first1, n1, keys_first2),
               n,
               stage.keys);


  size_type diag = thrust::min<size_type>(n1 + n2, grainsize * g.this_exec.index());
  size_type mp = bulk_::merge_path(stage.keys, n1, stage.keys + n1, n2, diag, comp);


  size_type start1 = mp;
  size_type start2 = n1 + diag - mp;

  size_type end1 = n1;
  size_type end2 = n1 + n2;


  key_type results[grainsize];
  size_type indices[grainsize];
  bulk_::merge_by_key(bulk_::bound<grainsize>(g.this_exec),
                     stage.keys + start1, stage.keys + end1,
                     stage.keys + start2, stage.keys + end2,
                     thrust::make_counting_iterator<size_type>(start1),
                     thrust::make_counting_iterator<size_type>(start2),
                     results,
                     indices,
                     comp);
  g.wait();


  size_type local_offset = grainsize * g.this_exec.index();
  size_type local_size = thrust::max<size_type>(0, thrust::min<size_type>(grainsize, n - local_offset));
  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), results, local_size, stage.keys + local_offset);
  g.wait();


  keys_result = bulk_::copy_n(g, stage.keys, n, keys_result);


  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), indices, local_size, stage.indices + local_offset);
  g.wait();


  values_result = bulk_::gather(g,
                               stage.indices, stage.indices + n,
                               thrust::detail::make_join_iterator(values_first1, n1, values_first2),
                               values_result);


  bulk_::free(g, stage.keys);


  return thrust::make_pair(keys_result, values_result);
}


}
} } } }
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/scatter.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/scatter.hpp"
       




namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename RandomAccessIterator3,
         typename RandomAccessIterator4>
__inline__ __attribute__((always_inline)) __attribute__((device))
void scatter_if(const bounded<bound,agent<grainsize> > &exec,
                RandomAccessIterator1 first,
                RandomAccessIterator1 last,
                RandomAccessIterator2 map,
                RandomAccessIterator3 stencil,
                RandomAccessIterator4 result)
{
  typedef int size_type;

  size_type n = last - first;

  for(size_type i = 0; i < bound; ++i)
  {
    if(i < n && stencil[i])
    {
      result[map[i]] = first[i];
    }
  }
}


template<std::size_t bound,
         std::size_t groupsize,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename RandomAccessIterator3,
         typename RandomAccessIterator4>
__attribute__((device))
typename thrust::detail::enable_if<
  bound <= groupsize * grainsize
>::type
scatter_if(bulk_::bounded<
             bound,
             bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>
           > &g,
           RandomAccessIterator1 first,
           RandomAccessIterator1 last,
           RandomAccessIterator2 map,
           RandomAccessIterator3 stencil,
           RandomAccessIterator4 result)
{
  typedef typename bulk_::bounded<
    bound,
    bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>
  >::size_type size_type;

  size_type n = last - first;

  size_type tid = g.this_exec.index();


  if(n == bound)
  {
    for(size_type i = 0; i < g.this_exec.grainsize(); ++i)
    {
      size_type idx = g.size() * i + tid;

      if(stencil[idx])
      {
        result[map[idx]] = first[idx];
      }
    }
  }
  else if(n < bound)
  {
    for(size_type i = 0; i < g.this_exec.grainsize(); ++i)
    {
      size_type idx = g.size() * i + tid;

      if(idx < (last - first) && stencil[idx])
      {
        result[map[idx]] = first[idx];
      }
    }
  }

  g.wait();
}


template<std::size_t groupsize,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename RandomAccessIterator3,
         typename RandomAccessIterator4>
__attribute__((device))
void scatter_if(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &g,
                RandomAccessIterator1 first,
                RandomAccessIterator1 last,
                RandomAccessIterator2 map,
                RandomAccessIterator3 stencil,
                RandomAccessIterator4 result)
{
  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  size_type chunk_size = g.size() * grainsize;

  size_type n = last - first;

  size_type tid = g.this_exec.index();


  if(chunk_size == n)
  {
    for(size_type i = 0; i < grainsize; ++i)
    {
      size_type idx = g.size() * i + tid;

      if(stencil[idx])
      {
        result[map[idx]] = first[idx];
      }
    }
  }
  else if(n < chunk_size)
  {
    for(size_type i = 0; i < grainsize; ++i)
    {
      size_type idx = g.size() * i + tid;

      if(idx < (last - first) && stencil[idx])
      {
        result[map[idx]] = first[idx];
      }
    }
  }
  else
  {
    for(;
        first < last;
        first += chunk_size, map += chunk_size, stencil += chunk_size)
    {
      if((last - first) >= chunk_size)
      {

        for(size_type i = 0; i < grainsize; ++i)
        {
          size_type idx = g.size() * i + tid;

          if(stencil[idx])
          {
            result[map[idx]] = first[idx];
          }
        }
      }
      else
      {
        for(size_type i = 0; i < grainsize; ++i)
        {
          size_type idx = g.size() * i + tid;

          if(idx < (last - first) && stencil[idx])
          {
            result[map[idx]] = first[idx];
          }
        }
      }
    }
  }

  g.wait();
}


}
} } } }
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/adjacent_difference.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/adjacent_difference.hpp"
       




namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{


template<std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename T,
         typename BinaryOperation>
__attribute__((device))
RandomAccessIterator2 adjacent_difference(bulk_::agent<grainsize> &exec,
                                          RandomAccessIterator1 first, RandomAccessIterator1 last,
                                          RandomAccessIterator2 result,
                                          T init,
                                          BinaryOperation binary_op)
{
  for(; first != last; ++first, ++result)
  {
    T temp = *first;
    *result = binary_op(temp, init);
    init = temp;
  }

  return result;
}


template<std::size_t groupsize,
         std::size_t grainsize_,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename T,
         typename BinaryOperation>
__attribute__((device))
RandomAccessIterator2 adjacent_difference(bulk_::concurrent_group<bulk_::agent<grainsize_>,groupsize> &g,
                                          RandomAccessIterator1 first, RandomAccessIterator1 last,
                                          RandomAccessIterator2 result,
                                          T init,
                                          BinaryOperation binary_op)
{




  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize_>,groupsize>::size_type size_type;

  RandomAccessIterator2 return_me = result + (last - first);

  const size_type grainsize = g.this_exec.grainsize();
  const size_type tile_size = g.size() * grainsize;


  RandomAccessIterator1 first_init = first + grainsize * g.this_exec.index() - 1;
  if(first <= first_init && first_init < last)
  {
    init = *first_init;
  }

  g.wait();

  for(; first < last; first += tile_size, result += tile_size)
  {
    size_type local_offset = grainsize * g.this_exec.index();
    size_type local_size = thrust::max(0, thrust::min<size_type>(grainsize, last - (first + local_offset)));


    T next_init = (first + local_offset + tile_size - 1 < last) ? first[tile_size-1] : init;

    g.wait();


    bulk_::adjacent_difference(g.this_exec,
                              first + local_offset,
                              first + local_offset + local_size,
                              result + local_offset,
                              init,
                              binary_op);

    init = next_init;
  }

  g.wait();

  return return_me;
}


template<std::size_t groupsize,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename BinaryOperation>
__attribute__((device))
RandomAccessIterator2 adjacent_difference(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &g,
                                          RandomAccessIterator1 first, RandomAccessIterator1 last,
                                          RandomAccessIterator2 result,
                                          BinaryOperation binary_op)
{
  if(first < last)
  {
    typename thrust::iterator_value<RandomAccessIterator1>::type init = *first;


    g.wait();

    if(g.this_exec.index() == 0)
    {
      *result = init;
    }

    result = bulk_::adjacent_difference(g, first + 1, last, result + 1, init, binary_op);
  }

  return result;
}


}
} } } }
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce_by_key.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce_by_key.hpp"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/head_flags.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/head_flags.hpp"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/transform_iterator.h" 1
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/transform_iterator.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/transform_iterator.inl" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/transform_iterator.inl"
namespace thrust
{

template <class UnaryFunction, class Iterator, class Reference, class Value>
  class transform_iterator;

namespace detail
{


template <class UnaryFunc, class Iterator, class Reference, class Value>
struct transform_iterator_base
{
 private:

    typedef typename thrust::detail::ia_dflt_help<
      Reference,
      thrust::detail::result_of<UnaryFunc(typename thrust::iterator_value<Iterator>::type)>
    >::type reference;






    typedef typename thrust::detail::ia_dflt_help<
      Value,
      thrust::detail::remove_reference<reference>
    >::type cv_value_type;

 public:
    typedef thrust::iterator_adaptor
    <
        transform_iterator<UnaryFunc, Iterator, Reference, Value>
      , Iterator
      , cv_value_type
      , thrust::use_default




        , typename thrust::iterator_traits<Iterator>::iterator_category
      , reference
    > type;
};


}
}
# 39 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/transform_iterator.h" 2




namespace thrust
{
# 189 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/transform_iterator.h"
template <class AdaptableUnaryFunction, class Iterator, class Reference = use_default, class Value = use_default>
  class transform_iterator
    : public detail::transform_iterator_base<AdaptableUnaryFunction, Iterator, Reference, Value>::type
{


  public:
    typedef typename
    detail::transform_iterator_base<AdaptableUnaryFunction, Iterator, Reference, Value>::type
    super_t;

    friend class thrust::iterator_core_access;



  public:


    __attribute__((host)) __attribute__((device))
    transform_iterator() {}







    __attribute__((host)) __attribute__((device))
    transform_iterator(Iterator const& x, AdaptableUnaryFunction f)
      : super_t(x), m_f(f) {
    }






    __attribute__((host)) __attribute__((device))
    explicit transform_iterator(Iterator const& x)
      : super_t(x) { }






    template<typename OtherAdaptableUnaryFunction,
             typename OtherIterator,
             typename OtherReference,
             typename OtherValue>
    __attribute__((host)) __attribute__((device))
    transform_iterator(const transform_iterator<OtherAdaptableUnaryFunction, OtherIterator, OtherReference, OtherValue> &other,
                       typename thrust::detail::enable_if_convertible<OtherIterator, Iterator>::type* = 0,
                       typename thrust::detail::enable_if_convertible<OtherAdaptableUnaryFunction, AdaptableUnaryFunction>::type* = 0)
      : super_t(other.base()), m_f(other.functor()) {}
# 255 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/transform_iterator.h"
    __attribute__((host)) __attribute__((device))
    transform_iterator &operator=(const transform_iterator &other)
    {
      return do_assign(other,




          typename thrust::detail::is_copy_assignable<AdaptableUnaryFunction>::type()

      );
    }




    __attribute__((host)) __attribute__((device))
    AdaptableUnaryFunction functor() const
      { return m_f; }



  private:
    __attribute__((host)) __attribute__((device))
    transform_iterator &do_assign(const transform_iterator &other, thrust::detail::true_type)
    {
      super_t::operator=(other);


      m_f = other.functor();

      return *this;
    }

    __attribute__((host)) __attribute__((device))
    transform_iterator &do_assign(const transform_iterator &other, thrust::detail::false_type)
    {
      super_t::operator=(other);



      return *this;
    }

    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    typename super_t::reference dereference() const
    {


      typename thrust::iterator_value<Iterator>::type x = *this->base();
      return m_f(x);
    }



    mutable AdaptableUnaryFunction m_f;



};
# 329 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/transform_iterator.h"
template <class AdaptableUnaryFunction, class Iterator>
inline __attribute__((host)) __attribute__((device))
transform_iterator<AdaptableUnaryFunction, Iterator>
make_transform_iterator(Iterator it, AdaptableUnaryFunction fun)
{
  return transform_iterator<AdaptableUnaryFunction, Iterator>(it, fun);
}







}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/head_flags.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/zip_iterator.h" 1
# 32 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/zip_iterator.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/zip_iterator_base.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/zip_iterator_base.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/minimum_category.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/minimum_category.h"
       



namespace thrust
{

namespace detail
{

template<typename T1,
         typename T2 = minimum_type_detail::any_conversion,
         typename T3 = minimum_type_detail::any_conversion,
         typename T4 = minimum_type_detail::any_conversion,
         typename T5 = minimum_type_detail::any_conversion,
         typename T6 = minimum_type_detail::any_conversion,
         typename T7 = minimum_type_detail::any_conversion,
         typename T8 = minimum_type_detail::any_conversion,
         typename T9 = minimum_type_detail::any_conversion,
         typename T10 = minimum_type_detail::any_conversion,
         typename T11 = minimum_type_detail::any_conversion,
         typename T12 = minimum_type_detail::any_conversion,
         typename T13 = minimum_type_detail::any_conversion,
         typename T14 = minimum_type_detail::any_conversion,
         typename T15 = minimum_type_detail::any_conversion,
         typename T16 = minimum_type_detail::any_conversion>
  struct minimum_category
    : minimum_type<T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16>
{
};

}

}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/zip_iterator_base.h" 2







namespace thrust
{


template<typename IteratorTuple> class zip_iterator;

namespace detail
{




template<typename DiffType>
class advance_iterator
{
public:
  inline __attribute__((host)) __attribute__((device))
  advance_iterator(DiffType step) : m_step(step) {}

  #pragma hd_warning_disable
  template<typename Iterator>
  inline __attribute__((host)) __attribute__((device))
  void operator()(Iterator& it) const
  { it += m_step; }

private:
  DiffType m_step;
};


struct increment_iterator
{
  #pragma hd_warning_disable
  template<typename Iterator>
  inline __attribute__((host)) __attribute__((device))
  void operator()(Iterator& it)
  { ++it; }
};


struct decrement_iterator
{
  #pragma hd_warning_disable
  template<typename Iterator>
  inline __attribute__((host)) __attribute__((device))
  void operator()(Iterator& it)
  { --it; }
};


struct dereference_iterator
{
  template<typename Iterator>
  struct apply
  {
    typedef typename
      iterator_traits<Iterator>::reference
    type;
  };


  #pragma hd_warning_disable
  template<typename Iterator>
  __attribute__((host)) __attribute__((device))
    typename apply<Iterator>::type operator()(Iterator const& it)
  {
    return *it;
  }
};




namespace tuple_impl_specific
{


template<typename UnaryMetaFunctionClass, class Arg>
  struct apply1
    : UnaryMetaFunctionClass::template apply<Arg>
{
};



template<typename UnaryMetaFunctionClass, class Arg1, class Arg2>
  struct apply2
    : UnaryMetaFunctionClass::template apply<Arg1,Arg2>
{
};






template<class Tuple, class BinaryMetaFun, class StartType>
  struct tuple_meta_accumulate;

template<
    typename Tuple
  , class BinaryMetaFun
  , typename StartType
>
  struct tuple_meta_accumulate_impl
{
   typedef typename apply2<
       BinaryMetaFun
     , typename Tuple::head_type
     , typename tuple_meta_accumulate<
           typename Tuple::tail_type
         , BinaryMetaFun
         , StartType
       >::type
   >::type type;
};


template<
    typename Tuple
  , class BinaryMetaFun
  , typename StartType
>
struct tuple_meta_accumulate
  : thrust::detail::eval_if<
        thrust::detail::is_same<Tuple, thrust::null_type>::value
      , thrust::detail::identity_<StartType>
      , tuple_meta_accumulate_impl<
            Tuple
          , BinaryMetaFun
          , StartType
        >
    >
{
};
# 187 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/zip_iterator_base.h"
template<typename Fun>
inline __attribute__((host)) __attribute__((device))
Fun tuple_for_each(thrust::null_type, Fun f)
{
  return f;
}


template<typename Tuple, typename Fun>
inline __attribute__((host)) __attribute__((device))
Fun tuple_for_each(Tuple& t, Fun f)
{
  f( t.get_head() );
  return tuple_for_each(t.get_tail(), f);
}







__attribute__((host)) __attribute__((device))
inline bool tuple_equal(thrust::null_type, thrust::null_type)
{ return true; }


template<typename Tuple1, typename Tuple2>
__attribute__((host)) __attribute__((device))
bool tuple_equal(Tuple1 const& t1, Tuple2 const& t2)
{
  return t1.get_head() == t2.get_head() &&
  tuple_equal(t1.get_tail(), t2.get_tail());
}

}





template<typename IteratorTuple>
  struct tuple_of_value_types
    : tuple_meta_transform<
          IteratorTuple,
          iterator_value
        >
{
};


struct minimum_category_lambda
{
  template<typename T1, typename T2>
    struct apply : minimum_category<T1,T2>
  {};
};






template<typename IteratorTuple>
struct minimum_traversal_category_in_iterator_tuple
{
  typedef typename tuple_meta_transform<
      IteratorTuple
    , thrust::iterator_traversal
  >::type tuple_of_traversal_tags;

  typedef typename tuple_impl_specific::tuple_meta_accumulate<
      tuple_of_traversal_tags
    , minimum_category_lambda
    , thrust::random_access_traversal_tag
  >::type type;
};


struct minimum_system_lambda
{
  template<typename T1, typename T2>
    struct apply : minimum_system<T1,T2>
  {};
};





template<typename IteratorTuple>
struct minimum_system_in_iterator_tuple
{
  typedef typename thrust::detail::tuple_meta_transform<
    IteratorTuple,
    thrust::iterator_system
  >::type tuple_of_system_tags;

  typedef typename tuple_impl_specific::tuple_meta_accumulate<
    tuple_of_system_tags,
    minimum_system_lambda,
    thrust::any_system_tag
  >::type type;
};

namespace zip_iterator_base_ns
{


template<int i, typename Tuple>
  struct tuple_elements_helper
    : eval_if<
        (i < tuple_size<Tuple>::value),
        tuple_element<i,Tuple>,
        identity_<thrust::null_type>
      >
{};


template<typename Tuple>
  struct tuple_elements
{
  typedef typename tuple_elements_helper<0,Tuple>::type T0;
  typedef typename tuple_elements_helper<1,Tuple>::type T1;
  typedef typename tuple_elements_helper<2,Tuple>::type T2;
  typedef typename tuple_elements_helper<3,Tuple>::type T3;
  typedef typename tuple_elements_helper<4,Tuple>::type T4;
  typedef typename tuple_elements_helper<5,Tuple>::type T5;
  typedef typename tuple_elements_helper<6,Tuple>::type T6;
  typedef typename tuple_elements_helper<7,Tuple>::type T7;
  typedef typename tuple_elements_helper<8,Tuple>::type T8;
  typedef typename tuple_elements_helper<9,Tuple>::type T9;
};


template<typename IteratorTuple>
  struct tuple_of_iterator_references
{

  typedef typename tuple_meta_transform<
    IteratorTuple,
    iterator_reference
  >::type tuple_of_references;


  typedef tuple_elements<tuple_of_references> elements;


  typedef thrust::detail::tuple_of_iterator_references<
    typename elements::T0,
    typename elements::T1,
    typename elements::T2,
    typename elements::T3,
    typename elements::T4,
    typename elements::T5,
    typename elements::T6,
    typename elements::T7,
    typename elements::T8,
    typename elements::T9
  > type;
};


}
# 359 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/zip_iterator_base.h"
template<typename IteratorTuple>
  struct zip_iterator_base
{



    typedef typename zip_iterator_base_ns::tuple_of_iterator_references<IteratorTuple>::type reference;



    typedef typename tuple_of_value_types<IteratorTuple>::type value_type;


    typedef typename thrust::iterator_traits<
      typename thrust::tuple_element<0, IteratorTuple>::type
    >::difference_type difference_type;



    typedef typename
    minimum_system_in_iterator_tuple<IteratorTuple>::type system;



    typedef typename
    minimum_traversal_category_in_iterator_tuple<IteratorTuple>::type traversal_category;

 public:



    typedef thrust::iterator_facade<
        zip_iterator<IteratorTuple>,
        value_type,
        system,
        traversal_category,
        reference,
        difference_type
    > type;
};

}

}
# 36 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/zip_iterator.h" 2



namespace thrust
{
# 139 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/zip_iterator.h"
template <typename IteratorTuple>
  class zip_iterator
    : public detail::zip_iterator_base<IteratorTuple>::type
{
  public:


    inline __attribute__((host)) __attribute__((device))
    zip_iterator(void);






    inline __attribute__((host)) __attribute__((device))
    zip_iterator(IteratorTuple iterator_tuple);






    template<typename OtherIteratorTuple>
    inline __attribute__((host)) __attribute__((device))
    zip_iterator(const zip_iterator<OtherIteratorTuple> &other,
                 typename thrust::detail::enable_if_convertible<
                   OtherIteratorTuple,
                   IteratorTuple
                 >::type * = 0);







    inline __attribute__((host)) __attribute__((device))
    const IteratorTuple &get_iterator_tuple() const;



  private:
    typedef typename
    detail::zip_iterator_base<IteratorTuple>::type super_t;

    friend class thrust::iterator_core_access;



    __attribute__((host)) __attribute__((device))
    typename super_t::reference dereference() const;




    template<typename OtherIteratorTuple>
    inline __attribute__((host)) __attribute__((device))
    bool equal(const zip_iterator<OtherIteratorTuple> &other) const;


    inline __attribute__((host)) __attribute__((device))
    void advance(typename super_t::difference_type n);


    inline __attribute__((host)) __attribute__((device))
    void increment();


    inline __attribute__((host)) __attribute__((device))
    void decrement();


    template<typename OtherIteratorTuple>
    inline __attribute__((host)) __attribute__((device))
      typename super_t::difference_type
        distance_to(const zip_iterator<OtherIteratorTuple> &other) const;


    IteratorTuple m_iterator_tuple;



};
# 232 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/zip_iterator.h"
template<typename IteratorTuple>
inline __attribute__((host)) __attribute__((device))
zip_iterator<IteratorTuple> make_zip_iterator(IteratorTuple t);







}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/zip_iterator.inl" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/zip_iterator.inl"
       




namespace thrust
{


template<typename IteratorTuple>
__attribute__((host)) __attribute__((device))
  zip_iterator<IteratorTuple>
    ::zip_iterator(void)
{
}


template<typename IteratorTuple>
__attribute__((host)) __attribute__((device))
  zip_iterator<IteratorTuple>
    ::zip_iterator(IteratorTuple iterator_tuple)
      :m_iterator_tuple(iterator_tuple)
{
}


template<typename IteratorTuple>
  template<typename OtherIteratorTuple>
  __attribute__((host)) __attribute__((device))
    zip_iterator<IteratorTuple>
      ::zip_iterator(const zip_iterator<OtherIteratorTuple> &other,
                     typename thrust::detail::enable_if_convertible<
                       OtherIteratorTuple,
                       IteratorTuple
                     >::type *)
        :m_iterator_tuple(other.get_iterator_tuple())
{
}


template<typename IteratorTuple>
__attribute__((host)) __attribute__((device))
const IteratorTuple &zip_iterator<IteratorTuple>
  ::get_iterator_tuple(void) const
{
  return m_iterator_tuple;
}


template<typename IteratorTuple>
  typename zip_iterator<IteratorTuple>::super_t::reference
  __attribute__((host)) __attribute__((device))
    zip_iterator<IteratorTuple>
      ::dereference(void) const
{
  using namespace detail::tuple_impl_specific;

  return thrust::detail::tuple_host_device_transform<detail::dereference_iterator::template apply>(get_iterator_tuple(), detail::dereference_iterator());
}


 #pragma hd_warning_disable
template<typename IteratorTuple>
  template<typename OtherIteratorTuple>
  __attribute__((host)) __attribute__((device))
    bool zip_iterator<IteratorTuple>
      ::equal(const zip_iterator<OtherIteratorTuple> &other) const
{
  return get<0>(get_iterator_tuple()) == get<0>(other.get_iterator_tuple());
}


template<typename IteratorTuple>
__attribute__((host)) __attribute__((device))
  void zip_iterator<IteratorTuple>
    ::advance(typename super_t::difference_type n)
{
  using namespace detail::tuple_impl_specific;
  tuple_for_each(m_iterator_tuple,
                 detail::advance_iterator<typename super_t::difference_type>(n));
}


template<typename IteratorTuple>
__attribute__((host)) __attribute__((device))
  void zip_iterator<IteratorTuple>
    ::increment(void)
{
  using namespace detail::tuple_impl_specific;
  tuple_for_each(m_iterator_tuple, detail::increment_iterator());
}


template<typename IteratorTuple>
__attribute__((host)) __attribute__((device))
  void zip_iterator<IteratorTuple>
    ::decrement(void)
{
  using namespace detail::tuple_impl_specific;
  tuple_for_each(m_iterator_tuple, detail::decrement_iterator());
}


 #pragma hd_warning_disable
template<typename IteratorTuple>
  template <typename OtherIteratorTuple>
  __attribute__((host)) __attribute__((device))
    typename zip_iterator<IteratorTuple>::super_t::difference_type
      zip_iterator<IteratorTuple>
        ::distance_to(const zip_iterator<OtherIteratorTuple> &other) const
{
  return get<0>(other.get_iterator_tuple()) - get<0>(get_iterator_tuple());
}


template<typename IteratorTuple>
__attribute__((host)) __attribute__((device))
  zip_iterator<IteratorTuple> make_zip_iterator(IteratorTuple t)
{
  return zip_iterator<IteratorTuple>(t);
}


}
# 245 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/zip_iterator.h" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/head_flags.hpp" 2





namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename RandomAccessIterator,
         typename BinaryPredicate = thrust::equal_to<typename thrust::iterator_value<RandomAccessIterator>::type>,
         typename ValueType = bool,
         typename IndexType = typename thrust::iterator_difference<RandomAccessIterator>::type>
  class head_flags_with_init
{
  typedef typename thrust::iterator_value<RandomAccessIterator>::type init_type;



  public:
    struct head_flag_functor
    {
      BinaryPredicate binary_pred;
      init_type init;
      IndexType n;

      typedef ValueType result_type;

      __attribute__((host)) __attribute__((device))
      head_flag_functor(init_type init, IndexType n)
        : binary_pred(), init(init), n(n)
      {}

      __attribute__((host)) __attribute__((device))
      head_flag_functor(init_type init, IndexType n, BinaryPredicate binary_pred)
        : binary_pred(binary_pred), init(init), n(n)
      {}

      template<typename Tuple>
      __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
      result_type operator()(const Tuple &t)
      {
        const IndexType i = thrust::get<0>(t);

        if(i == 0)
        {
          return !binary_pred(init, thrust::get<1>(t));
        }

        return !binary_pred(thrust::get<1>(t), thrust::get<2>(t));
      }
    };

    typedef thrust::counting_iterator<IndexType> counting_iterator;

  public:
    typedef thrust::transform_iterator<
      head_flag_functor,
      thrust::zip_iterator<thrust::tuple<counting_iterator,RandomAccessIterator,RandomAccessIterator> >
    > iterator;

    # pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    head_flags_with_init(RandomAccessIterator first, RandomAccessIterator last, init_type init)
      : m_begin(thrust::make_transform_iterator(thrust::make_zip_iterator(thrust::make_tuple(thrust::counting_iterator<IndexType>(0), first, first - 1)),
                                                head_flag_functor(init, last - first))),
        m_end(m_begin + (last - first))
    {}

    __attribute__((host)) __attribute__((device))
    head_flags_with_init(RandomAccessIterator first, RandomAccessIterator last, init_type init, BinaryPredicate binary_pred)
      : m_begin(thrust::make_transform_iterator(thrust::make_zip_iterator(thrust::make_tuple(thrust::counting_iterator<IndexType>(0), first, first - 1)),
                                                head_flag_functor(init, last - first, binary_pred))),
        m_end(m_begin + (last - first))
    {}

    __attribute__((host)) __attribute__((device))
    iterator begin() const
    {
      return m_begin;
    }

    __attribute__((host)) __attribute__((device))
    iterator end() const
    {
      return m_end;
    }

    template<typename OtherIndex>
    __attribute__((host)) __attribute__((device))
    typename iterator::reference operator[](OtherIndex i)
    {
      return *(begin() + i);
    }

  private:
    iterator m_begin, m_end;
};



template<typename RandomAccessIterator,
         typename BinaryPredicate = thrust::equal_to<typename thrust::iterator_value<RandomAccessIterator>::type>,
         typename ValueType = bool,
         typename IndexType = typename thrust::iterator_difference<RandomAccessIterator>::type>

  class head_flags_
{


  public:
    struct head_flag_functor
    {
      BinaryPredicate binary_pred;
      IndexType n;

      typedef ValueType result_type;

      __attribute__((host)) __attribute__((device))
      head_flag_functor(IndexType n)
        : binary_pred(), n(n)
      {}

      __attribute__((host)) __attribute__((device))
      head_flag_functor(IndexType n, BinaryPredicate binary_pred)
        : binary_pred(binary_pred), n(n)
      {}

      template<typename Tuple>
      __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
      result_type operator()(const Tuple &t)
      {
        const IndexType i = thrust::get<0>(t);



        return (i == 0 || !binary_pred(thrust::get<1>(t), thrust::get<2>(t)));
      }
    };

    typedef thrust::counting_iterator<IndexType> counting_iterator;

  public:
    typedef thrust::transform_iterator<
      head_flag_functor,
      thrust::zip_iterator<thrust::tuple<counting_iterator,RandomAccessIterator,RandomAccessIterator> >
    > iterator;

    __attribute__((host)) __attribute__((device))

    head_flags_(RandomAccessIterator first, RandomAccessIterator last)
      : m_begin(thrust::make_transform_iterator(thrust::make_zip_iterator(thrust::make_tuple(thrust::counting_iterator<IndexType>(0), first, first - 1)),
                                                head_flag_functor(last - first))),
        m_end(m_begin + (last - first))
    {}

    __attribute__((host)) __attribute__((device))

    head_flags_(RandomAccessIterator first, RandomAccessIterator last, BinaryPredicate binary_pred)
      : m_begin(thrust::make_transform_iterator(thrust::make_zip_iterator(thrust::make_tuple(thrust::counting_iterator<IndexType>(0), first, first - 1)),
                                                head_flag_functor(last - first, binary_pred))),
        m_end(m_begin + (last - first))
    {}

    __attribute__((host)) __attribute__((device))
    iterator begin() const
    {
      return m_begin;
    }

    __attribute__((host)) __attribute__((device))
    iterator end() const
    {
      return m_end;
    }

    template<typename OtherIndex>
    __attribute__((host)) __attribute__((device))
    typename iterator::reference operator[](OtherIndex i)
    {
      return *(begin() + i);
    }

  private:
    iterator m_begin, m_end;
};


template<typename RandomAccessIterator, typename BinaryPredicate>
__attribute__((host)) __attribute__((device))

head_flags_<RandomAccessIterator, BinaryPredicate>
  make_head_flags(RandomAccessIterator first, RandomAccessIterator last, BinaryPredicate binary_pred)
{

  return head_flags_<RandomAccessIterator, BinaryPredicate>(first, last, binary_pred);
}


template<typename RandomAccessIterator>
__attribute__((host)) __attribute__((device))

head_flags_<RandomAccessIterator>
  make_head_flags(RandomAccessIterator first, RandomAccessIterator last)
{

  return head_flags_<RandomAccessIterator>(first, last);
}


}
}
} } } }
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce_by_key.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/tail_flags.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/tail_flags.hpp"
       
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/detail/tail_flags.hpp"
namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{


template<typename RandomAccessIterator,
         typename BinaryPredicate = thrust::equal_to<typename thrust::iterator_value<RandomAccessIterator>::type>,
         typename ValueType = bool,
         typename IndexType = typename thrust::iterator_difference<RandomAccessIterator>::type>

  class tail_flags_
{


  public:
    struct tail_flag_functor
    {
      BinaryPredicate binary_pred;
      IndexType n;

      typedef ValueType result_type;

      __attribute__((host)) __attribute__((device))
      tail_flag_functor(IndexType n)
        : binary_pred(), n(n)
      {}

      __attribute__((host)) __attribute__((device))
      tail_flag_functor(IndexType n, BinaryPredicate binary_pred)
        : binary_pred(binary_pred), n(n)
      {}

      template<typename Tuple>
      __attribute__((host)) __attribute__((device)) __inline__ __attribute__((always_inline))
      result_type operator()(const Tuple &t)
      {
        const IndexType i = thrust::get<0>(t);



        return (i == (n - 1) || !binary_pred(thrust::get<1>(t), thrust::get<2>(t)));
      }
    };

    typedef thrust::counting_iterator<IndexType> counting_iterator;

  public:
    typedef thrust::transform_iterator<
      tail_flag_functor,
      thrust::zip_iterator<thrust::tuple<counting_iterator,RandomAccessIterator,RandomAccessIterator> >
    > iterator;

    # pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))

    tail_flags_(RandomAccessIterator first, RandomAccessIterator last)
      : m_begin(thrust::make_transform_iterator(thrust::make_zip_iterator(thrust::make_tuple(thrust::counting_iterator<IndexType>(0), first, first + 1)),
                                                tail_flag_functor(last - first))),
        m_end(m_begin + (last - first))
    {}

    # pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))

    tail_flags_(RandomAccessIterator first, RandomAccessIterator last, BinaryPredicate binary_pred)
      : m_begin(thrust::make_transform_iterator(thrust::make_zip_iterator(thrust::make_tuple(thrust::counting_iterator<IndexType>(0), first, first + 1)),
                                                tail_flag_functor(last - first, binary_pred))),
        m_end(m_begin + (last - first))
    {}

    __attribute__((host)) __attribute__((device))
    iterator begin() const
    {
      return m_begin;
    }

    __attribute__((host)) __attribute__((device))
    iterator end() const
    {
      return m_end;
    }

    template<typename OtherIndex>
    __attribute__((host)) __attribute__((device))
    typename iterator::reference operator[](OtherIndex i)
    {
      return *(begin() + i);
    }

  private:
    iterator m_begin, m_end;
};


template<typename RandomAccessIterator, typename BinaryPredicate>
__attribute__((host)) __attribute__((device))

tail_flags_<RandomAccessIterator, BinaryPredicate>
  make_tail_flags(RandomAccessIterator first, RandomAccessIterator last, BinaryPredicate binary_pred)
{

  return tail_flags_<RandomAccessIterator, BinaryPredicate>(first, last, binary_pred);
}


template<typename RandomAccessIterator>
__attribute__((host)) __attribute__((device))

tail_flags_<RandomAccessIterator>
  make_tail_flags(RandomAccessIterator first, RandomAccessIterator last)
{

  return tail_flags_<RandomAccessIterator>(first, last);
}


}
}
} } } }
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce_by_key.hpp" 2





namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{
namespace reduce_by_key_detail
{


template<typename FlagType, typename ValueType, typename BinaryFunction>
struct scan_head_flags_functor
{
  BinaryFunction binary_op;

  typedef thrust::tuple<FlagType,ValueType> result_type;
  typedef result_type first_argument_type;
  typedef result_type second_argument_type;

  __attribute__((host)) __attribute__((device))
  scan_head_flags_functor(BinaryFunction binary_op)
    : binary_op(binary_op)
  {}

  __attribute__((host)) __attribute__((device))
  result_type operator()(const first_argument_type &a, const second_argument_type &b)
  {
    ValueType val = thrust::get<0>(b) ? thrust::get<1>(b) : binary_op(thrust::get<1>(a), thrust::get<1>(b));
    FlagType flag = thrust::get<0>(a) + thrust::get<0>(b);
    return result_type(flag, val);
  }
};


template<typename ConcurrentGroup,
         typename InputIterator1,
         typename Size,
         typename InputIterator2,
         typename InputIterator3,
         typename OutputIterator1,
         typename OutputIterator2>
__attribute__((device))
void scatter_tails_n(ConcurrentGroup &group,
                     InputIterator1 flags_first,
                     Size n,
                     InputIterator2 keys_first,
                     InputIterator3 values_first,
                     OutputIterator1 keys_result,
                     OutputIterator2 values_result)
{






  bulk_::scatter_if(group,
                   thrust::make_zip_iterator(thrust::make_tuple(values_first, keys_first)),
                   thrust::make_zip_iterator(thrust::make_tuple(values_first + n - 1, keys_first)),
                   thrust::make_transform_iterator(flags_first, thrust::placeholders::_1 - 1),
                   bulk_::detail::make_tail_flags(flags_first, flags_first + n).begin(),
                   thrust::make_zip_iterator(thrust::make_tuple(values_result, keys_result)));
# 108 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce_by_key.hpp"
}


}
}


template<std::size_t groupsize,
         std::size_t grainsize,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator1,
         typename OutputIterator2,
         typename T1,
         typename T2,
         typename BinaryPredicate,
         typename BinaryFunction>
thrust::tuple<
  OutputIterator1,
  OutputIterator2,
  typename thrust::iterator_value<InputIterator1>::type,
  typename thrust::iterator_value<OutputIterator2>::type
>
__attribute__((device))
reduce_by_key(bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> &g,
              InputIterator1 keys_first, InputIterator1 keys_last,
              InputIterator2 values_first,
              OutputIterator1 keys_result,
              OutputIterator2 values_result,
              T1 init_key,
              T2 init_value,
              BinaryPredicate pred,
              BinaryFunction binary_op)
{
  typedef typename thrust::iterator_value<InputIterator2>::type value_type;

  typedef typename bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize>::size_type size_type;

  const size_type interval_size = groupsize * grainsize;


  size_type *s_flags = reinterpret_cast<size_type*>(bulk_::malloc(g, interval_size * sizeof(int)));
  value_type *s_values = reinterpret_cast<value_type*>(bulk_::malloc(g, interval_size * sizeof(value_type)));
# 159 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/reduce_by_key.hpp"
  for(; keys_first < keys_last; keys_first += interval_size, values_first += interval_size)
  {

    size_type n = thrust::min<size_type>(interval_size, keys_last - keys_first);

    bulk_::detail::head_flags_with_init<
      InputIterator1,
      BinaryPredicate,
      size_type
    > flags(keys_first, keys_first + n, init_key, pred);

    detail::reduce_by_key_detail::scan_head_flags_functor<size_type, value_type, BinaryFunction> f(binary_op);


    bulk_::copy_n(bulk_::bound<interval_size>(g),
                 thrust::make_zip_iterator(thrust::make_tuple(flags.begin(), values_first)),
                 n,
                 thrust::make_zip_iterator(thrust::make_tuple(s_flags, s_values)));


    bulk_::inclusive_scan(bulk_::bound<interval_size>(g),
                         thrust::make_zip_iterator(thrust::make_tuple(s_flags, s_values)),
                         thrust::make_zip_iterator(thrust::make_tuple(s_flags + n, s_values)),
                         thrust::make_zip_iterator(thrust::make_tuple(s_flags, s_values)),
                         thrust::make_tuple(1, init_value),
                         f);


    detail::reduce_by_key_detail::scatter_tails_n(bulk_::bound<interval_size>(g),
                                                  s_flags, n,
                                                  keys_first, s_values,
                                                  keys_result, values_result);



    if(g.this_exec.index() == 0 && s_flags[0] > 1)
    {
      keys_result[0] = init_key;
      values_result[0] = init_value;
    }

    size_type result_size = s_flags[n - 1] - 1;

    keys_result += result_size;
    values_result += result_size;
    init_key = keys_first[n-1];
    init_value = s_values[n - 1];

    g.wait();
  }


  bulk_::free(g, s_flags);
  bulk_::free(g, s_values);


  return thrust::make_tuple(keys_result, values_result, init_key, init_value);
}


}
} } } }
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/sort.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/sort.hpp"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/detail/stable_merge_sort.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/detail/stable_merge_sort.hpp"
       
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/detail/stable_merge_sort.hpp"
namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{



template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename Compare>
__inline__ __attribute__((always_inline)) __attribute__((device))
void stable_sort_by_key(const bounded<bound,agent<grainsize> > &exec,
                        RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last,
                        RandomAccessIterator2 values_first,
                        Compare comp);


namespace detail
{
namespace stable_merge_sort_detail
{


template<std::size_t bound, std::size_t groupsize, std::size_t grainsize, typename KeyType, typename ValType, typename Compare>
__attribute__((device))
typename thrust::detail::enable_if<
  bound <= groupsize * grainsize
>::type
inplace_merge_adjacent_partitions(bulk_::bounded<bound,bulk_::concurrent_group<bulk_::agent<grainsize>, groupsize> > &g,
                                  KeyType local_keys[grainsize], ValType local_values[grainsize], void* stage_ptr, int count, int local_size, Compare comp)
{
  union stage_t
  {
    KeyType *keys;
    ValType *vals;
  };

  stage_t stage;
  stage.keys = reinterpret_cast<KeyType*>(stage_ptr);

  typedef typename bulk_::agent<grainsize>::size_type size_type;

  size_type local_offset = grainsize * g.this_exec.index();



  for(size_type num_agents_per_merge = 2; num_agents_per_merge <= groupsize; num_agents_per_merge *= 2)
  {

    bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), local_keys, local_size, stage.keys + local_offset);

    g.wait();


    size_type list = ~(num_agents_per_merge - 1) & g.this_exec.index();
    size_type diag = thrust::min<size_type>(count, grainsize * ((num_agents_per_merge - 1) & g.this_exec.index()));
    size_type start = grainsize * list;


    size_type input_size = grainsize * (num_agents_per_merge / 2);

    size_type partition_first1 = thrust::min<size_type>(count, start);
    size_type partition_first2 = thrust::min<size_type>(count, partition_first1 + input_size);
    size_type partition_last2 = thrust::min<size_type>(count, partition_first2 + input_size);

    size_type n1 = partition_first2 - partition_first1;
    size_type n2 = partition_last2 - partition_first2;

    size_type mp = bulk_::merge_path(stage.keys + partition_first1, n1, stage.keys + partition_first2, n2, diag, comp);



    size_type gather_indices[grainsize];
    bulk_::merge_by_key(bulk_::bound<grainsize>(g.this_exec),
                       stage.keys + partition_first1 + mp, stage.keys + partition_first2,
                       stage.keys + partition_first2 + diag - mp, stage.keys + partition_last2,
                       thrust::make_counting_iterator<size_type>(partition_first1 + mp),
                       thrust::make_counting_iterator<size_type>(partition_first2 + diag - mp),
                       local_keys,
                       gather_indices,
                       comp);


    bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), local_values, local_size, stage.vals + local_offset);


    bulk_::gather(bulk_::bound<grainsize>(g.this_exec), gather_indices, gather_indices + local_size, stage.vals, local_values);

    g.wait();
  }
}


}


template<std::size_t bound, std::size_t groupsize, std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename Compare>
__attribute__((device))
typename thrust::detail::enable_if<
  bound <= groupsize * grainsize
>::type
stable_merge_sort_by_key(bulk_::bounded<bound,bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> > &g,
                         RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last,
                         RandomAccessIterator2 values_first,
                         Compare comp)
{
  typedef typename thrust::iterator_value<RandomAccessIterator1>::type key_type;
  typedef typename thrust::iterator_value<RandomAccessIterator2>::type value_type;

  typedef typename bulk_::agent<grainsize>::size_type size_type;

  size_type n = keys_last - keys_first;
  const size_type tile_size = groupsize * grainsize;

  size_type local_offset = grainsize * g.this_exec.index();
  size_type local_size = thrust::max<size_type>(0, thrust::min<size_type>(grainsize, n - local_offset));


  union
  {
    key_type *keys;
    value_type *values;
  } stage;

  stage.keys = static_cast<key_type*>(bulk_::malloc(g, tile_size * thrust::max(sizeof(key_type), sizeof(value_type))));
# 166 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/detail/stable_merge_sort.hpp"
  bulk_::copy_n(bulk_::bound<tile_size>(g), keys_first, n, stage.keys);

  key_type local_keys[grainsize];
  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), stage.keys + local_offset, local_size, local_keys);


  bulk_::copy_n(bulk_::bound<tile_size>(g), values_first, n, stage.values);

  value_type local_values[grainsize];
  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), stage.values + local_offset, local_size, local_values);


  bulk_::stable_sort_by_key(bulk_::bound<grainsize>(g.this_exec), local_keys, local_keys + local_size, local_values, comp);



  if(n == tile_size)
  {
    stable_merge_sort_detail::inplace_merge_adjacent_partitions(g, local_keys, local_values, stage.keys, tile_size, grainsize, comp);
  }
  else
  {
    stable_merge_sort_detail::inplace_merge_adjacent_partitions(g, local_keys, local_values, stage.keys, n, local_size, comp);
  }


  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), local_keys, local_size, stage.keys + local_offset);
  g.wait();

  bulk_::copy_n(bulk_::bound<tile_size>(g), stage.keys, n, keys_first);


  bulk_::copy_n(bulk_::bound<grainsize>(g.this_exec), local_values, local_size, stage.values + local_offset);
  g.wait();

  bulk_::copy_n(bulk_::bound<tile_size>(g), stage.values, n, values_first);


  bulk_::free(g, stage.keys);

}


}
}
} } } }
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm/sort.hpp" 2


namespace thrust { namespace system { namespace cuda { namespace detail {
namespace bulk_
{
namespace detail
{
namespace sort_detail
{


template<int i, int bound>
struct stable_odd_even_transpose_sort_by_key_impl
{
  template<typename RandomAccessIterator1, typename RandomAccessIterator2, typename Compare>
  static __attribute__((device))
  void sort(RandomAccessIterator1 keys, RandomAccessIterator2 values, int n, Compare comp)
  {
    for(int j = 1 & i; j < bound - 1; j += 2)
    {
      if(j + 1 < n && comp(keys[j + 1], keys[j]))
      {
        using thrust::swap;

       swap(keys[j], keys[j + 1]);
       swap(values[j], values[j + 1]);
      }
    }

    stable_odd_even_transpose_sort_by_key_impl<i + 1, bound>::sort(keys, values, n, comp);
  }
};


template<int i> struct stable_odd_even_transpose_sort_by_key_impl<i, i>
{
  template<typename RandomAccessIterator1, typename RandomAccessIterator2, typename Compare>
  static __attribute__((device)) void sort(RandomAccessIterator1, RandomAccessIterator2, int, Compare) { }
};


template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename Compare>
__inline__ __attribute__((always_inline)) __attribute__((device))
void stable_odd_even_transpose_sort_by_key(const bounded<bound,agent<grainsize> > &,
                                           RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last,
                                           RandomAccessIterator2 values_first,
                                           Compare comp)
{
  stable_odd_even_transpose_sort_by_key_impl<0, bound>::sort(keys_first, values_first, keys_last - keys_first, comp);
}


template<int i, int bound>
struct stable_odd_even_transpose_sort_impl
{
  template<typename RandomAccessIterator, typename Compare>
  static __attribute__((device))
  void sort(RandomAccessIterator keys, int n, Compare comp)
  {
    for(int j = 1 & i; j < bound - 1; j += 2)
    {
      if(j + 1 < n && comp(keys[j + 1], keys[j]))
      {
        using thrust::swap;

       swap(keys[j], keys[j + 1]);
      }
    }

    stable_odd_even_transpose_sort_impl<i + 1, bound>::sort(keys, n, comp);
  }
};


template<int i> struct stable_odd_even_transpose_sort_impl<i, i>
{
  template<typename RandomAccessIterator, typename Compare>
  static __attribute__((device)) void sort(RandomAccessIterator, int, Compare) { }
};


template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator,
         typename Compare>
__inline__ __attribute__((always_inline)) __attribute__((device))
void stable_odd_even_transpose_sort(const bounded<bound,agent<grainsize> > &,
                                    RandomAccessIterator first, RandomAccessIterator last,
                                    Compare comp)
{
  stable_odd_even_transpose_sort_impl<0, bound>::sort(first, last - first, comp);
}


}
}


template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename Compare>
__inline__ __attribute__((always_inline)) __attribute__((device))
void stable_sort_by_key(const bounded<bound,agent<grainsize> > &exec,
                        RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last,
                        RandomAccessIterator2 values_first,
                        Compare comp)
{
  bulk_::detail::sort_detail::stable_odd_even_transpose_sort_by_key(exec, keys_first, keys_last, values_first, comp);
}


template<std::size_t bound,
         std::size_t grainsize,
         typename RandomAccessIterator,
         typename Compare>
__inline__ __attribute__((always_inline)) __attribute__((device))
void stable_sort(const bounded<bound,agent<grainsize> > &exec,
                 RandomAccessIterator first, RandomAccessIterator last,
                 Compare comp)
{
  bulk_::detail::sort_detail::stable_odd_even_transpose_sort(exec, first, last, comp);
}


template<std::size_t bound, std::size_t groupsize, std::size_t grainsize,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2,
         typename Compare>
__attribute__((device))
typename thrust::detail::enable_if<
  bound <= groupsize * grainsize
>::type
stable_sort_by_key(bulk_::bounded<bound,bulk_::concurrent_group<bulk_::agent<grainsize>,groupsize> > &g,
                   RandomAccessIterator1 keys_first, RandomAccessIterator1 keys_last,
                   RandomAccessIterator2 values_first,
                   Compare comp)
{
  bulk_::detail::stable_merge_sort_by_key(g, keys_first, keys_last, values_first, comp);
}


}
} } } }
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/algorithm.hpp" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/bulk.hpp" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/iterator.hpp" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/iterator.hpp"
       
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk/bulk.hpp" 2
# 48 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/bulk.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.inl" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/seq.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/seq.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/execute_with_allocator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/execute_with_allocator.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/allocator_traits.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/allocator_traits.h"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/has_member_function.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/has_member_function.h"
       
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/allocator_traits.h" 2


namespace thrust
{
namespace detail
{



template<typename Alloc> struct allocator_system;


namespace allocator_traits_detail
{

template<typename T> struct has_value_type { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::value_type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_pointer { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::pointer *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_const_pointer { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::const_pointer *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_reference { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::reference *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_const_reference { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::const_reference *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_void_pointer { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::void_pointer *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_const_void_pointer { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::const_void_pointer *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_difference_type { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::difference_type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_size_type { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::size_type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_propagate_on_container_copy_assignment { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::propagate_on_container_copy_assignment *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_propagate_on_container_move_assignment { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::propagate_on_container_move_assignment *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_propagate_on_container_swap { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::propagate_on_container_swap *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T> struct has_system_type { typedef char yes_type; typedef int no_type; template<typename S> static yes_type test(typename S::system_type *); template<typename S> static no_type test(...); static bool const value = sizeof(test<T>(0)) == sizeof(yes_type); typedef thrust::detail::integral_constant<bool, value> type;};
template<typename T, typename Signature> class has_member_system_impl; template<typename T, typename Result> class has_member_system_impl<T, Result(void)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result system(); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(), &U::system>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg> class has_member_system_impl<T, Result(Arg)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result system(Arg); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg), &U::system>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2> class has_member_system_impl<T, Result(Arg1,Arg2)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result system(Arg1,Arg2); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2), &U::system>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3> class has_member_system_impl<T, Result(Arg1,Arg2,Arg3)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result system(Arg1,Arg2,Arg3); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3), &U::system>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> class has_member_system_impl<T, Result(Arg1,Arg2,Arg3,Arg4)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result system(Arg1,Arg2,Arg3,Arg4); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3,Arg4), &U::system>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; };


template<typename T>
  struct nested_pointer
{
  typedef typename T::pointer type;
};

template<typename T>
  struct nested_const_pointer
{
  typedef typename T::const_pointer type;
};

template<typename T>
  struct nested_reference
{
  typedef typename T::reference type;
};

template<typename T>
  struct nested_const_reference
{
  typedef typename T::const_reference type;
};

template<typename T>
  struct nested_void_pointer
{
  typedef typename T::void_pointer type;
};

template<typename T>
  struct nested_const_void_pointer
{
  typedef typename T::const_void_pointer type;
};

template<typename T>
  struct nested_difference_type
{
  typedef typename T::difference_type type;
};

template<typename T>
  struct nested_size_type
{
  typedef typename T::size_type type;
};

template<typename T>
  struct nested_propagate_on_container_copy_assignment
{
  typedef typename T::propagate_on_container_copy_assignment type;
};

template<typename T>
  struct nested_propagate_on_container_move_assignment
{
  typedef typename T::propagate_on_container_move_assignment type;
};

template<typename T>
  struct nested_propagate_on_container_swap
{
  typedef typename T::propagate_on_container_swap type;
};

template<typename T>
  struct nested_system_type
{
  typedef typename T::system_type type;
};

template<typename Alloc>
  class has_member_system
{
  typedef typename allocator_system<Alloc>::type system_type;

  public:
    typedef typename has_member_system_impl<Alloc, system_type&(void)>::type type;
    static const bool value = type::value;
};


}


template<typename Alloc>
  struct allocator_traits
{
  typedef Alloc allocator_type;

  typedef typename allocator_type::value_type value_type;

  typedef typename eval_if<
    allocator_traits_detail::has_pointer<allocator_type>::value,
    allocator_traits_detail::nested_pointer<allocator_type>,
    identity_<value_type*>
  >::type pointer;

  private:
    template<typename T>
      struct rebind_pointer
    {
      typedef typename pointer_traits<pointer>::template rebind<T>::other type;
    };

  public:

  typedef typename eval_if<
    allocator_traits_detail::has_const_pointer<allocator_type>::value,
    allocator_traits_detail::nested_const_pointer<allocator_type>,
    rebind_pointer<const value_type>
  >::type const_pointer;

  typedef typename eval_if<
    allocator_traits_detail::has_void_pointer<allocator_type>::value,
    allocator_traits_detail::nested_void_pointer<allocator_type>,
    rebind_pointer<void>
  >::type void_pointer;

  typedef typename eval_if<
    allocator_traits_detail::has_const_void_pointer<allocator_type>::value,
    allocator_traits_detail::nested_const_void_pointer<allocator_type>,
    rebind_pointer<const void>
  >::type const_void_pointer;

  typedef typename eval_if<
    allocator_traits_detail::has_difference_type<allocator_type>::value,
    allocator_traits_detail::nested_difference_type<allocator_type>,
    pointer_difference<pointer>
  >::type difference_type;

  typedef typename eval_if<
    allocator_traits_detail::has_size_type<allocator_type>::value,
    allocator_traits_detail::nested_size_type<allocator_type>,
    make_unsigned<difference_type>
  >::type size_type;

  typedef typename eval_if<
    allocator_traits_detail::has_propagate_on_container_copy_assignment<allocator_type>::value,
    allocator_traits_detail::nested_propagate_on_container_copy_assignment<allocator_type>,
    identity_<false_type>
  >::type propagate_on_container_copy_assignment;

  typedef typename eval_if<
    allocator_traits_detail::has_propagate_on_container_move_assignment<allocator_type>::value,
    allocator_traits_detail::nested_propagate_on_container_move_assignment<allocator_type>,
    identity_<false_type>
  >::type propagate_on_container_move_assignment;

  typedef typename eval_if<
    allocator_traits_detail::has_propagate_on_container_swap<allocator_type>::value,
    allocator_traits_detail::nested_propagate_on_container_swap<allocator_type>,
    identity_<false_type>
  >::type propagate_on_container_swap;

  typedef typename eval_if<
    allocator_traits_detail::has_system_type<allocator_type>::value,
    allocator_traits_detail::nested_system_type<allocator_type>,
    thrust::iterator_system<pointer>
  >::type system_type;




  inline __attribute__((host)) __attribute__((device))
  static pointer allocate(allocator_type &a, size_type n);

  inline __attribute__((host)) __attribute__((device))
  static pointer allocate(allocator_type &a, size_type n, const_void_pointer hint);

  inline __attribute__((host)) __attribute__((device))
  static void deallocate(allocator_type &a, pointer p, size_type n);



  template<typename T>
  inline __attribute__((host)) __attribute__((device)) static void construct(allocator_type &a, T *p);

  template<typename T, typename Arg1>
  inline __attribute__((host)) __attribute__((device)) static void construct(allocator_type &a, T *p, const Arg1 &arg1);

  template<typename T>
  inline __attribute__((host)) __attribute__((device)) static void destroy(allocator_type &a, T *p);

  inline __attribute__((host)) __attribute__((device))
  static size_type max_size(const allocator_type &a);
};





template<typename T>
  struct is_allocator
    : allocator_traits_detail::has_value_type<T>
{};



template<typename Alloc>
  struct allocator_system
{

  typedef typename eval_if<
    allocator_traits_detail::has_system_type<Alloc>::value,
    allocator_traits_detail::nested_system_type<Alloc>,
    thrust::iterator_system<
      typename allocator_traits<Alloc>::pointer
    >
  >::type type;


  typedef typename eval_if<
    allocator_traits_detail::has_member_system<Alloc>::value,
    add_reference<type>,
    identity_<type>
  >::type get_result_type;

  __attribute__((host)) __attribute__((device))
  inline static get_result_type get(Alloc &a);
};


}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/allocator_traits.inl" 1
# 19 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/allocator_traits.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/is_call_possible.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/type_traits/is_call_possible.h"
       







namespace thrust
{
namespace detail
{
namespace is_call_possible_detail
{

template<typename T> class void_exp_result {};

template<typename T, typename U>
U const& operator,(U const&, void_exp_result<T>);

template<typename T, typename U>
U& operator,(U&, void_exp_result<T>);

template<typename src_type, typename dest_type>
struct clone_constness
{
  typedef dest_type type;
};

template<typename src_type, typename dest_type>
struct clone_constness<const src_type, dest_type>
{
  typedef const dest_type type;
};

}
}
}
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/allocator_traits.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/integer_traits.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/integer_traits.h"
       



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include-fixed/limits.h" 1 3 4
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/integer_traits.h" 2

namespace thrust
{

namespace detail
{

template<typename T>
  class integer_traits
{
  public:
    static const bool is_integral = false;
};

template<typename T, T min_val, T max_val>
  class integer_traits_base
{
  public:
    static const bool is_integral = true;
    static const T const_min = min_val;
    static const T const_max = max_val;
};


template<>
  class integer_traits<bool>
    : public std::numeric_limits<bool>,
      public integer_traits_base<bool, false, true>
{};


template<>
  class integer_traits<char>
    : public std::numeric_limits<char>,
      public integer_traits_base<char, (-127 - 1), 127>
{};


template<>
  class integer_traits<signed char>
    : public std::numeric_limits<signed char>,
      public integer_traits_base<signed char, (-127 - 1), 127>
{};


template<>
  class integer_traits<unsigned char>
    : public std::numeric_limits<unsigned char>,
      public integer_traits_base<unsigned char, 0, (127 * 2 + 1)>
{};


template<>
  class integer_traits<short>
    : public std::numeric_limits<short>,
      public integer_traits_base<short, (-32767 - 1), 32767>
{};


template<>
  class integer_traits<unsigned short>
    : public std::numeric_limits<unsigned short>,
      public integer_traits_base<unsigned short, 0, (32767 * 2 + 1)>
{};


template<>
  class integer_traits<int>
    : public std::numeric_limits<int>,
      public integer_traits_base<int, (-2147483647 - 1), 2147483647>
{};


template<>
  class integer_traits<unsigned int>
    : public std::numeric_limits<unsigned int>,
      public integer_traits_base<unsigned int, 0, (2147483647 * 2U + 1U)>
{};


template<>
  class integer_traits<long>
    : public std::numeric_limits<long>,
      public integer_traits_base<long, (-9223372036854775807L - 1L), 9223372036854775807L>
{};


template<>
  class integer_traits<unsigned long>
    : public std::numeric_limits<unsigned long>,
      public integer_traits_base<unsigned long, 0, (9223372036854775807L * 2UL + 1UL)>
{};


template<>
  class integer_traits<long long>
    : public std::numeric_limits<long long>,
      public integer_traits_base<long long, (-9223372036854775807LL -1), 9223372036854775807LL>
{};


template<>
  class integer_traits<unsigned long long>
    : public std::numeric_limits<unsigned long long>,
      public integer_traits_base<unsigned long long, 0, (9223372036854775807LL * 2ULL + 1)>
{};

}

}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/allocator_traits.inl" 2


namespace thrust
{
namespace detail
{
namespace allocator_traits_detail
{

template<typename T, typename Signature> class has_member_allocate_with_hint_impl_has_member; template<typename T, typename Result> class has_member_allocate_with_hint_impl_has_member<T, Result(void)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result allocate(); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(), &U::allocate>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg> class has_member_allocate_with_hint_impl_has_member<T, Result(Arg)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result allocate(Arg); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg), &U::allocate>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2> class has_member_allocate_with_hint_impl_has_member<T, Result(Arg1,Arg2)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result allocate(Arg1,Arg2); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2), &U::allocate>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3> class has_member_allocate_with_hint_impl_has_member<T, Result(Arg1,Arg2,Arg3)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result allocate(Arg1,Arg2,Arg3); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3), &U::allocate>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> class has_member_allocate_with_hint_impl_has_member<T, Result(Arg1,Arg2,Arg3,Arg4)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result allocate(Arg1,Arg2,Arg3,Arg4); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3,Arg4), &U::allocate>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template <typename T, typename Signature> struct has_member_allocate_with_hint_impl { private: struct yes {}; struct no { yes m[2]; }; struct derived : public T { using T::allocate; no allocate(...) const; }; typedef typename thrust::detail::is_call_possible_detail::clone_constness<T, derived>::type derived_type; template<typename U, typename Result> struct return_value_check { static yes deduce(Result); static no deduce(...); static no deduce(no); static no deduce(thrust::detail::is_call_possible_detail::void_exp_result<T>); }; template<typename U> struct return_value_check<U, void> { static yes deduce(...); static no deduce(no); }; template<bool has_the_member_of_interest, typename F> struct impl { static const bool value = false; }; template<typename Result, typename Arg> struct impl<true, Result(Arg)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg>::type arg; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.allocate(arg), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2> struct impl<true, Result(Arg1,Arg2)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.allocate(arg1,arg2), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3> struct impl<true, Result(Arg1,Arg2,Arg3)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.allocate(arg1,arg2,arg3), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> struct impl<true, Result(Arg1,Arg2,Arg3,Arg4)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static typename add_reference<Arg4>::type arg4; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.allocate(arg1,arg2,arg3,arg4), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; public: static const bool value = impl<has_member_allocate_with_hint_impl_has_member<T,Signature>::value, Signature>::value; typedef thrust::detail::integral_constant<bool,value> type; };

template<typename Alloc>
  class has_member_allocate_with_hint
{
  typedef typename allocator_traits<Alloc>::pointer pointer;
  typedef typename allocator_traits<Alloc>::size_type size_type;
  typedef typename allocator_traits<Alloc>::const_void_pointer const_void_pointer;

  public:
    typedef typename has_member_allocate_with_hint_impl<Alloc, pointer(size_type,const_void_pointer)>::type type;
    static const bool value = type::value;
};

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename enable_if<
    has_member_allocate_with_hint<Alloc>::value,
    typename allocator_traits<Alloc>::pointer
  >::type
    allocate(Alloc &a, typename allocator_traits<Alloc>::size_type n, typename allocator_traits<Alloc>::const_void_pointer hint)
{
  return a.allocate(n,hint);
}

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename disable_if<
    has_member_allocate_with_hint<Alloc>::value,
    typename allocator_traits<Alloc>::pointer
  >::type
    allocate(Alloc &a, typename allocator_traits<Alloc>::size_type n, typename allocator_traits<Alloc>::const_void_pointer)
{
  return a.allocate(n);
}


template<typename T, typename Signature> class has_member_construct1_impl_has_member; template<typename T, typename Result> class has_member_construct1_impl_has_member<T, Result(void)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg> class has_member_construct1_impl_has_member<T, Result(Arg)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(Arg); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2> class has_member_construct1_impl_has_member<T, Result(Arg1,Arg2)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(Arg1,Arg2); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3> class has_member_construct1_impl_has_member<T, Result(Arg1,Arg2,Arg3)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(Arg1,Arg2,Arg3); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> class has_member_construct1_impl_has_member<T, Result(Arg1,Arg2,Arg3,Arg4)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(Arg1,Arg2,Arg3,Arg4); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3,Arg4), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template <typename T, typename Signature> struct has_member_construct1_impl { private: struct yes {}; struct no { yes m[2]; }; struct derived : public T { using T::construct; no construct(...) const; }; typedef typename thrust::detail::is_call_possible_detail::clone_constness<T, derived>::type derived_type; template<typename U, typename Result> struct return_value_check { static yes deduce(Result); static no deduce(...); static no deduce(no); static no deduce(thrust::detail::is_call_possible_detail::void_exp_result<T>); }; template<typename U> struct return_value_check<U, void> { static yes deduce(...); static no deduce(no); }; template<bool has_the_member_of_interest, typename F> struct impl { static const bool value = false; }; template<typename Result, typename Arg> struct impl<true, Result(Arg)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg>::type arg; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.construct(arg), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2> struct impl<true, Result(Arg1,Arg2)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.construct(arg1,arg2), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3> struct impl<true, Result(Arg1,Arg2,Arg3)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.construct(arg1,arg2,arg3), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> struct impl<true, Result(Arg1,Arg2,Arg3,Arg4)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static typename add_reference<Arg4>::type arg4; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.construct(arg1,arg2,arg3,arg4), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; public: static const bool value = impl<has_member_construct1_impl_has_member<T,Signature>::value, Signature>::value; typedef thrust::detail::integral_constant<bool,value> type; };

template<typename Alloc, typename T>
  struct has_member_construct1
    : has_member_construct1_impl<Alloc, void(T*)>
{};

 #pragma hd_warning_disable
template<typename Alloc, typename T>
  inline __attribute__((host)) __attribute__((device))
    typename enable_if<
      has_member_construct1<Alloc,T>::value
    >::type
      construct(Alloc &a, T *p)
{
  a.construct(p);
}

template<typename Alloc, typename T>
  inline __attribute__((host)) __attribute__((device))
    typename disable_if<
      has_member_construct1<Alloc,T>::value
    >::type
      construct(Alloc &a, T *p)
{
  ::new(static_cast<void*>(p)) T();
}


template<typename T, typename Signature> class has_member_construct2_impl_has_member; template<typename T, typename Result> class has_member_construct2_impl_has_member<T, Result(void)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg> class has_member_construct2_impl_has_member<T, Result(Arg)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(Arg); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2> class has_member_construct2_impl_has_member<T, Result(Arg1,Arg2)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(Arg1,Arg2); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3> class has_member_construct2_impl_has_member<T, Result(Arg1,Arg2,Arg3)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(Arg1,Arg2,Arg3); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> class has_member_construct2_impl_has_member<T, Result(Arg1,Arg2,Arg3,Arg4)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result construct(Arg1,Arg2,Arg3,Arg4); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3,Arg4), &U::construct>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template <typename T, typename Signature> struct has_member_construct2_impl { private: struct yes {}; struct no { yes m[2]; }; struct derived : public T { using T::construct; no construct(...) const; }; typedef typename thrust::detail::is_call_possible_detail::clone_constness<T, derived>::type derived_type; template<typename U, typename Result> struct return_value_check { static yes deduce(Result); static no deduce(...); static no deduce(no); static no deduce(thrust::detail::is_call_possible_detail::void_exp_result<T>); }; template<typename U> struct return_value_check<U, void> { static yes deduce(...); static no deduce(no); }; template<bool has_the_member_of_interest, typename F> struct impl { static const bool value = false; }; template<typename Result, typename Arg> struct impl<true, Result(Arg)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg>::type arg; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.construct(arg), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2> struct impl<true, Result(Arg1,Arg2)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.construct(arg1,arg2), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3> struct impl<true, Result(Arg1,Arg2,Arg3)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.construct(arg1,arg2,arg3), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> struct impl<true, Result(Arg1,Arg2,Arg3,Arg4)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static typename add_reference<Arg4>::type arg4; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.construct(arg1,arg2,arg3,arg4), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; public: static const bool value = impl<has_member_construct2_impl_has_member<T,Signature>::value, Signature>::value; typedef thrust::detail::integral_constant<bool,value> type; };

template<typename Alloc, typename T, typename Arg1>
  struct has_member_construct2
    : has_member_construct2_impl<Alloc, void(T*,const Arg1 &)>
{};

template<typename Alloc, typename T, typename Arg1>
  inline __attribute__((host)) __attribute__((device))
    typename enable_if<
      has_member_construct2<Alloc,T,Arg1>::value
    >::type
      construct(Alloc &a, T *p, const Arg1 &arg1)
{
  a.construct(p,arg1);
}

template<typename Alloc, typename T, typename Arg1>
  inline __attribute__((host)) __attribute__((device))
    typename disable_if<
      has_member_construct2<Alloc,T,Arg1>::value
    >::type
      construct(Alloc &, T *p, const Arg1 &arg1)
{
  ::new(static_cast<void*>(p)) T(arg1);
}


template<typename T, typename Signature> class has_member_destroy_impl_has_member; template<typename T, typename Result> class has_member_destroy_impl_has_member<T, Result(void)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result destroy(); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(), &U::destroy>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg> class has_member_destroy_impl_has_member<T, Result(Arg)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result destroy(Arg); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg), &U::destroy>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2> class has_member_destroy_impl_has_member<T, Result(Arg1,Arg2)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result destroy(Arg1,Arg2); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2), &U::destroy>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3> class has_member_destroy_impl_has_member<T, Result(Arg1,Arg2,Arg3)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result destroy(Arg1,Arg2,Arg3); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3), &U::destroy>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> class has_member_destroy_impl_has_member<T, Result(Arg1,Arg2,Arg3,Arg4)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result destroy(Arg1,Arg2,Arg3,Arg4); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3,Arg4), &U::destroy>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template <typename T, typename Signature> struct has_member_destroy_impl { private: struct yes {}; struct no { yes m[2]; }; struct derived : public T { using T::destroy; no destroy(...) const; }; typedef typename thrust::detail::is_call_possible_detail::clone_constness<T, derived>::type derived_type; template<typename U, typename Result> struct return_value_check { static yes deduce(Result); static no deduce(...); static no deduce(no); static no deduce(thrust::detail::is_call_possible_detail::void_exp_result<T>); }; template<typename U> struct return_value_check<U, void> { static yes deduce(...); static no deduce(no); }; template<bool has_the_member_of_interest, typename F> struct impl { static const bool value = false; }; template<typename Result, typename Arg> struct impl<true, Result(Arg)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg>::type arg; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.destroy(arg), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2> struct impl<true, Result(Arg1,Arg2)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.destroy(arg1,arg2), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3> struct impl<true, Result(Arg1,Arg2,Arg3)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.destroy(arg1,arg2,arg3), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> struct impl<true, Result(Arg1,Arg2,Arg3,Arg4)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static typename add_reference<Arg4>::type arg4; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.destroy(arg1,arg2,arg3,arg4), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; public: static const bool value = impl<has_member_destroy_impl_has_member<T,Signature>::value, Signature>::value; typedef thrust::detail::integral_constant<bool,value> type; };

template<typename Alloc, typename T>
  struct has_member_destroy
    : has_member_destroy_impl<Alloc, void(T*)>
{};

template<typename Alloc, typename T>
  inline __attribute__((host)) __attribute__((device))
    typename enable_if<
      has_member_destroy<Alloc,T>::value
    >::type
      destroy(Alloc &a, T *p)
{
  a.destroy(p);
}

template<typename Alloc, typename T>
  inline __attribute__((host)) __attribute__((device))
    typename disable_if<
      has_member_destroy<Alloc,T>::value
    >::type
      destroy(Alloc &, T *p)
{
  p->~T();
}


template<typename T, typename Signature> class has_member_max_size_impl_has_member; template<typename T, typename Result> class has_member_max_size_impl_has_member<T, Result(void)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result max_size(); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(), &U::max_size>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg> class has_member_max_size_impl_has_member<T, Result(Arg)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result max_size(Arg); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg), &U::max_size>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2> class has_member_max_size_impl_has_member<T, Result(Arg1,Arg2)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result max_size(Arg1,Arg2); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2), &U::max_size>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3> class has_member_max_size_impl_has_member<T, Result(Arg1,Arg2,Arg3)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result max_size(Arg1,Arg2,Arg3); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3), &U::max_size>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template<typename T, typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> class has_member_max_size_impl_has_member<T, Result(Arg1,Arg2,Arg3,Arg4)> { class yes { char m; }; class no { yes m[2]; }; struct base_mixin { Result max_size(Arg1,Arg2,Arg3,Arg4); }; struct base : public T, public base_mixin {}; template <typename U, U t> class helper{}; template <typename U> static no deduce(U*, helper<Result (base_mixin::*)(Arg1,Arg2,Arg3,Arg4), &U::max_size>* = 0); static yes deduce(...); public: static const bool value = sizeof(yes) == sizeof(deduce(static_cast<base*>(0))); typedef thrust::detail::integral_constant<bool,value> type; }; template <typename T, typename Signature> struct has_member_max_size_impl { private: struct yes {}; struct no { yes m[2]; }; struct derived : public T { using T::max_size; no max_size(...) const; }; typedef typename thrust::detail::is_call_possible_detail::clone_constness<T, derived>::type derived_type; template<typename U, typename Result> struct return_value_check { static yes deduce(Result); static no deduce(...); static no deduce(no); static no deduce(thrust::detail::is_call_possible_detail::void_exp_result<T>); }; template<typename U> struct return_value_check<U, void> { static yes deduce(...); static no deduce(no); }; template<bool has_the_member_of_interest, typename F> struct impl { static const bool value = false; }; template<typename Result, typename Arg> struct impl<true, Result(Arg)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg>::type arg; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.max_size(arg), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2> struct impl<true, Result(Arg1,Arg2)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.max_size(arg1,arg2), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3> struct impl<true, Result(Arg1,Arg2,Arg3)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.max_size(arg1,arg2,arg3), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; template<typename Result, typename Arg1, typename Arg2, typename Arg3, typename Arg4> struct impl<true, Result(Arg1,Arg2,Arg3,Arg4)> { static typename add_reference<derived_type>::type test_me; static typename add_reference<Arg1>::type arg1; static typename add_reference<Arg2>::type arg2; static typename add_reference<Arg3>::type arg3; static typename add_reference<Arg4>::type arg4; static const bool value = sizeof( return_value_check<T, Result>::deduce( (test_me.max_size(arg1,arg2,arg3,arg4), thrust::detail::is_call_possible_detail::void_exp_result<T>()) ) ) == sizeof(yes); }; public: static const bool value = impl<has_member_max_size_impl_has_member<T,Signature>::value, Signature>::value; typedef thrust::detail::integral_constant<bool,value> type; };

template<typename Alloc>
  class has_member_max_size
{
  typedef typename allocator_traits<Alloc>::size_type size_type;

  public:
    typedef typename has_member_max_size_impl<Alloc, size_type(void)>::type type;
    static const bool value = type::value;
};

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename enable_if<
    has_member_max_size<Alloc>::value,
    typename allocator_traits<Alloc>::size_type
  >::type
    max_size(const Alloc &a)
{
  return a.max_size();
}

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename disable_if<
    has_member_max_size<Alloc>::value,
    typename allocator_traits<Alloc>::size_type
  >::type
    max_size(const Alloc &a)
{
  typedef typename allocator_traits<Alloc>::size_type size_type;
  return thrust::detail::integer_traits<size_type>::const_max;
}

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename enable_if<
    has_member_system<Alloc>::value,
    typename allocator_system<Alloc>::type &
  >::type
    system(Alloc &a)
{

  return a.system();
}

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename disable_if<
    has_member_system<Alloc>::value,
    typename allocator_system<Alloc>::type
  >::type
    system(Alloc &a)
{

  typename allocator_system<Alloc>::type result;
  return result;
}


}


template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename allocator_traits<Alloc>::pointer
    allocator_traits<Alloc>
      ::allocate(Alloc &a, typename allocator_traits<Alloc>::size_type n)
{
  struct workaround_warnings
  {
    #pragma hd_warning_disable
    static __attribute__((host)) __attribute__((device))
    typename allocator_traits<Alloc>::pointer
      allocate(Alloc &a, typename allocator_traits<Alloc>::size_type n)
    {
      return a.allocate(n);
    }
  };

  return workaround_warnings::allocate(a, n);
}

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename allocator_traits<Alloc>::pointer
    allocator_traits<Alloc>
      ::allocate(Alloc &a, typename allocator_traits<Alloc>::size_type n, typename allocator_traits<Alloc>::const_void_pointer hint)
{
  return allocator_traits_detail::allocate(a, n, hint);
}

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  void allocator_traits<Alloc>
    ::deallocate(Alloc &a, typename allocator_traits<Alloc>::pointer p, typename allocator_traits<Alloc>::size_type n)
{
  struct workaround_warnings
  {
    #pragma hd_warning_disable
    static __attribute__((host)) __attribute__((device))
    void deallocate(Alloc &a, typename allocator_traits<Alloc>::pointer p, typename allocator_traits<Alloc>::size_type n)
    {
      return a.deallocate(p,n);
    }
  };

  return workaround_warnings::deallocate(a,p,n);
}

template<typename Alloc>
  template<typename T>
  __attribute__((host)) __attribute__((device))
    void allocator_traits<Alloc>
      ::construct(allocator_type &a, T *p)
{
  return allocator_traits_detail::construct(a,p);
}

template<typename Alloc>
  template<typename T, typename Arg1>
  __attribute__((host)) __attribute__((device))
    void allocator_traits<Alloc>
      ::construct(allocator_type &a, T *p, const Arg1 &arg1)
{
  return allocator_traits_detail::construct(a,p,arg1);
}

template<typename Alloc>
  template<typename T>
  __attribute__((host)) __attribute__((device))
    void allocator_traits<Alloc>
      ::destroy(allocator_type &a, T *p)
{
  return allocator_traits_detail::destroy(a,p);
}

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename allocator_traits<Alloc>::size_type
    allocator_traits<Alloc>
      ::max_size(const allocator_type &a)
{
  return allocator_traits_detail::max_size(a);
}

template<typename Alloc>
__attribute__((host)) __attribute__((device))
  typename allocator_system<Alloc>::get_result_type
    allocator_system<Alloc>
      ::get(Alloc &a)
{
  return allocator_traits_detail::system(a);
}


}
}
# 282 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/allocator_traits.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/execute_with_allocator.h" 2



namespace thrust
{
namespace detail
{

template<typename ToPointer, typename FromPointer>
__attribute__((host)) __attribute__((device))
ToPointer reinterpret_pointer_cast(FromPointer ptr)
{
  typedef typename thrust::detail::pointer_element<ToPointer>::type to_element;
  return ToPointer(reinterpret_cast<to_element*>(thrust::raw_pointer_cast(ptr)));
}


template<typename Allocator, template <typename> class BaseSystem>
  struct execute_with_allocator
    : BaseSystem<execute_with_allocator<Allocator, BaseSystem> >
{
  typedef BaseSystem<
    execute_with_allocator<Allocator, BaseSystem>
  > super_t;

  Allocator &m_alloc;

  __attribute__((host)) __attribute__((device))
  execute_with_allocator(const super_t &super, Allocator &alloc)
    : super_t(super),
      m_alloc(alloc)
  {}

  __attribute__((host)) __attribute__((device))
  execute_with_allocator(Allocator &alloc)
    : m_alloc(alloc)
  {}

  template<typename T>
  __attribute__((host)) __attribute__((device))
    friend thrust::pair<T*,std::ptrdiff_t>
      get_temporary_buffer(execute_with_allocator &system, std::ptrdiff_t n)
  {
    typedef typename thrust::detail::allocator_traits<Allocator> alloc_traits;
    typedef typename alloc_traits::void_pointer void_pointer;
    typedef typename alloc_traits::size_type size_type;
    typedef typename alloc_traits::value_type value_type;


    size_type num_elements = thrust::detail::util::divide_ri(sizeof(T) * n, sizeof(value_type));


    void_pointer ptr = alloc_traits::allocate(system.m_alloc, num_elements);


    return thrust::make_pair(thrust::detail::reinterpret_pointer_cast<T*>(ptr),n);
  }

  template<typename Pointer>
    friend void return_temporary_buffer(execute_with_allocator &system, Pointer p)
  {
    typedef typename thrust::detail::allocator_traits<Allocator> alloc_traits;
    typedef typename alloc_traits::pointer pointer;


    pointer to_ptr = thrust::detail::reinterpret_pointer_cast<pointer>(p);
    alloc_traits::deallocate(system.m_alloc, to_ptr, 0);
  }
};


}
}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/seq.h" 2


namespace thrust
{
namespace detail
{


struct seq_t : thrust::system::detail::sequential::execution_policy<seq_t>
{
  __attribute__((host)) __attribute__((device))
  seq_t() : thrust::system::detail::sequential::execution_policy<seq_t>() {}


  template<typename DerivedPolicy>
  __attribute__((host)) __attribute__((device))
  seq_t(const thrust::execution_policy<DerivedPolicy> &)
    : thrust::system::detail::sequential::execution_policy<seq_t>()
  {}

  template<typename Allocator>
    thrust::detail::execute_with_allocator<Allocator, thrust::system::detail::sequential::execution_policy>
      operator()(Allocator &alloc) const
  {
    return thrust::detail::execute_with_allocator<Allocator, thrust::system::detail::sequential::execution_policy>(alloc);
  }
};


}



static const __attribute__((device)) detail::seq_t seq;





}
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/execute_on_stream.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/execute_on_stream.h"
       





namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{



template<typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
inline cudaStream_t stream(const execution_policy<DerivedPolicy> &exec)
{
  return 0;
}



template<typename DerivedPolicy>
class execute_on_stream_base
  : public thrust::system::cuda::detail::execution_policy<DerivedPolicy>
{
  public:
    __attribute__((host)) __attribute__((device))
    execute_on_stream_base()
      : m_stream(0)
    {}

    __attribute__((host)) __attribute__((device))
    execute_on_stream_base(cudaStream_t stream)
      : m_stream(stream)
    {}

    __attribute__((host)) __attribute__((device))
    DerivedPolicy on(const cudaStream_t &s) const
    {


      DerivedPolicy result = thrust::detail::derived_cast(*this);


      result.set_stream(s);

      return result;
    }

  private:

    __attribute__((host)) __attribute__((device))
    friend inline cudaStream_t stream(const execute_on_stream_base &exec)
    {
      return exec.m_stream;
    }

    __attribute__((host)) __attribute__((device))
    inline void set_stream(const cudaStream_t &s)
    {
      m_stream = s;
    }

    cudaStream_t m_stream;
};



class execute_on_stream
  : public execute_on_stream_base<execute_on_stream>
{
  typedef execute_on_stream_base<execute_on_stream> super_t;

  public:
    __attribute__((host)) __attribute__((device))
    inline execute_on_stream(cudaStream_t stream)
      : super_t(stream)
    {}
};


}
}
}
}
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.inl" 2


namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{
namespace for_each_n_detail
{


struct for_each_kernel
{
  template<typename Iterator, typename Function, typename Size>
  __attribute__((host)) __attribute__((device))
  void operator()(bulk_::parallel_group<bulk_::concurrent_group<> > &grid, Iterator first, Function f, Size n)
  {
    Size grid_size = grid.size() * grid.this_exec.size();

    Size i = grid.this_exec.index() * grid.this_exec.size() + grid.this_exec.this_exec.index();

    first += i;

    while(i < n)
    {
      f(*first);
      i += grid_size;
      first += grid_size;
    }
  }
};


template<typename Size>
__attribute__((host)) __attribute__((device))
bool use_wide_counter(Size n, unsigned int narrow_grid_size)
{



  Size threshold = static_cast<Size>((2147483647 * 2U + 1U));

  bool result = (sizeof(Size) > sizeof(unsigned int)) && (n > threshold);

  if(!result)
  {

    unsigned int narrow_n = static_cast<unsigned int>(n);

    if((narrow_n - 1u) + narrow_grid_size < narrow_n)
    {
      result = true;
    }
  }

  return result;
}


}


template<typename DerivedPolicy,
         typename RandomAccessIterator,
         typename Size,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
RandomAccessIterator for_each_n(execution_policy<DerivedPolicy> &exec,
                                RandomAccessIterator first,
                                Size n,
                                UnaryFunction f)
{





  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<RandomAccessIterator, 3 == 3>::value) ) >)> thrust_static_assert_typedef_109 __attribute__((unused));

  struct workaround
  {
    __attribute__((host)) __attribute__((device))
    static RandomAccessIterator parallel_path(execution_policy<DerivedPolicy> &exec, RandomAccessIterator first, Size n, UnaryFunction f)
    {
      thrust::detail::wrapped_function<UnaryFunction,void> wrapped_f(f);



      unsigned int narrow_n = static_cast<unsigned int>(n);
      unsigned int narrow_num_groups = 0;
      unsigned int narrow_group_size = 0;


      thrust::tie(narrow_num_groups, narrow_group_size) = bulk_::choose_sizes(bulk_::grid(), for_each_n_detail::for_each_kernel(), bulk_::root, first, wrapped_f, narrow_n);


      if(for_each_n_detail::use_wide_counter(n, narrow_num_groups * narrow_group_size))
      {
        Size num_groups = 0;
        Size group_size = 0;
        thrust::tie(num_groups, group_size) = bulk_::choose_sizes(bulk_::grid(), for_each_n_detail::for_each_kernel(), bulk_::root, first, wrapped_f, n);

        num_groups = thrust::min<Size>(num_groups, thrust::detail::util::divide_ri(n, group_size));

        bulk_::async(bulk_::grid(num_groups,group_size), for_each_n_detail::for_each_kernel(), bulk_::root, first, wrapped_f, n);
      }
      else
      {

        narrow_num_groups = thrust::min<unsigned int>(narrow_num_groups, thrust::detail::util::divide_ri(narrow_n, narrow_group_size));

        bulk_::async(bulk_::grid(narrow_num_groups,narrow_group_size), for_each_n_detail::for_each_kernel(), bulk_::root, first, wrapped_f, narrow_n);
      }

      return first + n;
    }

    __attribute__((host)) __attribute__((device))
    static RandomAccessIterator sequential_path(execution_policy<DerivedPolicy> &, RandomAccessIterator first, Size n, UnaryFunction f)
    {
      return thrust::for_each_n(thrust::seq, first, n, f);
    }
  };




  return workaround::sequential_path(exec, first, n, f);

}


template<typename DerivedPolicy,
         typename InputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
InputIterator for_each(execution_policy<DerivedPolicy> &exec,
                       InputIterator first,
                       InputIterator last,
                       UnaryFunction f)
{
  return cuda::detail::for_each_n(exec, first, thrust::distance(first,last), f);
}


}
}
}
}
# 65 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/for_each.h" 2
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/for_each.h" 2
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/for_each.inl" 2

namespace thrust
{

 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
  InputIterator for_each(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                         InputIterator first,
                         InputIterator last,
                         UnaryFunction f)
{
  using thrust::system::detail::generic::for_each;

  return for_each(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, f);
}


template<typename InputIterator,
         typename UnaryFunction>
InputIterator for_each(InputIterator first,
                       InputIterator last,
                       UnaryFunction f)
{
  using thrust::system::detail::generic::select_system;
  typedef typename thrust::iterator_system<InputIterator>::type System;

  System system;
  return thrust::for_each(select_system(system), first, last, f);
}

 #pragma hd_warning_disable
template<typename DerivedPolicy, typename InputIterator, typename Size, typename UnaryFunction>
__attribute__((host)) __attribute__((device))
  InputIterator for_each_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                           InputIterator first,
                           Size n,
                           UnaryFunction f)
{
  using thrust::system::detail::generic::for_each_n;

  return for_each_n(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, n, f);
}


template<typename InputIterator,
         typename Size,
         typename UnaryFunction>
InputIterator for_each_n(InputIterator first,
                         Size n,
                         UnaryFunction f)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System;

  System system;
  return thrust::for_each_n(select_system(system), first, n, f);
}


}
# 280 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/for_each.h" 2
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/transform.inl" 2




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/internal_functional.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/internal_functional.h"
       






# 1 "/usr/include/c++/4.8/memory" 1 3
# 46 "/usr/include/c++/4.8/memory" 3
       
# 47 "/usr/include/c++/4.8/memory" 3
# 67 "/usr/include/c++/4.8/memory" 3
# 1 "/usr/include/c++/4.8/bits/stl_raw_storage_iter.h" 1 3
# 59 "/usr/include/c++/4.8/bits/stl_raw_storage_iter.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{






  template <class _OutputIterator, class _Tp>
    class raw_storage_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _OutputIterator _M_iter;

    public:
      explicit
      raw_storage_iterator(_OutputIterator __x)
      : _M_iter(__x) {}

      raw_storage_iterator&
      operator*() { return *this; }

      raw_storage_iterator&
      operator=(const _Tp& __element)
      {
 std::_Construct(std::__addressof(*_M_iter), __element);
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>&
      operator++()
      {
 ++_M_iter;
 return *this;
      }

      raw_storage_iterator<_OutputIterator, _Tp>
      operator++(int)
      {
 raw_storage_iterator<_OutputIterator, _Tp> __tmp = *this;
 ++_M_iter;
 return __tmp;
      }
    };


}
# 68 "/usr/include/c++/4.8/memory" 2 3
# 87 "/usr/include/c++/4.8/memory" 3
# 1 "/usr/include/c++/4.8/backward/auto_ptr.h" 1 3
# 36 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 47 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
  template<typename _Tp1>
    struct auto_ptr_ref
    {
      _Tp1* _M_ptr;

      explicit
      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }
    } ;
# 86 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
  template<typename _Tp>
    class auto_ptr
    {
    private:
      _Tp* _M_ptr;

    public:

      typedef _Tp element_type;







      explicit
      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }
# 112 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }
# 124 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }
# 135 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      auto_ptr&
      operator=(auto_ptr& __a) throw()
      {
 reset(__a.release());
 return *this;
      }
# 152 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      template<typename _Tp1>
        auto_ptr&
        operator=(auto_ptr<_Tp1>& __a) throw()
        {
   reset(__a.release());
   return *this;
 }
# 170 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      ~auto_ptr() { delete _M_ptr; }
# 180 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      element_type&
      operator*() const throw()
      {
 ;
 return *_M_ptr;
      }







      element_type*
      operator->() const throw()
      {
 ;
 return _M_ptr;
      }
# 210 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      element_type*
      get() const throw() { return _M_ptr; }
# 224 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      element_type*
      release() throw()
      {
 element_type* __tmp = _M_ptr;
 _M_ptr = 0;
 return __tmp;
      }
# 239 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      void
      reset(element_type* __p = 0) throw()
      {
 if (__p != _M_ptr)
   {
     delete _M_ptr;
     _M_ptr = __p;
   }
      }
# 260 "/usr/include/c++/4.8/backward/auto_ptr.h" 3
      auto_ptr(auto_ptr_ref<element_type> __ref) throw()
      : _M_ptr(__ref._M_ptr) { }

      auto_ptr&
      operator=(auto_ptr_ref<element_type> __ref) throw()
      {
 if (__ref._M_ptr != this->get())
   {
     delete _M_ptr;
     _M_ptr = __ref._M_ptr;
   }
 return *this;
      }

      template<typename _Tp1>
        operator auto_ptr_ref<_Tp1>() throw()
        { return auto_ptr_ref<_Tp1>(this->release()); }

      template<typename _Tp1>
        operator auto_ptr<_Tp1>() throw()
        { return auto_ptr<_Tp1>(this->release()); }
    } ;



  template<>
    class auto_ptr<void>
    {
    public:
      typedef void element_type;
    } ;
# 326 "/usr/include/c++/4.8/backward/auto_ptr.h" 3

}
# 88 "/usr/include/c++/4.8/memory" 2 3
# 30 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/internal_functional.h" 2

namespace thrust
{
namespace detail
{


template<typename Predicate>
struct unary_negate
{
  typedef bool result_type;

  Predicate pred;

  __attribute__((host)) __attribute__((device))
  explicit unary_negate(const Predicate& pred) : pred(pred) {}

  template <typename T>
  __attribute__((host)) __attribute__((device))
  bool operator()(const T& x)
  {
    return !bool(pred(x));
  }
};


template<typename Predicate>
struct binary_negate
{
  typedef bool result_type;

  Predicate pred;

  __attribute__((host)) __attribute__((device))
  explicit binary_negate(const Predicate& pred) : pred(pred) {}

  template <typename T1, typename T2>
  __attribute__((host)) __attribute__((device))
  bool operator()(const T1& x, const T2& y)
  {
    return !bool(pred(x,y));
  }
};

template<typename Predicate>
__attribute__((host)) __attribute__((device))
thrust::detail::unary_negate<Predicate> not1(const Predicate &pred)
{
  return thrust::detail::unary_negate<Predicate>(pred);
}

template<typename Predicate>
__attribute__((host)) __attribute__((device))
thrust::detail::binary_negate<Predicate> not2(const Predicate &pred)
{
  return thrust::detail::binary_negate<Predicate>(pred);
}



template<typename Predicate, typename IntegralType>
struct predicate_to_integral
{
  Predicate pred;

  __attribute__((host)) __attribute__((device))
  explicit predicate_to_integral(const Predicate& pred) : pred(pred) {}

  template <typename T>
  __attribute__((host)) __attribute__((device))
  bool operator()(const T& x)
  {
    return pred(x) ? IntegralType(1) : IntegralType(0);
  }
};



template<typename T1>
struct equal_to
{
  typedef bool result_type;

  template <typename T2>
  __attribute__((host)) __attribute__((device))
  bool operator()(const T1& lhs, const T2& rhs) const
  {
    return lhs == rhs;
  }
};


template<typename T2>
struct equal_to_value
{
  T2 rhs;

  __attribute__((host)) __attribute__((device))
  equal_to_value(const T2& rhs) : rhs(rhs) {}

  template <typename T1>
  __attribute__((host)) __attribute__((device))
  bool operator()(const T1& lhs) const
  {
    return lhs == rhs;
  }
};

template<typename Predicate>
struct tuple_binary_predicate
{
  typedef bool result_type;

  __attribute__((host)) __attribute__((device))
  tuple_binary_predicate(const Predicate& p) : pred(p) {}

  template<typename Tuple>
  __attribute__((host)) __attribute__((device))
  bool operator()(const Tuple& t) const
  {
    return pred(thrust::get<0>(t), thrust::get<1>(t));
  }

  mutable Predicate pred;
};

template<typename Predicate>
struct tuple_not_binary_predicate
{
  typedef bool result_type;

  __attribute__((host)) __attribute__((device))
  tuple_not_binary_predicate(const Predicate& p) : pred(p) {}

  template<typename Tuple>
  __attribute__((host)) __attribute__((device))
  bool operator()(const Tuple& t) const
  {
    return !pred(thrust::get<0>(t), thrust::get<1>(t));
  }

  mutable Predicate pred;
};

template<typename Generator>
  struct host_generate_functor
{
  typedef void result_type;

  __attribute__((host)) __attribute__((device))
  host_generate_functor(Generator g)
    : gen(g) {}
# 193 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/internal_functional.h"
  template<typename T>
  __attribute__((host))
  void operator()(const T &x)
  {

    T &lvalue = const_cast<T&>(x);


    lvalue = gen();
  }

  Generator gen;
};

template<typename Generator>
  struct device_generate_functor
{
  typedef void result_type;

  __attribute__((host)) __attribute__((device))
  device_generate_functor(Generator g)
    : gen(g) {}
# 226 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/internal_functional.h"
  template<typename T>
  __attribute__((host)) __attribute__((device))
  void operator()(const T &x)
  {

    T &lvalue = const_cast<T&>(x);


    lvalue = gen();
  }

  Generator gen;
};

template<typename System, typename Generator>
  struct generate_functor
    : thrust::detail::eval_if<
        thrust::detail::is_convertible<System, thrust::host_system_tag>::value,
        thrust::detail::identity_<host_generate_functor<Generator> >,
        thrust::detail::identity_<device_generate_functor<Generator> >
      >
{};


template<typename ResultType, typename BinaryFunction>
  struct zipped_binary_op
{
  typedef ResultType result_type;

  __attribute__((host)) __attribute__((device))
  zipped_binary_op(BinaryFunction binary_op)
    : m_binary_op(binary_op) {}

  template<typename Tuple>
  __attribute__((host)) __attribute__((device))
  inline result_type operator()(Tuple t)
  {
    return m_binary_op(thrust::get<0>(t), thrust::get<1>(t));
  }

  BinaryFunction m_binary_op;
};


template<typename T>
  struct is_non_const_reference
    : thrust::detail::and_<
        thrust::detail::not_<thrust::detail::is_const<T> >,
        thrust::detail::is_reference<T>
      >
{};

template<typename T> struct is_tuple_of_iterator_references : thrust::detail::false_type {};

template<typename T1, typename T2, typename T3,
         typename T4, typename T5, typename T6,
         typename T7, typename T8, typename T9,
         typename T10>
  struct is_tuple_of_iterator_references<
    thrust::detail::tuple_of_iterator_references<
      T1,T2,T3,T4,T5,T6,T7,T8,T9,T10
    >
  >
    : thrust::detail::true_type
{};



template<typename T>
  struct enable_if_non_const_reference_or_tuple_of_iterator_references
    : thrust::detail::enable_if<
        is_non_const_reference<T>::value || is_tuple_of_iterator_references<T>::value
      >
{};


template<typename UnaryFunction>
  struct unary_transform_functor
{
  typedef void result_type;

  UnaryFunction f;

  __attribute__((host)) __attribute__((device))
  unary_transform_functor(UnaryFunction f)
    : f(f)
  {}

  #pragma hd_warning_disable
  template<typename Tuple>
  inline __attribute__((host)) __attribute__((device))
  typename enable_if_non_const_reference_or_tuple_of_iterator_references<
    typename thrust::tuple_element<1,Tuple>::type
  >::type
    operator()(Tuple t)
  {
    thrust::get<1>(t) = f(thrust::get<0>(t));
  }
};


template<typename BinaryFunction>
  struct binary_transform_functor
{
  BinaryFunction f;

  __attribute__((host)) __attribute__((device))
  binary_transform_functor(BinaryFunction f)
    : f(f)
  {}

  #pragma hd_warning_disable
  template<typename Tuple>
  inline __attribute__((host)) __attribute__((device))
  typename enable_if_non_const_reference_or_tuple_of_iterator_references<
    typename thrust::tuple_element<2,Tuple>::type
  >::type
    operator()(Tuple t)
  {
    thrust::get<2>(t) = f(thrust::get<0>(t), thrust::get<1>(t));
  }
};


template<typename UnaryFunction, typename Predicate>
struct unary_transform_if_functor
{
  UnaryFunction unary_op;
  Predicate pred;

  __attribute__((host)) __attribute__((device))
  unary_transform_if_functor(UnaryFunction unary_op, Predicate pred)
    : unary_op(unary_op), pred(pred)
  {}

  #pragma hd_warning_disable
  template<typename Tuple>
  inline __attribute__((host)) __attribute__((device))
  typename enable_if_non_const_reference_or_tuple_of_iterator_references<
    typename thrust::tuple_element<1,Tuple>::type
  >::type
    operator()(Tuple t)
  {
    if(pred(thrust::get<0>(t)))
    {
      thrust::get<1>(t) = unary_op(thrust::get<0>(t));
    }
  }
};


template<typename UnaryFunction, typename Predicate>
struct unary_transform_if_with_stencil_functor
{
  UnaryFunction unary_op;
  Predicate pred;

  __attribute__((host)) __attribute__((device))
  unary_transform_if_with_stencil_functor(UnaryFunction unary_op, Predicate pred)
    : unary_op(unary_op), pred(pred)
  {}

  #pragma hd_warning_disable
  template<typename Tuple>
  inline __attribute__((host)) __attribute__((device))
  typename enable_if_non_const_reference_or_tuple_of_iterator_references<
    typename thrust::tuple_element<2,Tuple>::type
  >::type
    operator()(Tuple t)
  {
    if(pred(thrust::get<1>(t)))
      thrust::get<2>(t) = unary_op(thrust::get<0>(t));
  }
};


template<typename BinaryFunction, typename Predicate>
struct binary_transform_if_functor
{
  BinaryFunction binary_op;
  Predicate pred;

  __attribute__((host)) __attribute__((device))
  binary_transform_if_functor(BinaryFunction binary_op, Predicate pred)
    : binary_op(binary_op), pred(pred) {}

  #pragma hd_warning_disable
  template<typename Tuple>
  inline __attribute__((host)) __attribute__((device))
  typename enable_if_non_const_reference_or_tuple_of_iterator_references<
    typename thrust::tuple_element<3,Tuple>::type
  >::type
    operator()(Tuple t)
  {
    if(pred(thrust::get<2>(t)))
      thrust::get<3>(t) = binary_op(thrust::get<0>(t), thrust::get<1>(t));
  }
};


template<typename T>
  struct host_destroy_functor
{
  __attribute__((host))
  void operator()(T &x) const
  {
    x.~T();
  }
};


template<typename T>
  struct device_destroy_functor
{

  __attribute__((host)) __attribute__((device))
  void operator()(T &x) const
  {
    x.~T();
  }
};


template<typename System, typename T>
  struct destroy_functor
    : thrust::detail::eval_if<
        thrust::detail::is_convertible<System, thrust::host_system_tag>::value,
        thrust::detail::identity_<host_destroy_functor<T> >,
        thrust::detail::identity_<device_destroy_functor<T> >
      >
{};


template <typename T>
struct fill_functor
{
  T exemplar;

  __attribute__((host)) __attribute__((device))
  fill_functor(const T& _exemplar)
    : exemplar(_exemplar) {}

  __attribute__((host)) __attribute__((device))
  T operator()(void) const
  {
    return exemplar;
  }
};


template<typename T>
  struct uninitialized_fill_functor
{
  T exemplar;

  __attribute__((host)) __attribute__((device))
  uninitialized_fill_functor(T x):exemplar(x){}

  __attribute__((host)) __attribute__((device))
  void operator()(T &x)
  {
    ::new(static_cast<void*>(&x)) T(exemplar);
  }
};






template<typename Compare>
  struct compare_first_less_second
{
  compare_first_less_second(Compare c)
    : comp(c) {}

  template<typename T1, typename T2>
  __attribute__((host)) __attribute__((device))
  bool operator()(T1 lhs, T2 rhs)
  {
    return comp(thrust::get<0>(lhs), thrust::get<0>(rhs)) || (!comp(thrust::get<0>(rhs), thrust::get<0>(lhs)) && thrust::get<1>(lhs) < thrust::get<1>(rhs));
  }

  Compare comp;
};


template<typename Compare>
  struct compare_first
{
  Compare comp;

  __attribute__((host)) __attribute__((device))
  compare_first(Compare comp)
    : comp(comp)
  {}

  template<typename Tuple1, typename Tuple2>
  __attribute__((host)) __attribute__((device))
  bool operator()(const Tuple1 &x, const Tuple2 &y)
  {
    return comp(thrust::raw_reference_cast(thrust::get<0>(x)), thrust::raw_reference_cast(thrust::get<0>(y)));
  }
};


}
}
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/transform.inl" 2

namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator transform(thrust::execution_policy<DerivedPolicy> &exec,
                           InputIterator first,
                           InputIterator last,
                           OutputIterator result,
                           UnaryFunction op)
{
  typedef thrust::detail::unary_transform_functor<UnaryFunction> UnaryTransformFunctor;


  typedef thrust::tuple<InputIterator,OutputIterator> IteratorTuple;
  typedef thrust::zip_iterator<IteratorTuple> ZipIterator;

  ZipIterator zipped_result =
    thrust::for_each(exec,
                     thrust::make_zip_iterator(thrust::make_tuple(first,result)),
                     thrust::make_zip_iterator(thrust::make_tuple(last,result)),
                     UnaryTransformFunctor(op));

  return thrust::get<1>(zipped_result.get_iterator_tuple());
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator transform(thrust::execution_policy<DerivedPolicy> &exec,
                           InputIterator1 first1,
                           InputIterator1 last1,
                           InputIterator2 first2,
                           OutputIterator result,
                           BinaryFunction op)
{

  typedef thrust::detail::binary_transform_functor<BinaryFunction> BinaryTransformFunctor;


  typedef thrust::tuple<InputIterator1,InputIterator2,OutputIterator> IteratorTuple;
  typedef thrust::zip_iterator<IteratorTuple> ZipIterator;

  ZipIterator zipped_result =
    thrust::for_each(exec,
                     thrust::make_zip_iterator(thrust::make_tuple(first1,first2,result)),
                     thrust::make_zip_iterator(thrust::make_tuple(last1,first2,result)),
                     BinaryTransformFunctor(op));

  return thrust::get<2>(zipped_result.get_iterator_tuple());
}


template<typename DerivedPolicy,
         typename InputIterator,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(thrust::execution_policy<DerivedPolicy> &exec,
                               InputIterator first,
                               InputIterator last,
                               ForwardIterator result,
                               UnaryFunction unary_op,
                               Predicate pred)
{
  typedef thrust::detail::unary_transform_if_functor<UnaryFunction,Predicate> UnaryTransformIfFunctor;


  typedef thrust::tuple<InputIterator,ForwardIterator> IteratorTuple;
  typedef thrust::zip_iterator<IteratorTuple> ZipIterator;

  ZipIterator zipped_result =
    thrust::for_each(exec,
                     thrust::make_zip_iterator(thrust::make_tuple(first,result)),
                     thrust::make_zip_iterator(thrust::make_tuple(last,result)),
                     UnaryTransformIfFunctor(unary_op,pred));

  return thrust::get<1>(zipped_result.get_iterator_tuple());
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(thrust::execution_policy<DerivedPolicy> &exec,
                               InputIterator1 first,
                               InputIterator1 last,
                               InputIterator2 stencil,
                               ForwardIterator result,
                               UnaryFunction unary_op,
                               Predicate pred)
{
  typedef thrust::detail::unary_transform_if_with_stencil_functor<UnaryFunction,Predicate> UnaryTransformIfFunctor;


  typedef thrust::tuple<InputIterator1,InputIterator2,ForwardIterator> IteratorTuple;
  typedef thrust::zip_iterator<IteratorTuple> ZipIterator;

  ZipIterator zipped_result =
    thrust::for_each(exec,
                     thrust::make_zip_iterator(thrust::make_tuple(first,stencil,result)),
                     thrust::make_zip_iterator(thrust::make_tuple(last,stencil,result)),
                     UnaryTransformIfFunctor(unary_op,pred));

  return thrust::get<2>(zipped_result.get_iterator_tuple());
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename InputIterator3,
         typename ForwardIterator,
         typename BinaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(thrust::execution_policy<DerivedPolicy> &exec,
                               InputIterator1 first1,
                               InputIterator1 last1,
                               InputIterator2 first2,
                               InputIterator3 stencil,
                               ForwardIterator result,
                               BinaryFunction binary_op,
                               Predicate pred)
{
  typedef thrust::detail::binary_transform_if_functor<BinaryFunction,Predicate> BinaryTransformIfFunctor;


  typedef thrust::tuple<InputIterator1,InputIterator2,InputIterator3,ForwardIterator> IteratorTuple;
  typedef thrust::zip_iterator<IteratorTuple> ZipIterator;

  ZipIterator zipped_result =
    thrust::for_each(exec,
                     thrust::make_zip_iterator(thrust::make_tuple(first1,first2,stencil,result)),
                     thrust::make_zip_iterator(thrust::make_tuple(last1,first2,stencil,result)),
                     BinaryTransformIfFunctor(binary_op,pred));

  return thrust::get<3>(zipped_result.get_iterator_tuple());
}


}
}
}
}
# 106 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/transform.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/transform.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/transform.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/transform.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/transform.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/transform.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/transform.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/transform.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/transform.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/transform.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/transform.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/transform.h"
       
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/transform.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/transform.inl" 2

namespace thrust
{


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename UnaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator transform(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                           InputIterator first, InputIterator last,
                           OutputIterator result,
                           UnaryFunction op)
{
  using thrust::system::detail::generic::transform;
  return transform(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, op);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator transform(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                           InputIterator1 first1, InputIterator1 last1,
                           InputIterator2 first2,
                           OutputIterator result,
                           BinaryFunction op)
{
  using thrust::system::detail::generic::transform;
  return transform(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result, op);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                               InputIterator first, InputIterator last,
                               ForwardIterator result,
                               UnaryFunction op,
                               Predicate pred)
{
  using thrust::system::detail::generic::transform_if;
  return transform_if(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, op, pred);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                               InputIterator1 first, InputIterator1 last,
                               InputIterator2 stencil,
                               ForwardIterator result,
                               UnaryFunction op,
                               Predicate pred)
{
  using thrust::system::detail::generic::transform_if;
  return transform_if(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, stencil, result, op, pred);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename InputIterator3,
         typename ForwardIterator,
         typename BinaryFunction,
         typename Predicate>
__attribute__((host)) __attribute__((device))
  ForwardIterator transform_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                               InputIterator1 first1, InputIterator1 last1,
                               InputIterator2 first2,
                               InputIterator3 stencil,
                               ForwardIterator result,
                               BinaryFunction binary_op,
                               Predicate pred)
{
  using thrust::system::detail::generic::transform_if;
  return transform_if(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, stencil, result, binary_op, pred);
}


template<typename InputIterator,
         typename OutputIterator,
         typename UnaryFunction>
  OutputIterator transform(InputIterator first,
                           InputIterator last,
                           OutputIterator result,
                           UnaryFunction op)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::transform(select_system(system1,system2), first, last, result, op);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryFunction>
  OutputIterator transform(InputIterator1 first1,
                           InputIterator1 last1,
                           InputIterator2 first2,
                           OutputIterator result,
                           BinaryFunction op)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::transform(select_system(system1,system2,system3), first1, last1, first2, result, op);
}


template<typename InputIterator,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
  ForwardIterator transform_if(InputIterator first,
                               InputIterator last,
                               ForwardIterator result,
                               UnaryFunction unary_op,
                               Predicate pred)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<ForwardIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::transform_if(select_system(system1,system2), first, last, result, unary_op, pred);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename ForwardIterator,
         typename UnaryFunction,
         typename Predicate>
  ForwardIterator transform_if(InputIterator1 first,
                               InputIterator1 last,
                               InputIterator2 stencil,
                               ForwardIterator result,
                               UnaryFunction unary_op,
                               Predicate pred)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<ForwardIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::transform_if(select_system(system1,system2,system3), first, last, stencil, result, unary_op, pred);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename InputIterator3,
         typename ForwardIterator,
         typename BinaryFunction,
         typename Predicate>
  ForwardIterator transform_if(InputIterator1 first1,
                               InputIterator1 last1,
                               InputIterator2 first2,
                               InputIterator3 stencil,
                               ForwardIterator result,
                               BinaryFunction binary_op,
                               Predicate pred)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<InputIterator3>::type System3;
  typedef typename thrust::iterator_system<ForwardIterator>::type System4;

  System1 system1;
  System2 system2;
  System3 system3;
  System4 system4;

  return thrust::transform_if(select_system(system1,system2,system3,system4), first1, last1, first2, stencil, result, binary_op, pred);
}


}
# 725 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/transform.h" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan_by_key.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
       




namespace thrust
{
# 86 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void replace(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
               ForwardIterator first, ForwardIterator last,
               const T &old_value,
               const T &new_value);
# 136 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename ForwardIterator, typename T>
  void replace(ForwardIterator first, ForwardIterator last, const T &old_value,
               const T &new_value);
# 200 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename DerivedPolicy, typename ForwardIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  void replace_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                  ForwardIterator first, ForwardIterator last,
                  Predicate pred,
                  const T &new_value);
# 261 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename ForwardIterator, typename Predicate, typename T>
  void replace_if(ForwardIterator first, ForwardIterator last,
                  Predicate pred,
                  const T &new_value);
# 334 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename DerivedPolicy, typename ForwardIterator, typename InputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  void replace_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                  ForwardIterator first, ForwardIterator last,
                  InputIterator stencil,
                  Predicate pred,
                  const T &new_value);
# 404 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename ForwardIterator, typename InputIterator, typename Predicate, typename T>
  void replace_if(ForwardIterator first, ForwardIterator last,
                  InputIterator stencil,
                  Predicate pred,
                  const T &new_value);
# 463 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                              InputIterator first, InputIterator last,
                              OutputIterator result,
                              const T &old_value,
                              const T &new_value);
# 519 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename InputIterator, typename OutputIterator, typename T>
  OutputIterator replace_copy(InputIterator first, InputIterator last,
                              OutputIterator result, const T &old_value,
                              const T &new_value);
# 588 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                 InputIterator first, InputIterator last,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value);
# 655 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename InputIterator, typename OutputIterator, typename Predicate, typename T>
  OutputIterator replace_copy_if(InputIterator first, InputIterator last,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value);
# 732 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                 InputIterator1 first, InputIterator1 last,
                                 InputIterator2 stencil,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value);
# 807 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h"
template<typename InputIterator1, typename InputIterator2, typename OutputIterator, typename Predicate, typename T>
  OutputIterator replace_copy_if(InputIterator1 first, InputIterator1 last,
                                 InputIterator2 stencil,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value);







}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/replace.inl" 1
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/replace.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/replace.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/replace.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy_if(thrust::execution_policy<DerivedPolicy> &exec,
                                 InputIterator first,
                                 InputIterator last,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value);


template<typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy_if(thrust::execution_policy<DerivedPolicy> &exec,
                                 InputIterator1 first,
                                 InputIterator1 last,
                                 InputIterator2 stencil,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value);


template<typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy(thrust::execution_policy<DerivedPolicy> &exec,
                              InputIterator first,
                              InputIterator last,
                              OutputIterator result,
                              const T &old_value,
                              const T &new_value);


template<typename DerivedPolicy, typename ForwardIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  void replace_if(thrust::execution_policy<DerivedPolicy> &exec,
                  ForwardIterator first,
                  ForwardIterator last,
                  Predicate pred,
                  const T &new_value);


template<typename DerivedPolicy, typename ForwardIterator, typename InputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  void replace_if(thrust::execution_policy<DerivedPolicy> &exec,
                  ForwardIterator first,
                  ForwardIterator last,
                  InputIterator stencil,
                  Predicate pred,
                  const T &new_value);


template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void replace(thrust::execution_policy<DerivedPolicy> &exec,
               ForwardIterator first,
               ForwardIterator last,
               const T &old_value,
               const T &new_value);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/replace.inl" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/replace.inl"
namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{
namespace detail
{




template<typename Predicate, typename NewType, typename OutputType>
  struct new_value_if
{
  __attribute__((host)) __attribute__((device))
  new_value_if(Predicate p, NewType nv):pred(p),new_value(nv){}

  template<typename InputType>
  __attribute__((host)) __attribute__((device))
  OutputType operator()(const InputType &x) const
  {
    return pred(x) ? new_value : x;
  }



  template<typename InputType, typename PredicateArgumentType>
  __attribute__((host)) __attribute__((device))
  OutputType operator()(const InputType &x, const PredicateArgumentType &y)
  {
    return pred(y) ? new_value : x;
  }

  Predicate pred;
  NewType new_value;
};



template<typename T>
  struct constant_unary
{
  __attribute__((host)) __attribute__((device))
  constant_unary(T _c):c(_c){}

  template<typename U>
  __attribute__((host)) __attribute__((device))
  T operator()(U &x)
  {
    return c;
  }

  T c;
};


}


template<typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy_if(thrust::execution_policy<DerivedPolicy> &exec,
                                 InputIterator first,
                                 InputIterator last,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value)
{
  typedef typename thrust::iterator_traits<OutputIterator>::value_type OutputType;

  detail::new_value_if<Predicate,T,OutputType> op(pred,new_value);
  return thrust::transform(exec, first, last, result, op);
}


template<typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy_if(thrust::execution_policy<DerivedPolicy> &exec,
                                 InputIterator1 first,
                                 InputIterator1 last,
                                 InputIterator2 stencil,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value)
{
  typedef typename thrust::iterator_traits<OutputIterator>::value_type OutputType;

  detail::new_value_if<Predicate,T,OutputType> op(pred,new_value);
  return thrust::transform(exec, first, last, stencil, result, op);
}


template<typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy(thrust::execution_policy<DerivedPolicy> &exec,
                              InputIterator first,
                              InputIterator last,
                              OutputIterator result,
                              const T &old_value,
                              const T &new_value)
{
  thrust::detail::equal_to_value<T> pred(old_value);
  return thrust::replace_copy_if(exec, first, last, result, pred, new_value);
}


template<typename DerivedPolicy, typename ForwardIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  void replace_if(thrust::execution_policy<DerivedPolicy> &exec,
                  ForwardIterator first,
                  ForwardIterator last,
                  Predicate pred,
                  const T &new_value)
{
  detail::constant_unary<T> f(new_value);
  thrust::transform_if(exec, first, last, first, first, f, pred);
}


template<typename DerivedPolicy, typename ForwardIterator, typename InputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  void replace_if(thrust::execution_policy<DerivedPolicy> &exec,
                  ForwardIterator first,
                  ForwardIterator last,
                  InputIterator stencil,
                  Predicate pred,
                  const T &new_value)
{
  detail::constant_unary<T> f(new_value);
  thrust::transform_if(exec, first, last, stencil, first, f, pred);
}


template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void replace(thrust::execution_policy<DerivedPolicy> &exec,
               ForwardIterator first,
               ForwardIterator last,
               const T &old_value,
               const T &new_value)
{
  thrust::detail::equal_to_value<T> pred(old_value);
  return thrust::replace_if(exec, first, last, pred, new_value);
}


}
}
}
}
# 98 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/replace.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/replace.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/replace.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/replace.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/replace.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/replace.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/replace.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/replace.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/replace.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/replace.h" 2
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/replace.inl" 2

namespace thrust
{


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void replace(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
               ForwardIterator first, ForwardIterator last,
               const T &old_value,
               const T &new_value)
{
  using thrust::system::detail::generic::replace;
  return replace(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, old_value, new_value);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename ForwardIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  void replace_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                  ForwardIterator first, ForwardIterator last,
                  Predicate pred,
                  const T &new_value)
{
  using thrust::system::detail::generic::replace_if;
  return replace_if(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, pred, new_value);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename ForwardIterator, typename InputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  void replace_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                  ForwardIterator first, ForwardIterator last,
                  InputIterator stencil,
                  Predicate pred,
                  const T &new_value)
{
  using thrust::system::detail::generic::replace_if;
  return replace_if(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, stencil, pred, new_value);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                              InputIterator first, InputIterator last,
                              OutputIterator result,
                              const T &old_value,
                              const T &new_value)
{
  using thrust::system::detail::generic::replace_copy;
  return replace_copy(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, old_value, new_value);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename InputIterator, typename OutputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                 InputIterator first, InputIterator last,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value)
{
  using thrust::system::detail::generic::replace_copy_if;
  return replace_copy_if(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, pred, new_value);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename InputIterator1, typename InputIterator2, typename OutputIterator, typename Predicate, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator replace_copy_if(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                 InputIterator1 first, InputIterator1 last,
                                 InputIterator2 stencil,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value)
{
  using thrust::system::detail::generic::replace_copy_if;
  return replace_copy_if(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, stencil, result, pred, new_value);
}


template<typename InputIterator, typename OutputIterator, typename Predicate, typename T>
  OutputIterator replace_copy_if(InputIterator first, InputIterator last,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::replace_copy_if(select_system(system1,system2), first, last, result, pred, new_value);
}


template<typename InputIterator1, typename InputIterator2, typename OutputIterator, typename Predicate, typename T>
  OutputIterator replace_copy_if(InputIterator1 first, InputIterator1 last,
                                 InputIterator2 stencil,
                                 OutputIterator result,
                                 Predicate pred,
                                 const T &new_value)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::replace_copy_if(select_system(system1,system2,system3), first, last, stencil, result, pred, new_value);
}


template<typename InputIterator, typename OutputIterator, typename T>
  OutputIterator replace_copy(InputIterator first, InputIterator last,
                              OutputIterator result,
                              const T &old_value,
                              const T &new_value)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::replace_copy(select_system(system1,system2), first, last, result, old_value, new_value);
}


template<typename ForwardIterator, typename Predicate, typename T>
  void replace_if(ForwardIterator first, ForwardIterator last,
                  Predicate pred,
                  const T &new_value)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<ForwardIterator>::type System;

  System system;

  return thrust::replace_if(select_system(system), first, last, pred, new_value);
}


template<typename ForwardIterator, typename InputIterator, typename Predicate, typename T>
  void replace_if(ForwardIterator first, ForwardIterator last,
                  InputIterator stencil,
                  Predicate pred,
                  const T &new_value)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<ForwardIterator>::type System1;
  typedef typename thrust::iterator_system<InputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::replace_if(select_system(system1,system2), first, last, stencil, pred, new_value);
}


template<typename ForwardIterator, typename T>
  void replace(ForwardIterator first, ForwardIterator last,
               const T &old_value,
               const T &new_value)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<ForwardIterator>::type System;

  System system;

  return thrust::replace(select_system(system), first, last, old_value, new_value);
}


}
# 823 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/replace.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan_by_key.inl" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/tagged_iterator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/tagged_iterator.h"
       






namespace thrust
{
namespace detail
{

template <typename,typename> class tagged_iterator;

template<typename Iterator, typename Tag>
  struct tagged_iterator_base
{
  typedef thrust::iterator_adaptor<
    tagged_iterator<Iterator,Tag>,
    Iterator,
    typename thrust::iterator_value<Iterator>::type,
    Tag,
    typename thrust::iterator_traversal<Iterator>::type,
    typename thrust::iterator_reference<Iterator>::type,
    typename thrust::iterator_difference<Iterator>::type
  > type;
};

template<typename Iterator, typename Tag>
  class tagged_iterator
    : public tagged_iterator_base<Iterator,Tag>::type
{
  private:
    typedef typename tagged_iterator_base<Iterator,Tag>::type super_t;

  public:
    __attribute__((host)) __attribute__((device))
    tagged_iterator(void) {}

    __attribute__((host)) __attribute__((device))
    explicit tagged_iterator(Iterator x)
      : super_t(x) {}
};



template<typename> struct is_trivial_iterator;


template<typename BaseIterator, typename Tag>
  struct is_trivial_iterator<tagged_iterator<BaseIterator,Tag> >
    : is_trivial_iterator<BaseIterator>
{};


}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.h"
       

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/normal_iterator.h" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/iterator/detail/normal_iterator.h"
       





namespace thrust
{
namespace detail
{


template<typename Pointer>
  class normal_iterator
    : public iterator_adaptor<
        normal_iterator<Pointer>,
        Pointer
      >
{
  typedef iterator_adaptor<normal_iterator<Pointer>, Pointer> super_t;

  public:
    __attribute__((host)) __attribute__((device))
    normal_iterator() {}

    __attribute__((host)) __attribute__((device))
    normal_iterator(Pointer p)
      : super_t(p) {}

    template<typename OtherPointer>
    __attribute__((host)) __attribute__((device))
    normal_iterator(const normal_iterator<OtherPointer> &other,
                    typename thrust::detail::enable_if_convertible<
                      OtherPointer,
                      Pointer
                    >::type * = 0)
      : super_t(other.base()) {}

};


template<typename Pointer>
  inline __attribute__((host)) __attribute__((device)) normal_iterator<Pointer> make_normal_iterator(Pointer ptr)
{
  return normal_iterator<Pointer>(ptr);
}


template<typename T> struct is_trivial_iterator< normal_iterator<T> > : public true_type {};


}
}
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.h" 2



namespace thrust
{

namespace detail
{


template<typename T, typename Alloc>
  class contiguous_storage
{
  private:
    typedef thrust::detail::allocator_traits<Alloc> alloc_traits;

  public:
    typedef Alloc allocator_type;
    typedef T value_type;
    typedef typename alloc_traits::pointer pointer;
    typedef typename alloc_traits::const_pointer const_pointer;
    typedef typename alloc_traits::size_type size_type;
    typedef typename alloc_traits::difference_type difference_type;






    typedef typename Alloc::reference reference;
    typedef typename Alloc::const_reference const_reference;

    typedef thrust::detail::normal_iterator<pointer> iterator;
    typedef thrust::detail::normal_iterator<const_pointer> const_iterator;

    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    explicit contiguous_storage(const allocator_type &alloc = allocator_type());

    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    explicit contiguous_storage(size_type n, const allocator_type &alloc = allocator_type());

    #pragma hd_warning_disable
    __attribute__((host)) __attribute__((device))
    ~contiguous_storage(void);

    __attribute__((host)) __attribute__((device))
    size_type size(void) const;

    __attribute__((host)) __attribute__((device))
    size_type max_size(void) const;

    __attribute__((host)) __attribute__((device))
    iterator begin(void);

    __attribute__((host)) __attribute__((device))
    const_iterator begin(void) const;

    __attribute__((host)) __attribute__((device))
    iterator end(void);

    __attribute__((host)) __attribute__((device))
    const_iterator end(void) const;

    __attribute__((host)) __attribute__((device))
    reference operator[](size_type n);

    __attribute__((host)) __attribute__((device))
    const_reference operator[](size_type n) const;

    __attribute__((host)) __attribute__((device))
    allocator_type get_allocator(void) const;


    __attribute__((host)) __attribute__((device))
    void allocate(size_type n);

    __attribute__((host)) __attribute__((device))
    void deallocate(void);

    __attribute__((host)) __attribute__((device))
    void swap(contiguous_storage &x);

    __attribute__((host)) __attribute__((device))
    void default_construct_n(iterator first, size_type n);

    __attribute__((host)) __attribute__((device))
    void uninitialized_fill_n(iterator first, size_type n, const value_type &value);

    template<typename InputIterator>
    __attribute__((host)) __attribute__((device))
    iterator uninitialized_copy(InputIterator first, InputIterator last, iterator result);

    template<typename System, typename InputIterator>
    __attribute__((host)) __attribute__((device))
    iterator uninitialized_copy(thrust::execution_policy<System> &from_system,
                                InputIterator first,
                                InputIterator last,
                                iterator result);

    template<typename InputIterator, typename Size>
    __attribute__((host)) __attribute__((device))
    iterator uninitialized_copy_n(InputIterator first, Size n, iterator result);

    template<typename System, typename InputIterator, typename Size>
    __attribute__((host)) __attribute__((device))
    iterator uninitialized_copy_n(thrust::execution_policy<System> &from_system,
                                  InputIterator first,
                                  Size n,
                                  iterator result);

    __attribute__((host)) __attribute__((device))
    void destroy(iterator first, iterator last);

  private:

    allocator_type m_allocator;

    iterator m_begin;

    size_type m_size;


    contiguous_storage &operator=(const contiguous_storage &x);
};

}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
void swap(detail::contiguous_storage<T,Alloc> &lhs, detail::contiguous_storage<T,Alloc> &rhs);

}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.inl" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.inl"
       




# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/copy_construct_range.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/copy_construct_range.h"
       




namespace thrust
{
namespace detail
{

template<typename System, typename Allocator, typename InputIterator, typename Pointer>
__attribute__((host)) __attribute__((device))
  Pointer copy_construct_range(thrust::execution_policy<System> &from_system,
                               Allocator &a,
                               InputIterator first,
                               InputIterator last,
                               Pointer result);

template<typename System, typename Allocator, typename InputIterator, typename Size, typename Pointer>
__attribute__((host)) __attribute__((device))
  Pointer copy_construct_range_n(thrust::execution_policy<System> &from_system,
                                 Allocator &a,
                                 InputIterator first,
                                 Size n,
                                 Pointer result);

}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/copy_construct_range.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/copy_construct_range.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/copy.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/copy.h"
       




namespace thrust
{

template<typename System,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy(const thrust::detail::execution_policy_base<System> &system,
                      InputIterator first,
                      InputIterator last,
                      OutputIterator result);

template<typename System,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy_n(const thrust::detail::execution_policy_base<System> &system,
                        InputIterator first,
                        Size n,
                        OutputIterator result);

template<typename InputIterator,
         typename OutputIterator>
  OutputIterator copy(InputIterator first,
                      InputIterator last,
                      OutputIterator result);

template<typename InputIterator,
         typename Size,
         typename OutputIterator>
  OutputIterator copy_n(InputIterator first,
                        Size n,
                        OutputIterator result);


namespace detail
{


template<typename FromSystem,
         typename ToSystem,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator two_system_copy(const thrust::execution_policy<FromSystem> &from_system,
                                 const thrust::execution_policy<ToSystem> &two_system,
                                 InputIterator first,
                                 InputIterator last,
                                 OutputIterator result);


template<typename FromSystem,
         typename ToSystem,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator two_system_copy_n(const thrust::execution_policy<FromSystem> &from_system,
                                   const thrust::execution_policy<ToSystem> &two_system,
                                   InputIterator first,
                                   Size n,
                                   OutputIterator result);


}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/copy.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/copy.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/copy.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/copy.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy(thrust::execution_policy<DerivedPolicy> &exec,
                      InputIterator first,
                      InputIterator last,
                      OutputIterator result);


template<typename DerivedPolicy,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy_n(thrust::execution_policy<DerivedPolicy> &exec,
                        InputIterator first,
                        Size n,
                        OutputIterator result);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/copy.inl" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/copy.inl"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/copy.inl"
namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy(thrust::execution_policy<DerivedPolicy> &exec,
                      InputIterator first,
                      InputIterator last,
                      OutputIterator result)
{
  typedef typename thrust::iterator_value<InputIterator>::type T;
  return thrust::transform(exec, first, last, result, thrust::identity<T>());
}


template<typename DerivedPolicy,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy_n(thrust::execution_policy<DerivedPolicy> &exec,
                        InputIterator first,
                        Size n,
                        OutputIterator result)
{
  typedef typename thrust::iterator_value<InputIterator>::type value_type;
  typedef thrust::identity<value_type> xfrm_type;

  typedef thrust::detail::unary_transform_functor<xfrm_type> functor_type;

  typedef thrust::tuple<InputIterator,OutputIterator> iterator_tuple;
  typedef thrust::zip_iterator<iterator_tuple> zip_iter;

  zip_iter zipped = thrust::make_zip_iterator(thrust::make_tuple(first,result));

  return thrust::get<1>(thrust::for_each_n(exec, zipped, n, functor_type(xfrm_type())).get_iterator_tuple());
}


}
}
}
}
# 59 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/copy.h" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/copy.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/copy.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/copy.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/copy.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/copy.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy(sequential::execution_policy<DerivedPolicy> &exec,
                      InputIterator first,
                      InputIterator last,
                      OutputIterator result);


template<typename DerivedPolicy,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy_n(sequential::execution_policy<DerivedPolicy> &exec,
                        InputIterator first,
                        Size n,
                        OutputIterator result);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/copy.inl" 1
# 19 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/copy.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/dispatch/is_trivial_copy.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/dispatch/is_trivial_copy.h"
       





namespace thrust
{

namespace detail
{

namespace dispatch
{





template<typename FromIterator, typename ToIterator>
  struct is_trivial_copy :
    integral_constant<
      bool,
      is_same<
        typename thrust::iterator_value<FromIterator>::type,
        typename thrust::iterator_value<ToIterator>::type
      >::value
      && is_trivial_iterator<FromIterator>::value
      && is_trivial_iterator<ToIterator>::value
      && has_trivial_assign<typename thrust::iterator_value<ToIterator>::type>::value
    > {};

}

}

}
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/copy.inl" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/general_copy.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/general_copy.h"
       





namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{
namespace general_copy_detail
{


template<typename T1, typename T2>
struct lazy_is_assignable
  : thrust::detail::is_assignable<
      typename T1::type,
      typename T2::type
    >
{};




template<typename InputIterator, typename OutputIterator>
struct reference_is_assignable
  : thrust::detail::eval_if<
      thrust::detail::is_same<
        typename thrust::iterator_reference<OutputIterator>::type, void
      >::value,
      thrust::detail::true_type,
      lazy_is_assignable<
        thrust::iterator_reference<OutputIterator>,
        thrust::iterator_reference<InputIterator>
      >
    >::type
{};





 #pragma hd_warning_disable
template<typename OutputIterator, typename InputIterator>
inline __attribute__((host)) __attribute__((device))
typename thrust::detail::enable_if<
  reference_is_assignable<InputIterator,OutputIterator>::value
>::type
iter_assign(OutputIterator dst, InputIterator src)
{
  *dst = *src;
}


 #pragma hd_warning_disable
template<typename OutputIterator, typename InputIterator>
inline __attribute__((host)) __attribute__((device))
typename thrust::detail::disable_if<
  reference_is_assignable<InputIterator,OutputIterator>::value
>::type
iter_assign(OutputIterator dst, InputIterator src)
{
  typedef typename thrust::iterator_value<InputIterator>::type value_type;


  *dst = static_cast<value_type>(*src);
}


}


 #pragma hd_warning_disable
template<typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator general_copy(InputIterator first,
                              InputIterator last,
                              OutputIterator result)
{
  for(; first != last; ++first, ++result)
  {




    general_copy_detail::iter_assign(result, first);

  }

  return result;
}


 #pragma hd_warning_disable
template<typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator general_copy_n(InputIterator first,
                                Size n,
                                OutputIterator result)
{
  for(; n > Size(0); ++first, ++result, --n)
  {




    general_copy_detail::iter_assign(result, first);

  }

  return result;
}


}
}
}
}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/copy.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/trivial_copy.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/trivial_copy.h"
       


# 1 "/usr/include/c++/4.8/cstring" 1 3
# 39 "/usr/include/c++/4.8/cstring" 3
       
# 40 "/usr/include/c++/4.8/cstring" 3
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/trivial_copy.h" 2


namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{


template<typename T>
__attribute__((host)) __attribute__((device))
  T *trivial_copy_n(const T *first,
                    std::ptrdiff_t n,
                    T *result)
{




  return thrust::system::detail::sequential::general_copy_n(first, n, result);

}


}
}
}
}
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/copy.inl" 2



namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{
namespace copy_detail
{



template<typename Pointer>
__attribute__((host)) __attribute__((device))
  typename thrust::detail::pointer_traits<Pointer>::raw_pointer
    get(Pointer ptr)
{
  return thrust::detail::pointer_traits<Pointer>::get(ptr);
}


 #pragma hd_warning_disable
template<typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy(InputIterator first,
                      InputIterator last,
                      OutputIterator result,
                      thrust::detail::true_type)
{
  typedef typename thrust::iterator_difference<InputIterator>::type Size;

  const Size n = last - first;
  thrust::system::detail::sequential::trivial_copy_n(get(&*first), n, get(&*result));
  return result + n;
}


 #pragma hd_warning_disable
template<typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy(InputIterator first,
                      InputIterator last,
                      OutputIterator result,
                      thrust::detail::false_type)
{
  return thrust::system::detail::sequential::general_copy(first,last,result);
}


 #pragma hd_warning_disable
template<typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy_n(InputIterator first,
                        Size n,
                        OutputIterator result,
                        thrust::detail::true_type)
{
  thrust::system::detail::sequential::trivial_copy_n(get(&*first), n, get(&*result));
  return result + n;
}


template<typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy_n(InputIterator first,
                        Size n,
                        OutputIterator result,
                        thrust::detail::false_type)
{
  return thrust::system::detail::sequential::general_copy_n(first,n,result);
}


}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy(sequential::execution_policy<DerivedPolicy> &,
                      InputIterator first,
                      InputIterator last,
                      OutputIterator result)
{
  return thrust::system::detail::sequential::copy_detail::copy(first, last, result,
    typename thrust::detail::dispatch::is_trivial_copy<InputIterator,OutputIterator>::type());
}


template<typename DerivedPolicy,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy_n(sequential::execution_policy<DerivedPolicy> &,
                        InputIterator first,
                        Size n,
                        OutputIterator result)
{
  return thrust::system::detail::sequential::copy_detail::copy_n(first, n, result,
    typename thrust::detail::dispatch::is_trivial_copy<InputIterator,OutputIterator>::type());
}


}
}
}
}
# 63 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/copy.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/copy.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/copy.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/copy.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/copy.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy.h"
       




namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
OutputIterator copy(execution_policy<DerivedPolicy> &exec,
                    InputIterator first,
                    InputIterator last,
                    OutputIterator result);


template<typename System1,
         typename System2,
         typename InputIterator,
         typename OutputIterator>
OutputIterator copy(cross_system<System1,System2> exec,
                    InputIterator first,
                    InputIterator last,
                    OutputIterator result);


template<typename DerivedPolicy,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
OutputIterator copy_n(execution_policy<DerivedPolicy> &exec,
                      InputIterator first,
                      Size n,
                      OutputIterator result);


template<typename System1,
         typename System2,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
OutputIterator copy_n(cross_system<System1,System2> exec,
                      InputIterator first,
                      Size n,
                      OutputIterator result);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy.inl" 1
# 19 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_device_to_device.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_device_to_device.h"
       




namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
OutputIterator copy_device_to_device(execution_policy<DerivedPolicy> &exec,
                                     InputIterator begin,
                                     InputIterator end,
                                     OutputIterator result);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_device_to_device.inl" 1
# 19 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_device_to_device.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_cross_system.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_cross_system.h"
       




namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename System1,
         typename System2,
         typename InputIterator,
         typename OutputIterator>
  OutputIterator copy_cross_system(cross_system<System1,System2> systems,
                                   InputIterator begin,
                                   InputIterator end,
                                   OutputIterator result);


template<typename System1,
         typename System2,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
  OutputIterator copy_cross_system_n(cross_system<System1,System2> systems,
                                     InputIterator begin,
                                     Size n,
                                     OutputIterator result);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_cross_system.inl" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_cross_system.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.h" 1
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.h"
namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename DerivedPolicy,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__attribute__((host)) __attribute__((device))
void trivial_copy_n(execution_policy<DerivedPolicy> &exec,
                    RandomAccessIterator1 first,
                    Size n,
                    RandomAccessIterator2 result);


template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
void trivial_copy_n(cross_system<System1,System2> &exec,
                    RandomAccessIterator1 first,
                    Size n,
                    RandomAccessIterator2 result);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.inl" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.inl"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.h" 1
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.h"
namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename DerivedPolicy,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__attribute__((host)) __attribute__((device))
void trivial_copy_n(execution_policy<DerivedPolicy> &exec,
                    RandomAccessIterator1 first,
                    Size n,
                    RandomAccessIterator2 result);


template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
void trivial_copy_n(cross_system<System1,System2> &exec,
                    RandomAccessIterator1 first,
                    Size n,
                    RandomAccessIterator2 result);


}
}
}
}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.inl" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/throw_on_error.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/throw_on_error.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/terminate.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/terminate.h"
       



namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


inline __attribute__((device))
void terminate()
{

  asm("trap;");

}


}
}
}
}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/throw_on_error.h" 2

# 1 "/usr/include/c++/4.8/cstdio" 1 3
# 39 "/usr/include/c++/4.8/cstdio" 3
       
# 40 "/usr/include/c++/4.8/cstdio" 3
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/throw_on_error.h" 2


namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


inline __attribute__((host)) __attribute__((device))
void throw_on_error(cudaError_t error, const char *message)
{
  if(error)
  {






    printf("Error after %s\n", message);

    thrust::system::cuda::detail::terminate();

  }
}


}
}
}
}
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.inl" 2






namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{
namespace trivial_copy_detail
{

inline void checked_cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)
{
  cudaError_t error = cudaMemcpyAsync(dst,src,count,kind,stream);
  if(error)
  {
    throw thrust::system_error(error, thrust::cuda_category());
  }
}


template<typename System1,
         typename System2>
  cudaMemcpyKind cuda_memcpy_kind(const thrust::cuda::execution_policy<System1> &,
                                  const thrust::cpp::execution_policy<System2> &)
{
  return cudaMemcpyDeviceToHost;
}


template<typename System1,
         typename System2>
  cudaMemcpyKind cuda_memcpy_kind(const thrust::cpp::execution_policy<System1> &,
                                  const thrust::cuda::execution_policy<System2> &)
{
  return cudaMemcpyHostToDevice;
}


}


template<typename DerivedPolicy,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__attribute__((host)) __attribute__((device))
void trivial_copy_n(execution_policy<DerivedPolicy> &exec,
                    RandomAccessIterator1 first,
                    Size n,
                    RandomAccessIterator2 result)
{
  typedef typename thrust::iterator_value<RandomAccessIterator1>::type T;







  thrust::transform(exec, first, first + n, result, thrust::identity<T>());

}


template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
void trivial_copy_n(cross_system<System1,System2> &systems,
                    RandomAccessIterator1 first,
                    Size n,
                    RandomAccessIterator2 result)
{
  typedef typename thrust::iterator_value<RandomAccessIterator1>::type T;

  void *dst = thrust::raw_pointer_cast(&*result);
  const void *src = thrust::raw_pointer_cast(&*first);

  cudaMemcpyKind kind = trivial_copy_detail::cuda_memcpy_kind(thrust::detail::derived_cast(systems.system1), thrust::detail::derived_cast(systems.system2));



  trivial_copy_detail::checked_cudaMemcpyAsync(dst, src, n * sizeof(T), kind, 0);
}


}
}
}
}
# 58 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.h" 2
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_cross_system.inl" 2

namespace thrust
{
namespace detail
{


template<typename,typename> class temporary_array;

}

namespace system
{
namespace cuda
{
namespace detail
{



template<typename System1,
         typename System2,
         typename InputIterator,
         typename RandomAccessIterator>
  RandomAccessIterator copy_cross_system(cross_system<System1,System2> systems,
                                         InputIterator begin,
                                         InputIterator end,
                                         RandomAccessIterator result,
                                         thrust::incrementable_traversal_tag,
                                         thrust::random_access_traversal_tag)
{




  typedef typename thrust::iterator_value<InputIterator>::type InputType;


  thrust::detail::temporary_array<InputType, System1> temp(systems.system1,begin,end);
  return thrust::copy(systems, temp.begin(), temp.end(), result);
}

template<typename System1,
         typename System2,
         typename InputIterator,
         typename Size,
         typename RandomAccessIterator>
  RandomAccessIterator copy_cross_system_n(cross_system<System1,System2> systems,
                                           InputIterator first,
                                           Size n,
                                           RandomAccessIterator result,
                                           thrust::incrementable_traversal_tag,
                                           thrust::random_access_traversal_tag)
{
  typedef typename thrust::iterator_value<InputIterator>::type InputType;


  thrust::detail::temporary_array<InputType, System1> temp(systems.system1, first, n);


  return copy_cross_system(systems, temp.begin(), temp.end(), result);
}



template<typename System1,
         typename System2,
         typename RandomAccessIterator,
         typename OutputIterator>
  OutputIterator copy_cross_system(cross_system<System1,System2> systems,
                                   RandomAccessIterator begin,
                                   RandomAccessIterator end,
                                   OutputIterator result,
                                   thrust::random_access_traversal_tag,
                                   thrust::incrementable_traversal_tag)
{
  typedef typename thrust::iterator_value<RandomAccessIterator>::type InputType;


  thrust::detail::temporary_array<InputType,System2> temp(systems.system2, systems.system1, begin, end);

  return thrust::copy(systems.system2, temp.begin(), temp.end(), result);
}

template<typename System1,
         typename System2,
         typename RandomAccessIterator,
         typename Size,
         typename OutputIterator>
  OutputIterator copy_cross_system_n(cross_system<System1,System2> systems,
                                     RandomAccessIterator first,
                                     Size n,
                                     OutputIterator result,
                                     thrust::random_access_traversal_tag,
                                     thrust::incrementable_traversal_tag)
{
  typedef typename thrust::iterator_value<RandomAccessIterator>::type InputType;


  thrust::detail::temporary_array<InputType,System2> temp(systems.system2, systems.system1, first, n);


  return thrust::copy(systems.system2, temp.begin(), temp.end(), result);
}



template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2>
  RandomAccessIterator2 copy_cross_system(cross_system<System1,System2> systems,
                                          RandomAccessIterator1 begin,
                                          RandomAccessIterator1 end,
                                          RandomAccessIterator2 result,
                                          thrust::random_access_traversal_tag,
                                          thrust::random_access_traversal_tag,
                                          thrust::detail::true_type)
{






  typename thrust::iterator_traits<RandomAccessIterator1>::difference_type n = end - begin;

  thrust::system::cuda::detail::trivial_copy_n(systems, begin, n, result);

  return result + n;
}


namespace detail
{


template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2>
  RandomAccessIterator2 non_trivial_random_access_copy_cross_system(cross_system<System1,System2> systems,
                                                                    RandomAccessIterator1 begin,
                                                                    RandomAccessIterator1 end,
                                                                    RandomAccessIterator2 result,
                                                                    thrust::detail::false_type)
{

  typedef typename thrust::iterator_value<RandomAccessIterator2>::type OutputType;


  thrust::detail::temporary_array<OutputType,System1> temp(systems.system1, begin, end);


  return copy_cross_system(systems, temp.begin(), temp.end(), result);
}

template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2>
  RandomAccessIterator2 non_trivial_random_access_copy_cross_system(cross_system<System1,System2> systems,
                                                                    RandomAccessIterator1 begin,
                                                                    RandomAccessIterator1 end,
                                                                    RandomAccessIterator2 result,
                                                                    thrust::detail::true_type)
{
  typename thrust::iterator_difference<RandomAccessIterator1>::type n = thrust::distance(begin, end);




  typedef typename thrust::iterator_value<RandomAccessIterator1>::type InputType;
  thrust::detail::temporary_array<InputType,System2> temp(0, systems.system2, n);






  thrust::system::cuda::detail::trivial_copy_n(systems, begin, n, temp.begin());


  return thrust::copy(systems.system2, temp.begin(), temp.end(), result);
}

}



template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2>
  RandomAccessIterator2 copy_cross_system(cross_system<System1,System2> systems,
                                          RandomAccessIterator1 begin,
                                          RandomAccessIterator1 end,
                                          RandomAccessIterator2 result,
                                          thrust::random_access_traversal_tag,
                                          thrust::random_access_traversal_tag,
                                          thrust::detail::false_type)
{

  return detail::non_trivial_random_access_copy_cross_system(systems, begin, end, result,
      typename thrust::detail::is_trivial_iterator<RandomAccessIterator1>::type());
}


template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename RandomAccessIterator2>
  RandomAccessIterator2 copy_cross_system(cross_system<System1,System2> systems,
                                          RandomAccessIterator1 begin,
                                          RandomAccessIterator1 end,
                                          RandomAccessIterator2 result,
                                          thrust::random_access_traversal_tag input_traversal,
                                          thrust::random_access_traversal_tag output_traversal)
{

  return copy_cross_system(systems, begin, end, result, input_traversal, output_traversal,
          typename thrust::detail::dispatch::is_trivial_copy<RandomAccessIterator1,RandomAccessIterator2>::type());
}

template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
  RandomAccessIterator2 copy_cross_system_n(cross_system<System1,System2> systems,
                                            RandomAccessIterator1 first,
                                            Size n,
                                            RandomAccessIterator2 result,
                                            thrust::random_access_traversal_tag input_traversal,
                                            thrust::random_access_traversal_tag output_traversal)
{

  return copy_cross_system(systems, first, first + n, result, input_traversal, output_traversal);
}





template<typename System1,
         typename System2,
         typename InputIterator,
         typename OutputIterator>
  OutputIterator copy_cross_system(cross_system<System1,System2> systems,
                                   InputIterator begin,
                                   InputIterator end,
                                   OutputIterator result)
{
  return copy_cross_system(systems, begin, end, result,
          typename thrust::iterator_traversal<InputIterator>::type(),
          typename thrust::iterator_traversal<OutputIterator>::type());
}

template<typename System1,
         typename System2,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
  OutputIterator copy_cross_system_n(cross_system<System1,System2> systems,
                                     InputIterator begin,
                                     Size n,
                                     OutputIterator result)
{
  return copy_cross_system_n(systems, begin, n, result,
          typename thrust::iterator_traversal<InputIterator>::type(),
          typename thrust::iterator_traversal<OutputIterator>::type());
}

}
}
}
}
# 59 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_cross_system.h" 2
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_device_to_device.inl" 2






# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.h" 1
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/trivial_copy.h"
namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename DerivedPolicy,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
__attribute__((host)) __attribute__((device))
void trivial_copy_n(execution_policy<DerivedPolicy> &exec,
                    RandomAccessIterator1 first,
                    Size n,
                    RandomAccessIterator2 result);


template<typename System1,
         typename System2,
         typename RandomAccessIterator1,
         typename Size,
         typename RandomAccessIterator2>
void trivial_copy_n(cross_system<System1,System2> &exec,
                    RandomAccessIterator1 first,
                    Size n,
                    RandomAccessIterator2 result);


}
}
}
}
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_device_to_device.inl" 2

namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{
namespace detail
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
OutputIterator copy_device_to_device(execution_policy<DerivedPolicy> &exec,
                                     InputIterator begin,
                                     InputIterator end,
                                     OutputIterator result,
                                     thrust::detail::false_type)
{

    typedef typename thrust::iterator_traits<InputIterator>::value_type InputType;


    return thrust::transform(exec, begin, end, result, thrust::identity<InputType>());
# 72 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_device_to_device.inl"
}


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
OutputIterator copy_device_to_device(execution_policy<DerivedPolicy> &exec,
                                     InputIterator begin,
                                     InputIterator end,
                                     OutputIterator result,
                                     thrust::detail::true_type)
{




  typename thrust::iterator_traits<OutputIterator>::difference_type n = end - begin;

  thrust::system::cuda::detail::trivial_copy_n(exec, begin, n, result);

  return result + n;
}


}







template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
OutputIterator copy_device_to_device(execution_policy<DerivedPolicy> &exec,
                                     InputIterator begin,
                                     InputIterator end,
                                     OutputIterator result)
{
  typedef typename thrust::iterator_traits<InputIterator>::value_type InputType;
  typedef typename thrust::iterator_traits<OutputIterator>::value_type OutputType;

  const bool use_trivial_copy =
      thrust::detail::is_same<InputType, OutputType>::value
      && thrust::detail::is_trivial_iterator<InputIterator>::value
      && thrust::detail::is_trivial_iterator<OutputIterator>::value;


  (void) use_trivial_copy;

  return detail::copy_device_to_device(exec, begin, end, result,
          thrust::detail::integral_constant<bool, use_trivial_copy>());
}


}
}
}
}
# 52 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy_device_to_device.h" 2
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy.inl" 2


namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename System,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
OutputIterator copy(execution_policy<System> &system,
                    InputIterator first,
                    InputIterator last,
                    OutputIterator result)
{
  return thrust::system::cuda::detail::copy_device_to_device(system,first,last,result);
}


template<typename System1,
         typename System2,
         typename InputIterator,
         typename OutputIterator>
OutputIterator copy(cross_system<System1,System2> systems,
                    InputIterator first,
                    InputIterator last,
                    OutputIterator result)
{
  return thrust::system::cuda::detail::copy_cross_system(systems,first,last,result);
}


template<typename System,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
OutputIterator copy_n(execution_policy<System> &system,
                      InputIterator first,
                      Size n,
                      OutputIterator result)
{
  return thrust::system::cuda::detail::copy_device_to_device(system,first,first+n,result);
}


template<typename System1,
         typename System2,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
OutputIterator copy_n(cross_system<System1,System2> systems,
                      InputIterator first,
                      Size n,
                      OutputIterator result)
{
  return thrust::system::cuda::detail::copy_cross_system_n(systems,first,n,result);
}


}
}
}
}
# 81 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/copy.h" 2
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/copy.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/copy.inl" 2

namespace thrust
{


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename InputIterator, typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                      InputIterator first,
                      InputIterator last,
                      OutputIterator result)
{
  using thrust::system::detail::generic::copy;
  return copy(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename InputIterator, typename Size, typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator copy_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                        InputIterator first,
                        Size n,
                        OutputIterator result)
{
  using thrust::system::detail::generic::copy_n;
  return copy_n(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, n, result);
}


namespace detail
{


 #pragma hd_warning_disable
template<typename System1,
         typename System2,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator two_system_copy(const thrust::execution_policy<System1> &system1,
                                 const thrust::execution_policy<System2> &system2,
                                 InputIterator first,
                                 InputIterator last,
                                 OutputIterator result)
{
  using thrust::system::detail::generic::select_system;

  return thrust::copy(select_system(thrust::detail::derived_cast(thrust::detail::strip_const(system1)), thrust::detail::derived_cast(thrust::detail::strip_const(system2))), first, last, result);
}


 #pragma hd_warning_disable
template<typename System1,
         typename System2,
         typename InputIterator,
         typename Size,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator two_system_copy_n(const thrust::execution_policy<System1> &system1,
                                   const thrust::execution_policy<System2> &system2,
                                   InputIterator first,
                                   Size n,
                                   OutputIterator result)
{
  using thrust::system::detail::generic::select_system;

  return thrust::copy_n(select_system(thrust::detail::derived_cast(thrust::detail::strip_const(system1)), thrust::detail::derived_cast(thrust::detail::strip_const(system2))), first, n, result);
}


}


template<typename InputIterator,
         typename OutputIterator>
  OutputIterator copy(InputIterator first,
                      InputIterator last,
                      OutputIterator result)
{
  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::detail::two_system_copy(system1, system2, first, last, result);
}


template<typename InputIterator,
         typename Size,
         typename OutputIterator>
  OutputIterator copy_n(InputIterator first,
                        Size n,
                        OutputIterator result)
{
  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::detail::two_system_copy_n(system1, system2, first, n, result);
}


}
# 91 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/copy.h" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/copy_construct_range.inl" 2







namespace thrust
{
namespace detail
{
namespace allocator_traits_detail
{


template<typename Allocator, typename InputType, typename OutputType>
  struct copy_construct_with_allocator
{
  Allocator &a;

  __attribute__((host)) __attribute__((device))
  copy_construct_with_allocator(Allocator &a)
    : a(a)
  {}

  template<typename Tuple>
  inline __attribute__((host)) __attribute__((device))
  void operator()(Tuple t)
  {
    const InputType &in = thrust::get<0>(t);
    OutputType &out = thrust::get<1>(t);

    allocator_traits<Allocator>::construct(a, &out, in);
  }
};


template<typename Allocator, typename T>
  struct needs_copy_construct_via_allocator
    : has_member_construct2<
        Allocator,
        T,
        T
      >
{};




template<typename U, typename T>
  struct needs_copy_construct_via_allocator<std::allocator<U>, T>
    : thrust::detail::false_type
{};






template<typename Allocator, typename FromSystem, typename ToSystem, typename InputIterator, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename enable_if_convertible<
    FromSystem,
    ToSystem,
    Pointer
  >::type
    uninitialized_copy_with_allocator(Allocator &a,
                                      const thrust::execution_policy<FromSystem> &from_system,
                                      const thrust::execution_policy<ToSystem> &to_system,
                                      InputIterator first,
                                      InputIterator last,
                                      Pointer result)
{

  typedef thrust::tuple<InputIterator,Pointer> IteratorTuple;
  typedef thrust::zip_iterator<IteratorTuple> ZipIterator;

  ZipIterator begin = thrust::make_zip_iterator(thrust::make_tuple(first,result));
  ZipIterator end = begin;


  const typename thrust::iterator_difference<InputIterator>::type n = thrust::distance(first,last);
  thrust::advance(end,n);


  typedef typename iterator_traits<InputIterator>::value_type InputType;
  typedef typename iterator_traits<Pointer>::value_type OutputType;



  thrust::for_each(to_system, begin, end, copy_construct_with_allocator<Allocator,InputType,OutputType>(a));


  return thrust::get<1>(end.get_iterator_tuple());
}






template<typename Allocator, typename FromSystem, typename ToSystem, typename InputIterator, typename Size, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename enable_if_convertible<
    FromSystem,
    ToSystem,
    Pointer
  >::type
    uninitialized_copy_with_allocator_n(Allocator &a,
                                        const thrust::execution_policy<FromSystem> &from_system,
                                        const thrust::execution_policy<ToSystem> &to_system,
                                        InputIterator first,
                                        Size n,
                                        Pointer result)
{

  typedef thrust::tuple<InputIterator,Pointer> IteratorTuple;
  typedef thrust::zip_iterator<IteratorTuple> ZipIterator;

  ZipIterator begin = thrust::make_zip_iterator(thrust::make_tuple(first,result));


  typedef typename iterator_traits<InputIterator>::value_type InputType;
  typedef typename iterator_traits<Pointer>::value_type OutputType;



  ZipIterator end = thrust::for_each_n(to_system, begin, n, copy_construct_with_allocator<Allocator,InputType,OutputType>(a));


  return thrust::get<1>(end.get_iterator_tuple());
}


template<typename Allocator, typename FromSystem, typename ToSystem, typename InputIterator, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename disable_if_convertible<
    FromSystem,
    ToSystem,
    Pointer
  >::type
    uninitialized_copy_with_allocator(Allocator &,
                                      const thrust::execution_policy<FromSystem> &from_system,
                                      const thrust::execution_policy<ToSystem> &to_system,
                                      InputIterator first,
                                      InputIterator last,
                                      Pointer result)
{


  return thrust::detail::two_system_copy(from_system, to_system, first, last, result);
}


template<typename Allocator, typename FromSystem, typename ToSystem, typename InputIterator, typename Size, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename disable_if_convertible<
    FromSystem,
    ToSystem,
    Pointer
  >::type
    uninitialized_copy_with_allocator_n(Allocator &,
                                        const thrust::execution_policy<FromSystem> &from_system,
                                        const thrust::execution_policy<ToSystem> &to_system,
                                        InputIterator first,
                                        Size n,
                                        Pointer result)
{


  return thrust::detail::two_system_copy_n(from_system, to_system, first, n, result);
}


template<typename FromSystem, typename Allocator, typename InputIterator, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename disable_if<
    needs_copy_construct_via_allocator<
      Allocator,
      typename pointer_element<Pointer>::type
    >::value,
    Pointer
  >::type
    copy_construct_range(thrust::execution_policy<FromSystem> &from_system,
                         Allocator &a,
                         InputIterator first,
                         InputIterator last,
                         Pointer result)
{

  return thrust::detail::two_system_copy(from_system, allocator_system<Allocator>::get(a), first, last, result);
}


template<typename FromSystem, typename Allocator, typename InputIterator, typename Size, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename disable_if<
    needs_copy_construct_via_allocator<
      Allocator,
      typename pointer_element<Pointer>::type
    >::value,
    Pointer
  >::type
    copy_construct_range_n(thrust::execution_policy<FromSystem> &from_system,
                           Allocator &a,
                           InputIterator first,
                           Size n,
                           Pointer result)
{

  return thrust::detail::two_system_copy_n(from_system, allocator_system<Allocator>::get(a), first, n, result);
}


template<typename FromSystem, typename Allocator, typename InputIterator, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename enable_if<
    needs_copy_construct_via_allocator<
      Allocator,
      typename pointer_element<Pointer>::type
    >::value,
    Pointer
  >::type
    copy_construct_range(thrust::execution_policy<FromSystem> &from_system,
                         Allocator &a,
                         InputIterator first,
                         InputIterator last,
                         Pointer result)
{
  return uninitialized_copy_with_allocator(a, from_system, allocator_system<Allocator>::get(a), first, last, result);
}


template<typename FromSystem, typename Allocator, typename InputIterator, typename Size, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename enable_if<
    needs_copy_construct_via_allocator<
      Allocator,
      typename pointer_element<Pointer>::type
    >::value,
    Pointer
  >::type
    copy_construct_range_n(thrust::execution_policy<FromSystem> &from_system,
                           Allocator &a,
                           InputIterator first,
                           Size n,
                           Pointer result)
{
  return uninitialized_copy_with_allocator_n(a, from_system, allocator_system<Allocator>::get(a), first, n, result);
}


}


template<typename System, typename Allocator, typename InputIterator, typename Pointer>
__attribute__((host)) __attribute__((device))
  Pointer copy_construct_range(thrust::execution_policy<System> &from_system,
                               Allocator &a,
                               InputIterator first,
                               InputIterator last,
                               Pointer result)
{
  return allocator_traits_detail::copy_construct_range(from_system, a, first, last, result);
}


template<typename System, typename Allocator, typename InputIterator, typename Size, typename Pointer>
__attribute__((host)) __attribute__((device))
  Pointer copy_construct_range_n(thrust::execution_policy<System> &from_system,
                                 Allocator &a,
                                 InputIterator first,
                                 Size n,
                                 Pointer result)
{
  return allocator_traits_detail::copy_construct_range_n(from_system, a, first, n, result);
}


}
}
# 47 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/copy_construct_range.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/default_construct_range.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/default_construct_range.h"
       



namespace thrust
{
namespace detail
{


template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
inline void default_construct_range(Allocator &a, Pointer p, Size n);


}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/default_construct_range.inl" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/default_construct_range.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/uninitialized_fill.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/uninitialized_fill.h"
       




namespace thrust
{
# 90 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/uninitialized_fill.h"
template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void uninitialized_fill(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                          ForwardIterator first,
                          ForwardIterator last,
                          const T &x);
# 146 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/uninitialized_fill.h"
template<typename ForwardIterator, typename T>
  void uninitialized_fill(ForwardIterator first,
                          ForwardIterator last,
                          const T &x);
# 206 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/uninitialized_fill.h"
template<typename DerivedPolicy, typename ForwardIterator, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  ForwardIterator uninitialized_fill_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       ForwardIterator first,
                                       Size n,
                                       const T &x);
# 263 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/uninitialized_fill.h"
template<typename ForwardIterator, typename Size, typename T>
  ForwardIterator uninitialized_fill_n(ForwardIterator first,
                                       Size n,
                                       const T &x);





}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/uninitialized_fill.inl" 1
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/uninitialized_fill.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/uninitialized_fill.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/uninitialized_fill.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{

template<typename DerivedPolicy,
         typename ForwardIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  void uninitialized_fill(thrust::execution_policy<DerivedPolicy> &exec,
                          ForwardIterator first,
                          ForwardIterator last,
                          const T &x);

template<typename DerivedPolicy,
         typename ForwardIterator,
         typename Size,
         typename T>
__attribute__((host)) __attribute__((device))
  ForwardIterator uninitialized_fill_n(thrust::execution_policy<DerivedPolicy> &exec,
                                       ForwardIterator first,
                                       Size n,
                                       const T &x);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/uninitialized_fill.inl" 1
# 19 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/uninitialized_fill.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/fill.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/fill.h"
       




namespace thrust
{
# 74 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/fill.h"
template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void fill(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
            ForwardIterator first,
            ForwardIterator last,
            const T &value);
# 113 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/fill.h"
template<typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void fill(ForwardIterator first,
            ForwardIterator last,
            const T &value);
# 156 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/fill.h"
template<typename DerivedPolicy, typename OutputIterator, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator fill_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                        OutputIterator first,
                        Size n,
                        const T &value);
# 195 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/fill.h"
template<typename OutputIterator, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator fill_n(OutputIterator first,
                        Size n,
                        const T &value);






}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/fill.inl" 1
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/fill.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/fill.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/fill.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/generate.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/generate.h"
       




namespace thrust
{
# 72 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/generate.h"
template<typename DerivedPolicy,
         typename ForwardIterator,
         typename Generator>
__attribute__((host)) __attribute__((device))
  void generate(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                ForwardIterator first,
                ForwardIterator last,
                Generator gen);
# 114 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/generate.h"
template<typename ForwardIterator,
         typename Generator>
  void generate(ForwardIterator first,
                ForwardIterator last,
                Generator gen);
# 157 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/generate.h"
template<typename DerivedPolicy,
         typename OutputIterator,
         typename Size,
         typename Generator>
__attribute__((host)) __attribute__((device))
  OutputIterator generate_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                            OutputIterator first,
                            Size n,
                            Generator gen);
# 199 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/generate.h"
template<typename OutputIterator,
         typename Size,
         typename Generator>
  OutputIterator generate_n(OutputIterator first,
                            Size n,
                            Generator gen);





}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/generate.inl" 1
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/generate.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/generate.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/generate.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{

template<typename ExecutionPolicy,
         typename ForwardIterator,
         typename Generator>
__attribute__((host)) __attribute__((device))
  void generate(thrust::execution_policy<ExecutionPolicy> &exec,
                ForwardIterator first,
                ForwardIterator last,
                Generator gen);

template<typename ExecutionPolicy,
         typename OutputIterator,
         typename Size,
         typename Generator>
__attribute__((host)) __attribute__((device))
  OutputIterator generate_n(thrust::execution_policy<ExecutionPolicy> &exec,
                            OutputIterator first,
                            Size n,
                            Generator gen);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/generate.inl" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/generate.inl"
namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{

template<typename ExecutionPolicy,
         typename ForwardIterator,
         typename Generator>
__attribute__((host)) __attribute__((device))
  void generate(thrust::execution_policy<ExecutionPolicy> &exec,
                ForwardIterator first,
                ForwardIterator last,
                Generator gen)
{
  thrust::for_each(exec, first, last, typename thrust::detail::generate_functor<ExecutionPolicy,Generator>::type(gen));
}

template<typename ExecutionPolicy,
         typename OutputIterator,
         typename Size,
         typename Generator>
__attribute__((host)) __attribute__((device))
  OutputIterator generate_n(thrust::execution_policy<ExecutionPolicy> &exec,
                            OutputIterator first,
                            Size n,
                            Generator gen)
{
  return thrust::for_each_n(exec, first, n, typename thrust::detail::generate_functor<ExecutionPolicy,Generator>::type(gen));
}

}
}
}
}
# 57 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/generate.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/generate.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/generate.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/generate.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/generate.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/generate.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/generate.h" 2
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/generate.inl" 2

namespace thrust
{


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename ForwardIterator,
         typename Generator>
__attribute__((host)) __attribute__((device))
  void generate(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                ForwardIterator first,
                ForwardIterator last,
                Generator gen)
{
  using thrust::system::detail::generic::generate;
  return generate(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, gen);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename OutputIterator,
         typename Size,
         typename Generator>
__attribute__((host)) __attribute__((device))
  OutputIterator generate_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                            OutputIterator first,
                            Size n,
                            Generator gen)
{
  using thrust::system::detail::generic::generate_n;
  return generate_n(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, n, gen);
}


template<typename ForwardIterator,
         typename Generator>
  void generate(ForwardIterator first,
                ForwardIterator last,
                Generator gen)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<ForwardIterator>::type System;

  System system;

  return thrust::generate(select_system(system), first, last, gen);
}


template<typename OutputIterator,
         typename Size,
         typename Generator>
  OutputIterator generate_n(OutputIterator first,
                            Size n,
                            Generator gen)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<OutputIterator>::type System;

  System system;

  return thrust::generate_n(select_system(system), first, n, gen);
}


}
# 213 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/generate.h" 2
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/fill.h" 2


namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename DerivedPolicy, typename OutputIterator, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator fill_n(thrust::execution_policy<DerivedPolicy> &exec,
                        OutputIterator first,
                        Size n,
                        const T &value)
{

  return thrust::generate_n(exec, first, n, thrust::detail::fill_functor<T>(value));
}

template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void fill(thrust::execution_policy<DerivedPolicy> &exec,
            ForwardIterator first,
            ForwardIterator last,
            const T &value)
{

  thrust::generate(exec, first, last, thrust::detail::fill_functor<T>(value));
}


}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/fill.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/fill.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/fill.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/fill.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/fill.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/fill.h" 2






# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/fill.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/fill.h"
       
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/fill.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/fill.inl" 2

namespace thrust
{


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void fill(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
            ForwardIterator first,
            ForwardIterator last,
            const T &value)
{
  using thrust::system::detail::generic::fill;
  return fill(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, value);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename OutputIterator, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator fill_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                        OutputIterator first,
                        Size n,
                        const T &value)
{
  using thrust::system::detail::generic::fill_n;
  return fill_n(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, n, value);
}


template<typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void fill(ForwardIterator first,
            ForwardIterator last,
            const T &value)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<ForwardIterator>::type System;

  System system;

  thrust::fill(select_system(system), first, last, value);
}


template<typename OutputIterator, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator fill_n(OutputIterator first,
                        Size n,
                        const T &value)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<OutputIterator>::type System;

  System system;

  return thrust::fill_n(select_system(system), first, n, value);
}


}
# 209 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/fill.h" 2
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/uninitialized_fill.inl" 2




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{
namespace detail
{

template<typename DerivedPolicy,
         typename ForwardIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  void uninitialized_fill(thrust::execution_policy<DerivedPolicy> &exec,
                          ForwardIterator first,
                          ForwardIterator last,
                          const T &x,
                          thrust::detail::true_type)
{
  thrust::fill(exec, first, last, x);
}

template<typename DerivedPolicy,
         typename ForwardIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  void uninitialized_fill(thrust::execution_policy<DerivedPolicy> &exec,
                          ForwardIterator first,
                          ForwardIterator last,
                          const T &x,
                          thrust::detail::false_type)
{
  typedef typename iterator_traits<ForwardIterator>::value_type ValueType;

  thrust::for_each(exec, first, last, thrust::detail::uninitialized_fill_functor<ValueType>(x));
}

template<typename DerivedPolicy,
         typename ForwardIterator,
         typename Size,
         typename T>
__attribute__((host)) __attribute__((device))
  ForwardIterator uninitialized_fill_n(thrust::execution_policy<DerivedPolicy> &exec,
                                       ForwardIterator first,
                                       Size n,
                                       const T &x,
                                       thrust::detail::true_type)
{
  return thrust::fill_n(exec, first, n, x);
}

template<typename DerivedPolicy,
         typename ForwardIterator,
         typename Size,
         typename T>
__attribute__((host)) __attribute__((device))
  ForwardIterator uninitialized_fill_n(thrust::execution_policy<DerivedPolicy> &exec,
                                       ForwardIterator first,
                                       Size n,
                                       const T &x,
                                       thrust::detail::false_type)
{
  typedef typename iterator_traits<ForwardIterator>::value_type ValueType;

  return thrust::for_each_n(exec, first, n, thrust::detail::uninitialized_fill_functor<ValueType>(x));
}

}

template<typename DerivedPolicy,
         typename ForwardIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  void uninitialized_fill(thrust::execution_policy<DerivedPolicy> &exec,
                          ForwardIterator first,
                          ForwardIterator last,
                          const T &x)
{
  typedef typename iterator_traits<ForwardIterator>::value_type ValueType;

  typedef thrust::detail::has_trivial_copy_constructor<ValueType> ValueTypeHasTrivialCopyConstructor;

  thrust::system::detail::generic::detail::uninitialized_fill(exec, first, last, x,
    ValueTypeHasTrivialCopyConstructor());
}

template<typename DerivedPolicy,
         typename ForwardIterator,
         typename Size,
         typename T>
__attribute__((host)) __attribute__((device))
  ForwardIterator uninitialized_fill_n(thrust::execution_policy<DerivedPolicy> &exec,
                                       ForwardIterator first,
                                       Size n,
                                       const T &x)
{
  typedef typename iterator_traits<ForwardIterator>::value_type ValueType;

  typedef thrust::detail::has_trivial_copy_constructor<ValueType> ValueTypeHasTrivialCopyConstructor;

  return thrust::system::detail::generic::detail::uninitialized_fill_n(exec, first, n, x,
    ValueTypeHasTrivialCopyConstructor());
}

}
}
}
}
# 57 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/uninitialized_fill.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/uninitialized_fill.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/uninitialized_fill.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/uninitialized_fill.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/uninitialized_fill.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/uninitialized_fill.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/uninitialized_fill.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/uninitialized_fill.inl" 2

namespace thrust
{


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename ForwardIterator, typename T>
__attribute__((host)) __attribute__((device))
  void uninitialized_fill(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                          ForwardIterator first,
                          ForwardIterator last,
                          const T &x)
{
  using thrust::system::detail::generic::uninitialized_fill;
  return uninitialized_fill(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, x);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename ForwardIterator, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  ForwardIterator uninitialized_fill_n(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       ForwardIterator first,
                                       Size n,
                                       const T &x)
{
  using thrust::system::detail::generic::uninitialized_fill_n;
  return uninitialized_fill_n(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, n, x);
}


template<typename ForwardIterator,
         typename T>
  void uninitialized_fill(ForwardIterator first,
                          ForwardIterator last,
                          const T &x)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<ForwardIterator>::type System;

  System system;

  thrust::uninitialized_fill(select_system(system), first, last, x);
}


template<typename ForwardIterator,
         typename Size,
         typename T>
  ForwardIterator uninitialized_fill_n(ForwardIterator first,
                                       Size n,
                                       const T &x)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<ForwardIterator>::type System;

  System system;

  return thrust::uninitialized_fill_n(select_system(system), first, n, x);
}


}
# 275 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/uninitialized_fill.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/default_construct_range.inl" 2

namespace thrust
{
namespace detail
{
namespace allocator_traits_detail
{


template<typename Allocator>
  struct construct1_via_allocator
{
  Allocator &a;

  __attribute__((host)) __attribute__((device))
  construct1_via_allocator(Allocator &a)
    : a(a)
  {}

  template<typename T>
  inline __attribute__((host)) __attribute__((device))
  void operator()(T &x)
  {
    allocator_traits<Allocator>::construct(a, &x);
  }
};



template<typename Allocator, typename T>
  struct needs_default_construct_via_allocator
    : thrust::detail::or_<
        has_member_construct1<Allocator,T>,
        thrust::detail::not_<has_trivial_constructor<T> >
      >
{};





template<typename U, typename T>
  struct needs_default_construct_via_allocator<std::allocator<U>, T>
    : thrust::detail::not_<has_trivial_constructor<T> >
{};


template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
  typename enable_if<
    needs_default_construct_via_allocator<
      Allocator,
      typename pointer_element<Pointer>::type
    >::value
  >::type
    default_construct_range(Allocator &a, Pointer p, Size n)
{
  thrust::for_each_n(allocator_system<Allocator>::get(a), p, n, construct1_via_allocator<Allocator>(a));
}


template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
  typename disable_if<
    needs_default_construct_via_allocator<
      Allocator,
      typename pointer_element<Pointer>::type
    >::value
  >::type
    default_construct_range(Allocator &a, Pointer p, Size n)
{
  thrust::uninitialized_fill_n(allocator_system<Allocator>::get(a), p, n, typename pointer_element<Pointer>::type());
}


}


template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
  void default_construct_range(Allocator &a, Pointer p, Size n)
{
  return allocator_traits_detail::default_construct_range(a,p,n);
}


}
}
# 36 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/default_construct_range.h" 2
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/destroy_range.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/destroy_range.h"
       



namespace thrust
{
namespace detail
{

template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
  inline void destroy_range(Allocator &a, Pointer p, Size n);

}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/destroy_range.inl" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/destroy_range.inl"
namespace thrust
{
namespace detail
{
namespace allocator_traits_detail
{
# 38 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/destroy_range.inl"
template<typename Allocator, typename T>
  struct has_effectful_member_destroy
    : has_member_destroy<Allocator,T>
{};


template<typename U, typename T>
  struct has_effectful_member_destroy<std::allocator<U>, T>
    : thrust::detail::false_type
{};


template<typename Allocator, typename Pointer>
  struct enable_if_destroy_range_case1
    : thrust::detail::enable_if<
        has_effectful_member_destroy<
          Allocator,
          typename pointer_element<Pointer>::type
        >::value
      >
{};


template<typename Allocator, typename Pointer>
  struct enable_if_destroy_range_case2
    : thrust::detail::enable_if<
        !has_effectful_member_destroy<
          Allocator,
          typename pointer_element<Pointer>::type
        >::value &&
        !has_trivial_destructor<
          typename pointer_element<Pointer>::type
        >::value
      >
{};


template<typename Allocator, typename Pointer>
  struct enable_if_destroy_range_case3
    : thrust::detail::enable_if<
        !has_effectful_member_destroy<
          Allocator,
          typename pointer_element<Pointer>::type
        >::value &&
        has_trivial_destructor<
          typename pointer_element<Pointer>::type
        >::value
      >
{};



template<typename Allocator>
  struct destroy_via_allocator
{
  Allocator &a;

  __attribute__((host)) __attribute__((device))
  destroy_via_allocator(Allocator &a)
    : a(a)
  {}

  template<typename T>
  inline __attribute__((host)) __attribute__((device))
  void operator()(T &x)
  {
    allocator_traits<Allocator>::destroy(a, &x);
  }
};



template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
  typename enable_if_destroy_range_case1<Allocator,Pointer>::type
    destroy_range(Allocator &a, Pointer p, Size n)
{
  thrust::for_each_n(allocator_system<Allocator>::get(a), p, n, destroy_via_allocator<Allocator>(a));
}



struct gozer
{
  template<typename T>
  inline __attribute__((host)) __attribute__((device))
  void operator()(T &x)
  {
    x.~T();
  }
};


template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
  typename enable_if_destroy_range_case2<Allocator,Pointer>::type
    destroy_range(Allocator &a, Pointer p, Size n)
{
  thrust::for_each_n(allocator_system<Allocator>::get(a), p, n, gozer());
}



template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
  typename enable_if_destroy_range_case3<Allocator,Pointer>::type
    destroy_range(Allocator &, Pointer, Size)
{

}


}


template<typename Allocator, typename Pointer, typename Size>
__attribute__((host)) __attribute__((device))
  void destroy_range(Allocator &a, Pointer p, Size n)
{
  return allocator_traits_detail::destroy_range(a,p,n);
}


}
}
# 34 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/destroy_range.h" 2
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/fill_construct_range.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/fill_construct_range.h"
       



namespace thrust
{
namespace detail
{


template<typename Allocator, typename Pointer, typename Size, typename T>
__attribute__((host)) __attribute__((device))
inline void fill_construct_range(Allocator &a, Pointer p, Size n, const T &value);


}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/fill_construct_range.inl" 1
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/fill_construct_range.inl"
namespace thrust
{
namespace detail
{
namespace allocator_traits_detail
{







template<typename Allocator, typename T, typename Arg1>
  struct has_effectful_member_construct2
    : has_member_construct2<Allocator,T,Arg1>
{};


template<typename U, typename T, typename Arg1>
  struct has_effectful_member_construct2<std::allocator<U>,T,Arg1>
    : thrust::detail::false_type
{};


template<typename Allocator, typename Arg1>
  struct construct2_via_allocator
{
  Allocator &a;
  Arg1 arg;

  __attribute__((host)) __attribute__((device))
  construct2_via_allocator(Allocator &a, const Arg1 &arg)
    : a(a), arg(arg)
  {}

  template<typename T>
  inline __attribute__((host)) __attribute__((device))
  void operator()(T &x)
  {
    allocator_traits<Allocator>::construct(a, &x, arg);
  }
};


template<typename Allocator, typename Pointer, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  typename enable_if<
    has_effectful_member_construct2<
      Allocator,
      typename pointer_element<Pointer>::type,
      T
    >::value
  >::type
    fill_construct_range(Allocator &a, Pointer p, Size n, const T &value)
{
  thrust::for_each_n(allocator_system<Allocator>::get(a), p, n, construct2_via_allocator<Allocator,T>(a, value));
}


template<typename Allocator, typename Pointer, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  typename disable_if<
    has_effectful_member_construct2<
      Allocator,
      typename pointer_element<Pointer>::type,
      T
    >::value
  >::type
    fill_construct_range(Allocator &a, Pointer p, Size n, const T &value)
{
  thrust::uninitialized_fill_n(allocator_system<Allocator>::get(a), p, n, value);
}


}


template<typename Alloc, typename Pointer, typename Size, typename T>
__attribute__((host)) __attribute__((device))
  void fill_construct_range(Alloc &a, Pointer p, Size n, const T &value)
{
  return allocator_traits_detail::fill_construct_range(a,p,n,value);
}


}
}
# 36 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/fill_construct_range.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.inl" 2


namespace thrust
{

namespace detail
{

 #pragma hd_warning_disable
template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  contiguous_storage<T,Alloc>
    ::contiguous_storage(const Alloc &alloc)
      :m_allocator(alloc),
       m_begin(pointer(static_cast<T*>(0))),
       m_size(0)
{
  ;
}

 #pragma hd_warning_disable
template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  contiguous_storage<T,Alloc>
    ::contiguous_storage(size_type n, const Alloc &alloc)
      :m_allocator(alloc),
       m_begin(pointer(static_cast<T*>(0))),
       m_size(0)
{
  allocate(n);
}

 #pragma hd_warning_disable
template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  contiguous_storage<T,Alloc>
    ::~contiguous_storage(void)
{
  deallocate();
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::size_type
    contiguous_storage<T,Alloc>
      ::size(void) const
{
  return m_size;
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::size_type
    contiguous_storage<T,Alloc>
      ::max_size(void) const
{
  return alloc_traits::max_size(m_allocator);
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::iterator
    contiguous_storage<T,Alloc>
      ::begin(void)
{
  return m_begin;
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::const_iterator
    contiguous_storage<T,Alloc>
      ::begin(void) const
{
  return m_begin;
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::iterator
    contiguous_storage<T,Alloc>
      ::end(void)
{
  return m_begin + size();
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::const_iterator
    contiguous_storage<T,Alloc>
      ::end(void) const
{
  return m_begin + size();
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::reference
    contiguous_storage<T,Alloc>
      ::operator[](size_type n)
{
  return m_begin[n];
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::const_reference
    contiguous_storage<T,Alloc>
      ::operator[](size_type n) const
{
  return m_begin[n];
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  typename contiguous_storage<T,Alloc>::allocator_type
    contiguous_storage<T,Alloc>
      ::get_allocator(void) const
{
  return m_allocator;
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  void contiguous_storage<T,Alloc>
    ::allocate(size_type n)
{
  if(n > 0)
  {
    m_begin = iterator(alloc_traits::allocate(m_allocator,n));
    m_size = n;
  }
  else
  {
    m_begin = iterator(pointer(static_cast<T*>(0)));
    m_size = 0;
  }
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  void contiguous_storage<T,Alloc>
    ::deallocate(void)
{
  if(size() > 0)
  {
    alloc_traits::deallocate(m_allocator,m_begin.base(), size());
    m_begin = iterator(pointer(static_cast<T*>(0)));
    m_size = 0;
  }
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  void contiguous_storage<T,Alloc>
    ::swap(contiguous_storage &x)
{
  thrust::swap(m_begin, x.m_begin);
  thrust::swap(m_size, x.m_size);

  thrust::swap(m_allocator, x.m_allocator);
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  void contiguous_storage<T,Alloc>
    ::default_construct_n(iterator first, size_type n)
{
  default_construct_range(m_allocator, first.base(), n);
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  void contiguous_storage<T,Alloc>
    ::uninitialized_fill_n(iterator first, size_type n, const value_type &x)
{
  fill_construct_range(m_allocator, first.base(), n, x);
}

template<typename T, typename Alloc>
  template<typename System, typename InputIterator>
  __attribute__((host)) __attribute__((device))
    typename contiguous_storage<T,Alloc>::iterator
      contiguous_storage<T,Alloc>
        ::uninitialized_copy(thrust::execution_policy<System> &from_system, InputIterator first, InputIterator last, iterator result)
{
  return iterator(copy_construct_range(from_system, m_allocator, first, last, result.base()));
}

template<typename T, typename Alloc>
  template<typename InputIterator>
  __attribute__((host)) __attribute__((device))
    typename contiguous_storage<T,Alloc>::iterator
      contiguous_storage<T,Alloc>
        ::uninitialized_copy(InputIterator first, InputIterator last, iterator result)
{

  typename thrust::iterator_system<InputIterator>::type from_system;

  return iterator(copy_construct_range(from_system, m_allocator, first, last, result.base()));
}

template<typename T, typename Alloc>
  template<typename System, typename InputIterator, typename Size>
  __attribute__((host)) __attribute__((device))
    typename contiguous_storage<T,Alloc>::iterator
      contiguous_storage<T,Alloc>
        ::uninitialized_copy_n(thrust::execution_policy<System> &from_system, InputIterator first, Size n, iterator result)
{
  return iterator(copy_construct_range_n(from_system, m_allocator, first, n, result.base()));
}

template<typename T, typename Alloc>
  template<typename InputIterator, typename Size>
  __attribute__((host)) __attribute__((device))
    typename contiguous_storage<T,Alloc>::iterator
      contiguous_storage<T,Alloc>
        ::uninitialized_copy_n(InputIterator first, Size n, iterator result)
{

  typename thrust::iterator_system<InputIterator>::type from_system;

  return iterator(copy_construct_range_n(from_system, m_allocator, first, n, result.base()));
}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  void contiguous_storage<T,Alloc>
    ::destroy(iterator first, iterator last)
{
  destroy_range(m_allocator, first.base(), last - first);
}

}

template<typename T, typename Alloc>
__attribute__((host)) __attribute__((device))
  void swap(detail::contiguous_storage<T,Alloc> &lhs, detail::contiguous_storage<T,Alloc> &rhs)
{
  lhs.swap(rhs);
}

}
# 156 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/contiguous_storage.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/temporary_allocator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/temporary_allocator.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/tagged_allocator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/tagged_allocator.h"
       





namespace thrust
{
namespace detail
{

template<typename T, typename Tag, typename Pointer> class tagged_allocator;

template<typename Tag, typename Pointer>
  class tagged_allocator<void, Tag, Pointer>
{
  public:
    typedef void value_type;
    typedef typename thrust::detail::pointer_traits<Pointer>::template rebind<void>::other pointer;
    typedef typename thrust::detail::pointer_traits<Pointer>::template rebind<const void>::other const_pointer;
    typedef std::size_t size_type;
    typedef typename thrust::detail::pointer_traits<Pointer>::difference_type difference_type;
    typedef Tag system_type;

    template<typename U>
      struct rebind
    {
      typedef tagged_allocator<U,Tag,Pointer> other;
    };
};

template<typename T, typename Tag, typename Pointer>
  class tagged_allocator
{
  public:
    typedef T value_type;
    typedef typename thrust::detail::pointer_traits<Pointer>::template rebind<T>::other pointer;
    typedef typename thrust::detail::pointer_traits<Pointer>::template rebind<const T>::other const_pointer;
    typedef typename thrust::iterator_reference<pointer>::type reference;
    typedef typename thrust::iterator_reference<const_pointer>::type const_reference;
    typedef std::size_t size_type;
    typedef typename thrust::detail::pointer_traits<pointer>::difference_type difference_type;
    typedef Tag system_type;

    template<typename U>
      struct rebind
    {
      typedef tagged_allocator<U,Tag,Pointer> other;
    };

    __attribute__((host)) __attribute__((device))
    inline tagged_allocator();

    __attribute__((host)) __attribute__((device))
    inline tagged_allocator(const tagged_allocator &);

    template<typename U, typename OtherPointer>
    __attribute__((host)) __attribute__((device))
    inline tagged_allocator(const tagged_allocator<U, Tag, OtherPointer> &);

    __attribute__((host)) __attribute__((device))
    inline ~tagged_allocator();

    __attribute__((host)) __attribute__((device))
    pointer address(reference x) const;

    __attribute__((host)) __attribute__((device))
    const_pointer address(const_reference x) const;

    size_type max_size() const;
};

template<typename T1, typename Pointer1, typename T2, typename Pointer2, typename Tag>
__attribute__((host)) __attribute__((device))
bool operator==(const tagged_allocator<T1,Pointer1,Tag> &, const tagged_allocator<T2,Pointer2,Tag> &);

template<typename T1, typename Pointer1, typename T2, typename Pointer2, typename Tag>
__attribute__((host)) __attribute__((device))
bool operator!=(const tagged_allocator<T1,Pointer1,Tag> &, const tagged_allocator<T2,Pointer2,Tag> &);

}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/tagged_allocator.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/tagged_allocator.inl"
namespace thrust
{
namespace detail
{


template<typename T, typename Tag, typename Pointer>
  tagged_allocator<T,Tag,Pointer>
    ::tagged_allocator()
{}


template<typename T, typename Tag, typename Pointer>
  tagged_allocator<T,Tag,Pointer>
    ::tagged_allocator(const tagged_allocator<T,Tag,Pointer> &)
{}


template<typename T, typename Tag, typename Pointer>
  template<typename U, typename OtherPointer>
    tagged_allocator<T,Tag,Pointer>
      ::tagged_allocator(const tagged_allocator<U,Tag,OtherPointer> &)
{}


template<typename T, typename Tag, typename Pointer>
  tagged_allocator<T,Tag,Pointer>
    ::~tagged_allocator()
{}


template<typename T, typename Tag, typename Pointer>
  typename tagged_allocator<T,Tag,Pointer>::pointer
    tagged_allocator<T,Tag,Pointer>
      ::address(reference x) const
{
  return &x;
}


template<typename T, typename Tag, typename Pointer>
  typename tagged_allocator<T,Tag,Pointer>::const_pointer
    tagged_allocator<T,Tag,Pointer>
      ::address(const_reference x) const
{
  return &x;
}


template<typename T, typename Tag, typename Pointer>
  typename tagged_allocator<T,Tag,Pointer>::size_type
    tagged_allocator<T,Tag,Pointer>
      ::max_size() const
{
  return (std::numeric_limits<size_type>::max)() / sizeof(T);
}


template<typename T1, typename Pointer1, typename T2, typename Pointer2, typename Tag>
__attribute__((host)) __attribute__((device))
bool operator==(const tagged_allocator<T1,Pointer1,Tag> &, const tagged_allocator<T2,Pointer2,Tag> &)
{
  return true;
}


template<typename T1, typename Pointer1, typename T2, typename Pointer2, typename Tag>
__attribute__((host)) __attribute__((device))
bool operator!=(const tagged_allocator<T1,Pointer1,Tag> &, const tagged_allocator<T2,Pointer2,Tag> &)
{
  return false;
}


}
}
# 101 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/tagged_allocator.h" 2
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/temporary_allocator.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h" 1
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pointer.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pointer.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pointer.h"
namespace thrust
{


template<typename Element, typename Tag, typename Reference = use_default, typename Derived = use_default> class pointer;

}






namespace thrust
{

template<typename Element, typename Tag, typename Reference, typename Derived>
  struct iterator_traits<thrust::pointer<Element,Tag,Reference,Derived> >
{
  private:
    typedef thrust::pointer<Element,Tag,Reference,Derived> ptr;

  public:
    typedef typename ptr::iterator_category iterator_category;
    typedef typename ptr::value_type value_type;
    typedef typename ptr::difference_type difference_type;

    typedef void pointer;
    typedef typename ptr::reference reference;
};

}


namespace thrust
{

namespace detail
{


template<typename Element, typename Tag, typename Reference, typename Derived>
  struct pointer_base
{


  typedef typename thrust::detail::eval_if<
    thrust::detail::is_void<typename thrust::detail::remove_const<Element>::type>::value,
    thrust::detail::identity_<void>,
    thrust::detail::remove_cv<Element>
  >::type value_type;


  typedef typename thrust::detail::eval_if<
    thrust::detail::is_same<Derived,use_default>::value,
    thrust::detail::identity_<pointer<Element,Tag,Reference,Derived> >,
    thrust::detail::identity_<Derived>
  >::type derived_type;



  typedef typename thrust::detail::eval_if<
    thrust::detail::is_void<typename thrust::detail::remove_const<Element>::type>::value,
    thrust::detail::identity_<void>,
    thrust::detail::eval_if<
      thrust::detail::is_same<Reference,use_default>::value,
      thrust::detail::identity_<reference<Element,derived_type> >,
      thrust::detail::identity_<Reference>
    >
  >::type reference_arg;

  typedef thrust::iterator_adaptor<
    derived_type,
    Element *,
    value_type,
    Tag,
    thrust::random_access_traversal_tag,
    reference_arg,
    std::ptrdiff_t
  > type;
};


}
# 119 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pointer.h"
template<typename Element, typename Tag, typename Reference, typename Derived>
  class pointer
    : public thrust::detail::pointer_base<Element,Tag,Reference,Derived>::type
{
  private:
    typedef typename thrust::detail::pointer_base<Element,Tag,Reference,Derived>::type super_t;

    typedef typename thrust::detail::pointer_base<Element,Tag,Reference,Derived>::derived_type derived_type;


    friend class thrust::iterator_core_access;

    __attribute__((host)) __attribute__((device))
    typename super_t::reference dereference() const;


    using super_t::base;
    using typename super_t::base_type;

  public:
    typedef typename super_t::base_type raw_pointer;



    __attribute__((host)) __attribute__((device))
    pointer();



    template<typename OtherElement>
    __attribute__((host)) __attribute__((device))
    explicit pointer(OtherElement *ptr);



    template<typename OtherPointer>
    __attribute__((host)) __attribute__((device))
    pointer(const OtherPointer &other,
            typename thrust::detail::enable_if_pointer_is_convertible<
              OtherPointer,
              pointer<Element,Tag,Reference,Derived>
            >::type * = 0);





    template<typename OtherPointer>
    __attribute__((host)) __attribute__((device))
    typename thrust::detail::enable_if_pointer_is_convertible<
      OtherPointer,
      pointer,
      derived_type &
    >::type
    operator=(const OtherPointer &other);



    __attribute__((host)) __attribute__((device))
    Element *get() const;
};

}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pointer.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pointer.inl"
namespace thrust
{


template<typename Element, typename Tag, typename Reference, typename Derived>
  pointer<Element,Tag,Reference,Derived>
    ::pointer()
      : super_t(static_cast<Element*>(0))
{}


template<typename Element, typename Tag, typename Reference, typename Derived>
  template<typename OtherElement>
    pointer<Element,Tag,Reference,Derived>
      ::pointer(OtherElement *other)
        : super_t(other)
{}


template<typename Element, typename Tag, typename Reference, typename Derived>
  template<typename OtherPointer>
    pointer<Element,Tag,Reference,Derived>
      ::pointer(const OtherPointer &other,
                typename thrust::detail::enable_if_pointer_is_convertible<
                  OtherPointer,
                  pointer<Element,Tag,Reference,Derived>
                 >::type *)
        : super_t(thrust::detail::pointer_traits<OtherPointer>::get(other))
{}


template<typename Element, typename Tag, typename Reference, typename Derived>
  template<typename OtherPointer>
    typename thrust::detail::enable_if_pointer_is_convertible<
      OtherPointer,
      pointer<Element,Tag,Reference,Derived>,
      typename pointer<Element,Tag,Reference,Derived>::derived_type &
    >::type
      pointer<Element,Tag,Reference,Derived>
        ::operator=(const OtherPointer &other)
{
  super_t::base_reference() = thrust::detail::pointer_traits<OtherPointer>::get(other);
  return static_cast<derived_type&>(*this);
}


template<typename Element, typename Tag, typename Reference, typename Derived>
  typename pointer<Element,Tag,Reference,Derived>::super_t::reference
    pointer<Element,Tag,Reference,Derived>
      ::dereference() const
{
  return typename super_t::reference(static_cast<const derived_type&>(*this));
}


template<typename Element, typename Tag, typename Reference, typename Derived>
  Element *pointer<Element,Tag,Reference,Derived>
    ::get() const
{
  return super_t::base();
}


namespace detail
{
# 139 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pointer.inl"
}


}
# 184 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/pointer.h" 2
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.h"
       







namespace thrust
{
namespace detail
{

template<typename> struct is_wrapped_reference;

}
# 41 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.h"
template<typename Element, typename Pointer, typename Derived>
  class reference
{
  private:
    typedef typename thrust::detail::eval_if<
      thrust::detail::is_same<Derived,use_default>::value,
      thrust::detail::identity_<reference>,
      thrust::detail::identity_<Derived>
    >::type derived_type;



    struct wrapped_reference_hint {};
    template<typename> friend struct thrust::detail::is_wrapped_reference;

  public:
    typedef Pointer pointer;
    typedef typename thrust::detail::remove_const<Element>::type value_type;

    __attribute__((host)) __attribute__((device))
    explicit reference(const pointer &ptr);

    template<typename OtherElement, typename OtherPointer, typename OtherDerived>
    __attribute__((host)) __attribute__((device))
    reference(const reference<OtherElement,OtherPointer,OtherDerived> &other,
              typename thrust::detail::enable_if_convertible<
                typename reference<OtherElement,OtherPointer,OtherDerived>::pointer,
                pointer
              >::type * = 0);

    __attribute__((host)) __attribute__((device))
    derived_type &operator=(const reference &other);


    template<typename OtherElement, typename OtherPointer, typename OtherDerived>
    __attribute__((host)) __attribute__((device))
    derived_type &operator=(const reference<OtherElement,OtherPointer,OtherDerived> &other);

    __attribute__((host)) __attribute__((device))
    derived_type &operator=(const value_type &x);

    __attribute__((host)) __attribute__((device))
    pointer operator&() const;

    __attribute__((host)) __attribute__((device))
    operator value_type () const;

    __attribute__((host)) __attribute__((device))
    void swap(derived_type &other);

    derived_type &operator++();

    value_type operator++(int);


    derived_type &operator+=(const value_type &rhs);

    derived_type &operator--();

    value_type operator--(int);


    derived_type &operator-=(const value_type &rhs);


    derived_type &operator*=(const value_type &rhs);


    derived_type &operator/=(const value_type &rhs);


    derived_type &operator%=(const value_type &rhs);


    derived_type &operator<<=(const value_type &rhs);


    derived_type &operator>>=(const value_type &rhs);


    derived_type &operator&=(const value_type &rhs);


    derived_type &operator|=(const value_type &rhs);


    derived_type &operator^=(const value_type &rhs);

  private:
    const pointer m_ptr;


    template <typename OtherElement, typename OtherPointer, typename OtherDerived> friend class reference;

    template<typename System>
    __attribute__((host)) __attribute__((device))
    inline value_type strip_const_get_value(const System &system) const;

    template<typename OtherPointer>
    __attribute__((host)) __attribute__((device))
    inline void assign_from(OtherPointer src);


    template<typename System1, typename System2, typename OtherPointer>
    inline __attribute__((host)) __attribute__((device))
    void assign_from(System1 *system1, System2 *system2, OtherPointer src);

    template<typename System, typename OtherPointer>
    __attribute__((host)) __attribute__((device))
    inline void strip_const_assign_value(const System &system, OtherPointer src);


    template<typename System>
    inline __attribute__((host)) __attribute__((device))
    void swap(System *system, derived_type &other);


    template<typename System>
    inline __attribute__((host)) __attribute__((device))
    value_type convert_to_value_type(System *system) const;
};


}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.inl" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/memory.h" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/memory.h"
       
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/memory.h"
namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{

template<typename DerivedPolicy, typename Size>
__attribute__((host)) __attribute__((device))
void malloc(thrust::execution_policy<DerivedPolicy> &, Size);

template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
thrust::pointer<T,DerivedPolicy> malloc(thrust::execution_policy<DerivedPolicy> &s, std::size_t n);

template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void free(thrust::execution_policy<DerivedPolicy> &, Pointer);

template<typename Pointer1, typename Pointer2>
__attribute__((host)) __attribute__((device))
void assign_value(tag, Pointer1, Pointer2);

template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void get_value(thrust::execution_policy<DerivedPolicy> &, Pointer);

template<typename Pointer1, typename Pointer2>
__attribute__((host)) __attribute__((device))
void iter_swap(tag, Pointer1, Pointer2);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/memory.inl" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/memory.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/malloc_and_free.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/malloc_and_free.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/malloc_and_free.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/malloc_and_free.h"
       



# 1 "/usr/include/c++/4.8/cstdlib" 1 3
# 39 "/usr/include/c++/4.8/cstdlib" 3
       
# 40 "/usr/include/c++/4.8/cstdlib" 3
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/malloc_and_free.h" 2


namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{


template<typename DerivedPolicy>
inline __attribute__((host)) __attribute__((device))
void *malloc(execution_policy<DerivedPolicy> &, std::size_t n)
{

  return std::malloc(n);



}


template<typename DerivedPolicy, typename Pointer>
inline __attribute__((host)) __attribute__((device))
void free(sequential::execution_policy<DerivedPolicy> &, Pointer ptr)
{

  std::free(thrust::raw_pointer_cast(ptr));

}


}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/malloc_and_free.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/malloc_and_free.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/malloc_and_free.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/malloc_and_free.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/malloc_and_free.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/malloc_and_free.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/bad_alloc.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/bad_alloc.h"
       




namespace thrust
{
namespace system
{
namespace detail
{


class bad_alloc
  : public std::bad_alloc
{
  public:
    inline bad_alloc(const std::string &w)
      : std::bad_alloc(), m_what()
    {
      m_what = std::bad_alloc::what();
      m_what += ": ";
      m_what += w;
    }

    inline virtual ~bad_alloc(void) throw () {};

    inline virtual const char *what(void) const throw()
    {
      return m_what.c_str();
    }

  private:
    std::string m_what;
};

}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/malloc_and_free.h" 2

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/malloc_and_free.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/malloc_and_free.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/malloc_and_free.h"
namespace thrust
{

 #pragma hd_warning_disable
template<typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
pointer<void,DerivedPolicy> malloc(const thrust::detail::execution_policy_base<DerivedPolicy> &exec, std::size_t n)
{
  using thrust::system::detail::generic::malloc;


  void *raw_ptr = static_cast<void*>(thrust::raw_pointer_cast(malloc(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), n)));

  return pointer<void,DerivedPolicy>(raw_ptr);
}

 #pragma hd_warning_disable
template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
pointer<T,DerivedPolicy> malloc(const thrust::detail::execution_policy_base<DerivedPolicy> &exec, std::size_t n)
{
  using thrust::system::detail::generic::malloc;

  T *raw_ptr = static_cast<T*>(thrust::raw_pointer_cast(malloc<T>(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), n)));

  return pointer<T,DerivedPolicy>(raw_ptr);
}
# 71 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/malloc_and_free.h"
 #pragma hd_warning_disable
template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void free(const thrust::detail::execution_policy_base<DerivedPolicy> &exec, Pointer ptr)
{
  using thrust::system::detail::generic::free;

  free(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), ptr);
}




}
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/malloc_and_free.h" 2



namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{




template<typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
void *malloc(execution_policy<DerivedPolicy> &, std::size_t n)
{
  void *result = 0;
# 58 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/malloc_and_free.h"
  result = thrust::raw_pointer_cast(thrust::malloc(thrust::seq, n));


  return result;
}


template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void free(execution_policy<DerivedPolicy> &, Pointer ptr)
{




  thrust::free(thrust::seq, ptr);

}


}
}
}
}
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/malloc_and_free.h" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/memory.inl" 2



namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename DerivedPolicy, typename Size>
__attribute__((host)) __attribute__((device))
  void malloc(thrust::execution_policy<DerivedPolicy> &, Size)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<Size, false>::value) ) >)> thrust_static_assert_typedef_40 __attribute__((unused));
}


template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
  thrust::pointer<T,DerivedPolicy>
    malloc(thrust::execution_policy<DerivedPolicy> &exec, std::size_t n)
{
  thrust::pointer<void,DerivedPolicy> void_ptr = thrust::malloc(exec, sizeof(T) * n);

  return pointer<T,DerivedPolicy>(static_cast<T*>(void_ptr.get()));
}


template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
  void free(thrust::execution_policy<DerivedPolicy> &, Pointer)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<Pointer, false>::value) ) >)> thrust_static_assert_typedef_60 __attribute__((unused));
}


template<typename DerivedPolicy, typename Pointer1, typename Pointer2>
__attribute__((host)) __attribute__((device))
void assign_value(thrust::execution_policy<DerivedPolicy> &, Pointer1, Pointer2)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<Pointer1, false>::value) ) >)> thrust_static_assert_typedef_69 __attribute__((unused));
}


template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void get_value(thrust::execution_policy<DerivedPolicy> &, Pointer)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<Pointer, false>::value) ) >)> thrust_static_assert_typedef_78 __attribute__((unused));
}


template<typename Pointer1, typename Pointer2>
__attribute__((host)) __attribute__((device))
void iter_swap(tag, Pointer1, Pointer2)
{

  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<Pointer1, false>::value) ) >)> thrust_static_assert_typedef_87 __attribute__((unused));
}


}
}
}
}
# 72 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/memory.h" 2
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/get_value.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/get_value.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/get_value.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/get_value.h"
       





namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{


template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
  typename thrust::iterator_value<Pointer>::type
    get_value(sequential::execution_policy<DerivedPolicy> &, Pointer ptr)
{
  return *thrust::raw_pointer_cast(ptr);
}


}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/get_value.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/get_value.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/get_value.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/get_value.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/get_value.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/get_value.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/assign_value.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/assign_value.h"
       






namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{
# 77 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/assign_value.h"
template<typename DerivedPolicy, typename Pointer1, typename Pointer2>
inline __attribute__((host)) __attribute__((device))
  void assign_value(thrust::cuda::execution_policy<DerivedPolicy> &exec, Pointer1 dst, Pointer2 src)
{

  struct war_nvbugs_881631
  {
    __attribute__((host)) inline static void host_path(thrust::cuda::execution_policy<DerivedPolicy> &exec, Pointer1 dst, Pointer2 src)
    {
      thrust::copy(exec, src, src + 1, dst);
    }

    __attribute__((device)) inline static void device_path(thrust::cuda::execution_policy<DerivedPolicy> &, Pointer1 dst, Pointer2 src)
    {
      *thrust::raw_pointer_cast(dst) = *thrust::raw_pointer_cast(src);
    }
  };




  war_nvbugs_881631::device_path(exec,dst,src);

}
# 159 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/assign_value.h"
template<typename System1, typename System2, typename Pointer1, typename Pointer2>
inline __attribute__((host)) __attribute__((device))
  void assign_value(cross_system<System1,System2> &systems, Pointer1 dst, Pointer2 src)
{

  struct war_nvbugs_881631
  {
    __attribute__((host)) inline static void host_path(cross_system<System1,System2> &systems, Pointer1 dst, Pointer2 src)
    {


      cross_system<System2,System1> rotated_systems = systems.rotate();
      thrust::copy(rotated_systems, src, src + 1, dst);
    }

    __attribute__((device)) inline static void device_path(cross_system<System1,System2> &systems, Pointer1 dst, Pointer2 src)
    {


      thrust::cuda::tag cuda_tag;
      thrust::system::cuda::detail::assign_value(cuda_tag, dst, src);
    }
  };


  war_nvbugs_881631::device_path(systems,dst,src);



}





}
}
}
}
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/get_value.h" 2



namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


namespace
{


template<typename DerivedPolicy, typename Pointer>
inline __attribute__((host)) __attribute__((device))
  typename thrust::iterator_value<Pointer>::type
    get_value_msvc2005_war(execution_policy<DerivedPolicy> &exec, Pointer ptr)
{
  typedef typename thrust::iterator_value<Pointer>::type result_type;


  struct war_nvbugs_881631
  {
    __attribute__((host)) inline static result_type host_path(execution_policy<DerivedPolicy> &exec, Pointer ptr)
    {


      result_type result;

      thrust::host_system_tag host_tag;
      cross_system<thrust::host_system_tag, DerivedPolicy> systems(host_tag, exec);
      assign_value(systems, &result, ptr);

      return result;
    }

    __attribute__((device)) inline static result_type device_path(execution_policy<DerivedPolicy> &, Pointer ptr)
    {

      return *thrust::raw_pointer_cast(ptr);
    }
  };




  return war_nvbugs_881631::device_path(exec, ptr);

}


}


template<typename DerivedPolicy, typename Pointer>
inline __attribute__((host)) __attribute__((device))
  typename thrust::iterator_value<Pointer>::type
    get_value(execution_policy<DerivedPolicy> &exec, Pointer ptr)
{
  return get_value_msvc2005_war(exec,ptr);
}


}
}
}
}
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/get_value.h" 2
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/assign_value.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/assign_value.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/assign_value.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/assign_value.h"
       





namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{

template<typename DerivedPolicy, typename Pointer1, typename Pointer2>
__attribute__((host)) __attribute__((device))
  void assign_value(sequential::execution_policy<DerivedPolicy> &, Pointer1 dst, Pointer2 src)
{
  *thrust::raw_pointer_cast(dst) = *thrust::raw_pointer_cast(src);
}

}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/assign_value.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/assign_value.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/assign_value.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/assign_value.h" 2
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/iter_swap.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/iter_swap.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/iter_swap.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/iter_swap.h"
       






namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{


template<typename Pointer1, typename Pointer2>
__attribute__((host)) __attribute__((device))
  void iter_swap(tag, Pointer1 a, Pointer2 b)
{
  using thrust::swap;
  swap(*thrust::raw_pointer_cast(a), *thrust::raw_pointer_cast(b));
}


}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/iter_swap.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/iter_swap.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/iter_swap.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/iter_swap.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/iter_swap.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/iter_swap.h"
       



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/swap.h" 1
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/swap.h"
       
# 30 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/swap.h"
namespace thrust
{
# 65 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/swap.h"
template<typename Assignable1, typename Assignable2>
__attribute__((host)) __attribute__((device))
inline void swap(Assignable1 &a, Assignable2 &b);
# 127 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/swap.h"
template<typename DerivedPolicy,
         typename ForwardIterator1,
         typename ForwardIterator2>
__attribute__((host)) __attribute__((device))
  ForwardIterator2 swap_ranges(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                               ForwardIterator1 first1,
                               ForwardIterator1 last1,
                               ForwardIterator2 first2);
# 177 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/swap.h"
template<typename ForwardIterator1,
         typename ForwardIterator2>
  ForwardIterator2 swap_ranges(ForwardIterator1 first1,
                               ForwardIterator1 last1,
                               ForwardIterator2 first2);






}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap.inl" 1
# 20 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap_ranges.inl" 1
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap_ranges.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/swap_ranges.h" 1
# 18 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/swap_ranges.h"
       




namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{

template<typename DerivedPolicy,
         typename ForwardIterator1,
         typename ForwardIterator2>
__attribute__((host)) __attribute__((device))
  ForwardIterator2 swap_ranges(thrust::execution_policy<DerivedPolicy> &exec,
                               ForwardIterator1 first1,
                               ForwardIterator1 last1,
                               ForwardIterator2 first2);

}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/swap_ranges.inl" 1
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/swap_ranges.inl"
namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{
namespace detail
{




struct swap_pair_elements
{
  template <typename Tuple>
  __attribute__((host)) __attribute__((device))
  void operator()(Tuple t)
  {

    using thrust::swap;
    swap(thrust::get<0>(t), thrust::get<1>(t));
  }
};


}


template<typename DerivedPolicy,
         typename ForwardIterator1,
         typename ForwardIterator2>
__attribute__((host)) __attribute__((device))
  ForwardIterator2 swap_ranges(thrust::execution_policy<DerivedPolicy> &exec,
                               ForwardIterator1 first1,
                               ForwardIterator1 last1,
                               ForwardIterator2 first2)
{
  typedef thrust::tuple<ForwardIterator1,ForwardIterator2> IteratorTuple;
  typedef thrust::zip_iterator<IteratorTuple> ZipIterator;

  ZipIterator result = thrust::for_each(exec,
                                        thrust::make_zip_iterator(thrust::make_tuple(first1, first2)),
                                        thrust::make_zip_iterator(thrust::make_tuple(last1, first2)),
                                        detail::swap_pair_elements());
  return thrust::get<1>(result.get_iterator_tuple());
}


}
}
}
}
# 47 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/swap_ranges.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap_ranges.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/swap_ranges.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/swap_ranges.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/swap_ranges.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/swap_ranges.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/swap_ranges.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/swap_ranges.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/swap_ranges.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/swap_ranges.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/swap_ranges.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/swap_ranges.h"
       
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/swap_ranges.h" 2
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap_ranges.inl" 2

namespace thrust
{


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename ForwardIterator1,
         typename ForwardIterator2>
__attribute__((host)) __attribute__((device))
  ForwardIterator2 swap_ranges(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                               ForwardIterator1 first1,
                               ForwardIterator1 last1,
                               ForwardIterator2 first2)
{
  using thrust::system::detail::generic::swap_ranges;
  return swap_ranges(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2);
}


template<typename ForwardIterator1,
         typename ForwardIterator2>
  ForwardIterator2 swap_ranges(ForwardIterator1 first1,
                               ForwardIterator1 last1,
                               ForwardIterator2 first2)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<ForwardIterator1>::type System1;
  typedef typename thrust::iterator_system<ForwardIterator2>::type System2;

  System1 system1;
  System2 system2;

  return thrust::swap_ranges(select_system(system1,system2), first1, last1, first2);
}


}
# 21 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/swap.inl" 2
# 191 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/swap.h" 2
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/iter_swap.h" 2

namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename Pointer1, typename Pointer2>
inline __attribute__((host)) __attribute__((device))
void iter_swap(tag, Pointer1 a, Pointer2 b)
{

  struct war_nvbugs_881631
  {
    __attribute__((host)) inline static void host_path(Pointer1 a, Pointer2 b)
    {
      thrust::swap_ranges(a, a + 1, b);
    }

    __attribute__((device)) inline static void device_path(Pointer1 a, Pointer2 b)
    {
      using thrust::swap;
      swap(*thrust::raw_pointer_cast(a),
           *thrust::raw_pointer_cast(b));
    }
  };




  return war_nvbugs_881631::device_path(a,b);

}


}
}
}
}
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/iter_swap.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.inl" 2


namespace thrust
{


template<typename Element, typename Pointer, typename Derived>
  template<typename OtherElement, typename OtherPointer, typename OtherDerived>
    reference<Element,Pointer,Derived>
      ::reference(const reference<OtherElement,OtherPointer,OtherDerived> &other,
                  typename thrust::detail::enable_if_convertible<
                    typename reference<OtherElement,OtherPointer,OtherDerived>::pointer,
                    pointer
                  >::type *)
        : m_ptr(other.m_ptr)
{}


template<typename Element, typename Pointer, typename Derived>
  reference<Element,Pointer,Derived>
    ::reference(const pointer &ptr)
      : m_ptr(ptr)
{}


template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::pointer
    reference<Element,Pointer,Derived>
      ::operator&() const
{
  return m_ptr;
}


template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator=(const value_type &v)
{
  assign_from(&v);
  return static_cast<derived_type&>(*this);
}


template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator=(const reference &other)
{
  assign_from(&other);
  return static_cast<derived_type&>(*this);
}


template<typename Element, typename Pointer, typename Derived>
  template<typename OtherElement, typename OtherPointer, typename OtherDerived>
    typename reference<Element,Pointer,Derived>::derived_type &
      reference<Element,Pointer,Derived>
        ::operator=(const reference<OtherElement,OtherPointer,OtherDerived> &other)
{
  assign_from(&other);
  return static_cast<derived_type&>(*this);
}


template<typename Element, typename Pointer, typename Derived>
  template<typename System>
    typename reference<Element,Pointer,Derived>::value_type
      reference<Element,Pointer,Derived>
        ::convert_to_value_type(System *system) const
{
  using thrust::system::detail::generic::select_system;
  return strip_const_get_value(select_system(*system));
}


template<typename Element, typename Pointer, typename Derived>
  reference<Element,Pointer,Derived>
    ::operator typename reference<Element,Pointer,Derived>::value_type () const
{
  typedef typename thrust::iterator_system<pointer>::type System;





  System *system = 0;

  return convert_to_value_type(system);
}


template<typename Element, typename Pointer, typename Derived>
  template<typename System>
    typename reference<Element,Pointer,Derived>::value_type
      reference<Element,Pointer,Derived>
        ::strip_const_get_value(const System &system) const
{
  System &non_const_system = const_cast<System&>(system);

  using thrust::system::detail::generic::get_value;

  return get_value(thrust::detail::derived_cast(non_const_system), m_ptr);
}


template<typename Element, typename Pointer, typename Derived>
  template<typename System1, typename System2, typename OtherPointer>
    void reference<Element,Pointer,Derived>
      ::assign_from(System1 *system1, System2 *system2, OtherPointer src)
{
  using thrust::system::detail::generic::select_system;

  strip_const_assign_value(select_system(*system1, *system2), src);
}


template<typename Element, typename Pointer, typename Derived>
  template<typename OtherPointer>
    void reference<Element,Pointer,Derived>
      ::assign_from(OtherPointer src)
{
  typedef typename thrust::iterator_system<pointer>::type System1;
  typedef typename thrust::iterator_system<OtherPointer>::type System2;





  System1 *system1 = 0;
  System2 *system2 = 0;

  assign_from(system1, system2, src);
}


template<typename Element, typename Pointer, typename Derived>
  template<typename System, typename OtherPointer>
    void reference<Element,Pointer,Derived>
      ::strip_const_assign_value(const System &system, OtherPointer src)
{
  System &non_const_system = const_cast<System&>(system);

  using thrust::system::detail::generic::assign_value;

  assign_value(thrust::detail::derived_cast(non_const_system), m_ptr, src);
}


template<typename Element, typename Pointer, typename Derived>
  template<typename System>
    void reference<Element,Pointer,Derived>
      ::swap(System *system, derived_type &other)
{
  using thrust::system::detail::generic::select_system;
  using thrust::system::detail::generic::iter_swap;

  iter_swap(select_system(*system, *system), m_ptr, other.m_ptr);
}


template<typename Element, typename Pointer, typename Derived>
  void reference<Element,Pointer,Derived>
    ::swap(derived_type &other)
{
  typedef typename thrust::iterator_system<pointer>::type System;





  System *system = 0;

  swap(system, other);
}


template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator++(void)
{
  value_type temp = *this;
  ++temp;
  *this = temp;
  return static_cast<derived_type&>(*this);
}


template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::value_type
    reference<Element,Pointer,Derived>
      ::operator++(int)
{
  value_type temp = *this;
  value_type result = temp++;
  *this = temp;
  return result;
}


template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator+=(const value_type &rhs)
{
  value_type temp = *this;
  temp += rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator--(void)
{
  value_type temp = *this;
  --temp;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::value_type
    reference<Element,Pointer,Derived>
      ::operator--(int)
{
  value_type temp = *this;
  value_type result = temp--;
  *this = temp;
  return result;
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator-=(const value_type &rhs)
{
  value_type temp = *this;
  temp -= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator*=(const value_type &rhs)
{
  value_type temp = *this;
  temp *= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator/=(const value_type &rhs)
{
  value_type temp = *this;
  temp /= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator%=(const value_type &rhs)
{
  value_type temp = *this;
  temp %= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator<<=(const value_type &rhs)
{
  value_type temp = *this;
  temp <<= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator>>=(const value_type &rhs)
{
  value_type temp = *this;
  temp >>= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator&=(const value_type &rhs)
{
  value_type temp = *this;
  temp &= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator|=(const value_type &rhs)
{
  value_type temp = *this;
  temp |= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}

template<typename Element, typename Pointer, typename Derived>
  typename reference<Element,Pointer,Derived>::derived_type &
    reference<Element,Pointer,Derived>
      ::operator^=(const value_type &rhs)
{
  value_type temp = *this;
  temp ^= rhs;
  *this = temp;
  return static_cast<derived_type&>(*this);
}


}
# 167 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/reference.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_buffer.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_buffer.h"
       






# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/temporary_buffer.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/temporary_buffer.h"
       






namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
  thrust::pair<thrust::pointer<T,DerivedPolicy>, typename thrust::pointer<T,DerivedPolicy>::difference_type>
    get_temporary_buffer(thrust::execution_policy<DerivedPolicy> &exec, typename thrust::pointer<T,DerivedPolicy>::difference_type n);


template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
  void return_temporary_buffer(thrust::execution_policy<DerivedPolicy> &exec, Pointer p);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/temporary_buffer.inl" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/temporary_buffer.inl"
namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{


template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
  thrust::pair<thrust::pointer<T,DerivedPolicy>, typename thrust::pointer<T,DerivedPolicy>::difference_type>
    get_temporary_buffer(thrust::execution_policy<DerivedPolicy> &exec, typename thrust::pointer<T,DerivedPolicy>::difference_type n)
{
  thrust::pointer<T,DerivedPolicy> ptr = thrust::malloc<T>(exec, n);


  if(!ptr.get())
  {
    n = 0;
  }

  return thrust::make_pair(ptr, n);
}


template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
  void return_temporary_buffer(thrust::execution_policy<DerivedPolicy> &exec, Pointer p)
{
  thrust::free(exec, p);
}


}
}
}
}
# 51 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/temporary_buffer.h" 2
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_buffer.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/temporary_buffer.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/temporary_buffer.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/temporary_buffer.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/temporary_buffer.h"
       
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/temporary_buffer.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/temporary_buffer.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/temporary_buffer.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/temporary_buffer.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_buffer.h" 2

namespace thrust
{
namespace detail
{
namespace get_temporary_buffer_detail
{


template<typename T, typename DerivedPolicy, typename Pair>
__attribute__((host)) __attribute__((device))
  thrust::pair<thrust::pointer<T,DerivedPolicy>, typename thrust::pointer<T,DerivedPolicy>::difference_type>
    down_cast_pair(Pair p)
{

  thrust::pointer<T,DerivedPolicy> ptr = thrust::pointer<T,DerivedPolicy>(static_cast<T*>(thrust::raw_pointer_cast(p.first)));

  typedef thrust::pair<thrust::pointer<T,DerivedPolicy>, typename thrust::pointer<T,DerivedPolicy>::difference_type> result_type;
  return result_type(ptr, p.second);
}


}
}


 #pragma hd_warning_disable
template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
  thrust::pair<thrust::pointer<T,DerivedPolicy>, typename thrust::pointer<T,DerivedPolicy>::difference_type>
    get_temporary_buffer(const thrust::detail::execution_policy_base<DerivedPolicy> &exec, typename thrust::pointer<T,DerivedPolicy>::difference_type n)
{
  using thrust::system::detail::generic::get_temporary_buffer;

  return thrust::detail::get_temporary_buffer_detail::down_cast_pair<T,DerivedPolicy>(get_temporary_buffer<T>(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), n));
}


 #pragma hd_warning_disable
template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
  void return_temporary_buffer(const thrust::detail::execution_policy_base<DerivedPolicy> &exec, Pointer p)
{
  using thrust::system::detail::generic::return_temporary_buffer;

  return return_temporary_buffer(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), p);
}


}
# 30 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h" 2

namespace thrust
{
# 303 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
pointer<void,DerivedPolicy> malloc(const thrust::detail::execution_policy_base<DerivedPolicy> &system, std::size_t n);
# 341 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
pointer<T,DerivedPolicy> malloc(const thrust::detail::execution_policy_base<DerivedPolicy> &system, std::size_t n);
# 394 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
thrust::pair<thrust::pointer<T,DerivedPolicy>, typename thrust::pointer<T,DerivedPolicy>::difference_type>
get_temporary_buffer(const thrust::detail::execution_policy_base<DerivedPolicy> &system, typename thrust::pointer<T,DerivedPolicy>::difference_type n);
# 437 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void free(const thrust::detail::execution_policy_base<DerivedPolicy> &system, Pointer ptr);
# 483 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void return_temporary_buffer(const thrust::detail::execution_policy_base<DerivedPolicy> &system, Pointer p);
# 499 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename Pointer>
__attribute__((host)) __attribute__((device))
inline typename thrust::detail::pointer_traits<Pointer>::raw_pointer
  raw_pointer_cast(const Pointer &ptr);
# 516 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename T>
__attribute__((host)) __attribute__((device))
inline typename detail::raw_reference<T>::type
  raw_reference_cast(T &ref);
# 533 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename T>
__attribute__((host)) __attribute__((device))
inline typename detail::raw_reference<const T>::type
  raw_reference_cast(const T &ref);





}
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/temporary_allocator.h" 2


namespace thrust
{
namespace detail
{





template<typename T, typename System>
  class temporary_allocator
    : public thrust::detail::tagged_allocator<
               T, System, thrust::pointer<T,System>
             >
{
  private:
    typedef thrust::detail::tagged_allocator<
      T, System, thrust::pointer<T,System>
    > super_t;

    System &m_system;

  public:
    typedef typename super_t::pointer pointer;
    typedef typename super_t::size_type size_type;

    inline __attribute__((host)) __attribute__((device))
    temporary_allocator(const temporary_allocator &other) :
      super_t(),
      m_system(other.m_system)
    {}

    inline __attribute__((host)) __attribute__((device))
    explicit temporary_allocator(thrust::execution_policy<System> &system) :
      super_t(),
      m_system(thrust::detail::derived_cast(system))
    {}

    __attribute__((host)) __attribute__((device))
    pointer allocate(size_type cnt);

    __attribute__((host)) __attribute__((device))
    void deallocate(pointer p, size_type n);

    __attribute__((host)) __attribute__((device))
    inline System &system()
    {
      return m_system;
    }

  private:
    typedef thrust::pair<pointer, size_type> pointer_and_size;
};


}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/temporary_allocator.inl" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/temporary_allocator.inl"
# 1 "/usr/include/c++/4.8/cassert" 1 3
# 41 "/usr/include/c++/4.8/cassert" 3
       
# 42 "/usr/include/c++/4.8/cassert" 3

# 1 "/usr/include/assert.h" 1 3 4
# 43 "/usr/include/c++/4.8/cassert" 2 3
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/temporary_allocator.inl" 2

namespace thrust
{
namespace detail
{


template<typename T, typename System>
__attribute__((host)) __attribute__((device))
  typename temporary_allocator<T,System>::pointer
    temporary_allocator<T,System>
      ::allocate(typename temporary_allocator<T,System>::size_type cnt)
{
  pointer_and_size result = thrust::get_temporary_buffer<T>(system(), cnt);


  if(result.second < cnt)
  {


    deallocate(result.first, cnt);




    thrust::system::cuda::detail::terminate();

  }

  return result.first;
}


template<typename T, typename System>
__attribute__((host)) __attribute__((device))
  void temporary_allocator<T,System>
    ::deallocate(typename temporary_allocator<T,System>::pointer p, typename temporary_allocator<T,System>::size_type n)
{
  return thrust::return_temporary_buffer(system(), p);
}


}
}
# 85 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/temporary_allocator.h" 2
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.h" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/no_throw_allocator.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/no_throw_allocator.h"
       



namespace thrust
{
namespace detail
{

template<typename BaseAllocator>
  struct no_throw_allocator : BaseAllocator
{
  private:
    typedef BaseAllocator super_t;

  public:
    inline __attribute__((host)) __attribute__((device))
    no_throw_allocator(const BaseAllocator &other = BaseAllocator())
      : super_t(other)
    {}

    template<typename U>
      struct rebind
    {
      typedef no_throw_allocator<typename super_t::template rebind<U>::other> other;
    };

    __attribute__((host)) __attribute__((device))
    void deallocate(typename super_t::pointer p, typename super_t::size_type n)
    {
# 57 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/allocator/no_throw_allocator.h"
      super_t::deallocate(p, n);

    }

    inline __attribute__((host)) __attribute__((device))
    bool operator==(no_throw_allocator const &other) { return super_t::operator==(other); }

    inline __attribute__((host)) __attribute__((device))
    bool operator!=(no_throw_allocator const &other) { return super_t::operator!=(other); }
};

}
}
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.h" 2


namespace thrust
{
namespace detail
{


template<typename T, typename System>
  class temporary_array
    : public contiguous_storage<
               T,
               no_throw_allocator<
                 temporary_allocator<T,System>
               >
             >
{
  private:
    typedef contiguous_storage<
      T,
      no_throw_allocator<
        temporary_allocator<T,System>
      >
    > super_t;


    typedef no_throw_allocator<temporary_allocator<T,System> > alloc_type;

  public:
    typedef typename super_t::size_type size_type;

    __attribute__((host)) __attribute__((device))
    temporary_array(thrust::execution_policy<System> &system);

    __attribute__((host)) __attribute__((device))
    temporary_array(thrust::execution_policy<System> &system, size_type n);


    __attribute__((host)) __attribute__((device))
    temporary_array(int uninit, thrust::execution_policy<System> &system, size_type n);

    template<typename InputIterator>
    __attribute__((host)) __attribute__((device))
    temporary_array(thrust::execution_policy<System> &system,
                    InputIterator first,
                    size_type n);

    template<typename InputIterator, typename InputSystem>
    __attribute__((host)) __attribute__((device))
    temporary_array(thrust::execution_policy<System> &system,
                    thrust::execution_policy<InputSystem> &input_system,
                    InputIterator first,
                    size_type n);

    template<typename InputIterator>
    __attribute__((host)) __attribute__((device))
    temporary_array(thrust::execution_policy<System> &system,
                    InputIterator first,
                    InputIterator last);

    template<typename InputSystem, typename InputIterator>
    __attribute__((host)) __attribute__((device))
    temporary_array(thrust::execution_policy<System> &system,
                    thrust::execution_policy<InputSystem> &input_system,
                    InputIterator first,
                    InputIterator last);

    __attribute__((host)) __attribute__((device))
    ~temporary_array();
};



template<typename Iterator, typename System>
  class tagged_iterator_range
{
  public:
    typedef thrust::detail::tagged_iterator<Iterator,System> iterator;

    template<typename Ignored1, typename Ignored2>
    tagged_iterator_range(const Ignored1 &, const Ignored2 &, Iterator first, Iterator last)
      : m_begin(first),
        m_end(last)
    {}

    iterator begin(void) const { return m_begin; }
    iterator end(void) const { return m_end; }

  private:
    iterator m_begin, m_end;
};





template<typename Iterator, typename FromSystem, typename ToSystem>
  struct move_to_system_base
    : public eval_if<
        is_convertible<
          FromSystem,
          ToSystem
        >::value,
        identity_<
          tagged_iterator_range<Iterator,ToSystem>
        >,
        identity_<
          temporary_array<
            typename thrust::iterator_value<Iterator>::type,
            ToSystem
          >
        >
      >
{};


template<typename Iterator, typename FromSystem, typename ToSystem>
  class move_to_system
    : public move_to_system_base<
        Iterator,
        FromSystem,
        ToSystem
      >::type
{
  typedef typename move_to_system_base<Iterator,FromSystem,ToSystem>::type super_t;

  public:
    move_to_system(thrust::execution_policy<FromSystem> &from_system,
                   thrust::execution_policy<ToSystem> &to_system,
                   Iterator first,
                   Iterator last)
      : super_t(to_system, from_system, first, last) {}
};


}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.inl" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.inl"
namespace thrust
{

namespace detail
{
namespace temporary_array_detail
{


template<typename T> struct avoid_initialization : thrust::detail::has_trivial_copy_constructor<T> {};


template<typename T, typename TemporaryArray, typename Size>
__attribute__((host)) __attribute__((device))
typename thrust::detail::enable_if<
  avoid_initialization<T>::value
>::type
  construct_values(TemporaryArray &,
                   Size)
{

}


template<typename T, typename TemporaryArray, typename Size>
__attribute__((host)) __attribute__((device))
typename thrust::detail::disable_if<
  avoid_initialization<T>::value
>::type
  construct_values(TemporaryArray &a,
                   Size n)
{
  a.default_construct_n(a.begin(), n);
}


}


template<typename T, typename System>
__attribute__((host)) __attribute__((device))
  temporary_array<T,System>
    ::temporary_array(thrust::execution_policy<System> &system)
      :super_t(alloc_type(temporary_allocator<T,System>(system)))
{
}


template<typename T, typename System>
__attribute__((host)) __attribute__((device))
  temporary_array<T,System>
    ::temporary_array(thrust::execution_policy<System> &system, size_type n)
      :super_t(n, alloc_type(temporary_allocator<T,System>(system)))
{
  temporary_array_detail::construct_values<T>(*this, n);
}


template<typename T, typename System>
__attribute__((host)) __attribute__((device))
  temporary_array<T,System>
    ::temporary_array(int, thrust::execution_policy<System> &system, size_type n)
      :super_t(n, alloc_type(temporary_allocator<T,System>(system)))
{

  ;
}


template<typename T, typename System>
  template<typename InputIterator>
  __attribute__((host)) __attribute__((device))
    temporary_array<T,System>
      ::temporary_array(thrust::execution_policy<System> &system,
                        InputIterator first,
                        size_type n)
        : super_t(alloc_type(temporary_allocator<T,System>(system)))
{
  super_t::allocate(n);

  super_t::uninitialized_copy_n(system, first, n, super_t::begin());
}


template<typename T, typename System>
  template<typename InputIterator, typename InputSystem>
  __attribute__((host)) __attribute__((device))
    temporary_array<T,System>
      ::temporary_array(thrust::execution_policy<System> &system,
                        thrust::execution_policy<InputSystem> &input_system,
                        InputIterator first,
                        size_type n)
        : super_t(alloc_type(temporary_allocator<T,System>(system)))
{
  super_t::allocate(n);

  super_t::uninitialized_copy_n(input_system, first, n, super_t::begin());
}


template<typename T, typename System>
  template<typename InputIterator>
  __attribute__((host)) __attribute__((device))
    temporary_array<T,System>
      ::temporary_array(thrust::execution_policy<System> &system,
                        InputIterator first,
                        InputIterator last)
        : super_t(alloc_type(temporary_allocator<T,System>(system)))
{
  super_t::allocate(thrust::distance(first,last));

  super_t::uninitialized_copy(system, first, last, super_t::begin());
}


template<typename T, typename System>
  template<typename InputSystem, typename InputIterator>
  __attribute__((host)) __attribute__((device))
    temporary_array<T,System>
      ::temporary_array(thrust::execution_policy<System> &system,
                        thrust::execution_policy<InputSystem> &input_system,
                        InputIterator first,
                        InputIterator last)
        : super_t(alloc_type(temporary_allocator<T,System>(system)))
{
  super_t::allocate(thrust::distance(first,last));

  super_t::uninitialized_copy(input_system, first, last, super_t::begin());
}


template<typename T, typename System>
__attribute__((host)) __attribute__((device))
  temporary_array<T,System>
    ::~temporary_array()
{

  super_t::destroy(super_t::begin(), super_t::end());
}

}

}
# 168 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/temporary_array.h" 2
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan_by_key.inl" 2



namespace thrust
{
namespace system
{
namespace detail
{
namespace generic
{
namespace detail
{


template <typename OutputType, typename HeadFlagType, typename AssociativeOperator>
struct segmented_scan_functor
{
  AssociativeOperator binary_op;

  typedef typename thrust::tuple<OutputType, HeadFlagType> result_type;

  __attribute__((host)) __attribute__((device))
  segmented_scan_functor(AssociativeOperator _binary_op) : binary_op(_binary_op) {}

  __attribute__((host)) __attribute__((device))
  result_type operator()(result_type a, result_type b)
  {
    return result_type(thrust::get<1>(b) ? thrust::get<0>(b) : binary_op(thrust::get<0>(a), thrust::get<0>(b)),
                       thrust::get<1>(a) | thrust::get<1>(b));
  }
};


}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result)
{
  typedef typename thrust::iterator_traits<InputIterator1>::value_type InputType1;
  return thrust::inclusive_scan_by_key(exec, first1, last1, first2, result, thrust::equal_to<InputType1>());
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred)
{
  typedef typename thrust::iterator_traits<OutputIterator>::value_type OutputType;
  return thrust::inclusive_scan_by_key(exec, first1, last1, first2, result, binary_pred, thrust::plus<OutputType>());
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op)
{
  typedef typename thrust::iterator_traits<OutputIterator>::value_type OutputType;
  typedef unsigned int HeadFlagType;

  const size_t n = last1 - first1;

  if(n != 0)
  {

    thrust::detail::temporary_array<HeadFlagType,DerivedPolicy> flags(exec, n);
    flags[0] = 1; thrust::transform(exec, first1, last1 - 1, first1 + 1, flags.begin() + 1, thrust::detail::not2(binary_pred));






    thrust::inclusive_scan(exec,
                           thrust::make_zip_iterator(thrust::make_tuple(first2, flags.begin())),
                           thrust::make_zip_iterator(thrust::make_tuple(first2, flags.begin())) + n,
                           thrust::make_zip_iterator(thrust::make_tuple(result, flags.begin())),
                           detail::segmented_scan_functor<OutputType, HeadFlagType, AssociativeOperator>(binary_op));
  }

  return result + n;
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result)
{
  typedef typename thrust::iterator_traits<OutputIterator>::value_type OutputType;
  return thrust::exclusive_scan_by_key(exec, first1, last1, first2, result, OutputType(0));
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init)
{
  typedef typename thrust::iterator_traits<InputIterator1>::value_type InputType1;
  return thrust::exclusive_scan_by_key(exec, first1, last1, first2, result, init, thrust::equal_to<InputType1>());
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred)
{
  typedef typename thrust::iterator_traits<OutputIterator>::value_type OutputType;
  return thrust::exclusive_scan_by_key(exec, first1, last1, first2, result, init, binary_pred, thrust::plus<OutputType>());
}


template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(thrust::execution_policy<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op)
{
  typedef typename thrust::iterator_traits<OutputIterator>::value_type OutputType;
  typedef unsigned int HeadFlagType;

  const size_t n = last1 - first1;

  if(n != 0)
  {
    InputIterator2 last2 = first2 + n;


    thrust::detail::temporary_array<HeadFlagType,DerivedPolicy> flags(exec, n);
    flags[0] = 1; thrust::transform(exec, first1, last1 - 1, first1 + 1, flags.begin() + 1, thrust::detail::not2(binary_pred));


    thrust::detail::temporary_array<OutputType,DerivedPolicy> temp(exec, n);
    thrust::replace_copy_if(exec, first2, last2 - 1, flags.begin() + 1, temp.begin() + 1, thrust::negate<HeadFlagType>(), init);
    temp[0] = init;






    thrust::inclusive_scan(exec,
                           thrust::make_zip_iterator(thrust::make_tuple(temp.begin(), flags.begin())),
                           thrust::make_zip_iterator(thrust::make_tuple(temp.begin(), flags.begin())) + n,
                           thrust::make_zip_iterator(thrust::make_tuple(result, flags.begin())),
                           detail::segmented_scan_functor<OutputType, HeadFlagType, AssociativeOperator>(binary_op));
  }

  return result + n;
}


}
}
}
}
# 144 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/generic/scan_by_key.h" 2
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/scan.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/scan.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/scan.h"
       
# 32 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/scan.h"
namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(sequential::execution_policy<DerivedPolicy> &,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                BinaryFunction binary_op)
{
# 66 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/scan.h"
  using namespace thrust::detail;

  typedef typename eval_if<
    has_result_type<BinaryFunction>::value,
    result_type<BinaryFunction>,
    eval_if<
      is_output_iterator<OutputIterator>::value,
      thrust::iterator_value<InputIterator>,
      thrust::iterator_value<OutputIterator>
    >
  >::type ValueType;


  thrust::detail::wrapped_function<
    BinaryFunction,
    ValueType
  > wrapped_binary_op(binary_op);

  if(first != last)
  {
    ValueType sum = *first;

    *result = sum;

    for(++first, ++result; first != last; ++first, ++result)
      *result = sum = wrapped_binary_op(sum,*first);
  }

  return result;
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(sequential::execution_policy<DerivedPolicy> &,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init,
                                BinaryFunction binary_op)
{
# 124 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/scan.h"
  using namespace thrust::detail;

  typedef typename eval_if<
    has_result_type<BinaryFunction>::value,
    result_type<BinaryFunction>,
    eval_if<
      is_output_iterator<OutputIterator>::value,
      thrust::iterator_value<InputIterator>,
      thrust::iterator_value<OutputIterator>
    >
  >::type ValueType;

  if(first != last)
  {
    ValueType tmp = *first;
    ValueType sum = init;

    *result = sum;
    sum = binary_op(sum, tmp);

    for(++first, ++result; first != last; ++first, ++result)
    {
      tmp = *first;
      *result = sum;
      sum = binary_op(sum, tmp);
    }
  }

  return result;
}


}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/scan.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/scan.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan.h" 2



# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/scan.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/scan.h"
       




namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
OutputIterator inclusive_scan(execution_policy<DerivedPolicy> &exec,
                              InputIterator first,
                              InputIterator last,
                              OutputIterator result,
                              AssociativeOperator binary_op);


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
OutputIterator exclusive_scan(execution_policy<DerivedPolicy> &exec,
                              InputIterator first,
                              InputIterator last,
                              OutputIterator result,
                              T init,
                              AssociativeOperator binary_op);


}
}
}
}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/scan.inl" 1
# 27 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/scan.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/decomposition.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/decomposition.h"
       




namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{


template<typename Size>
class trivial_decomposition
{
  public:
    typedef Size size_type;

    typedef thrust::pair<size_type,size_type> range;

    __attribute__((host)) __attribute__((device))
    trivial_decomposition()
      : m_n(0)
    {}

    __attribute__((host)) __attribute__((device))
    trivial_decomposition(size_type n)
      : m_n(n)
    {}

    __attribute__((host)) __attribute__((device))
    range operator[](size_type) const
    {
      return range(0, n());
    }

    __attribute__((host)) __attribute__((device))
    size_type size() const
    {
      return 1;
    }


    __attribute__((host)) __attribute__((device))
    size_type n() const
    {
      return m_n;
    }

  private:
    Size m_n;
};


template<typename Size>
__attribute__((host)) __attribute__((device))
trivial_decomposition<Size> make_trivial_decomposition(Size n)
{
  return trivial_decomposition<Size>(n);
}


template<typename Size>
class blocked_decomposition
{
  public:
    typedef Size size_type;

    typedef thrust::pair<size_type,size_type> range;

    __attribute__((host)) __attribute__((device))
    blocked_decomposition()
      : m_n(0),
        m_block_size(0),
        m_num_partitions(0)
    {}

    __attribute__((host)) __attribute__((device))
    blocked_decomposition(size_type n, Size block_size)
      : m_n(n),
        m_block_size(block_size),
        m_num_partitions((n + block_size - 1) / block_size)
    {}

    __attribute__((host)) __attribute__((device))
    range operator[](size_type i) const
    {
      size_type first = i * m_block_size;
      size_type last = thrust::min(m_n, first + m_block_size);

      return range(first, last);
    }

    __attribute__((host)) __attribute__((device))
    size_type size() const
    {
      return m_num_partitions;
    }


    __attribute__((host)) __attribute__((device))
    size_type n() const
    {
      return m_n;
    }

  private:
    Size m_n;
    Size m_block_size;
    Size m_num_partitions;
};


template<typename Size>
__attribute__((host)) __attribute__((device))
blocked_decomposition<Size> make_blocked_decomposition(Size n, Size block_size)
{
  return blocked_decomposition<Size>(n,block_size);
}


template<typename Size>
class uniform_decomposition
  : public blocked_decomposition<Size>
{
  private:
    typedef blocked_decomposition<Size> super_t;

  public:
    __attribute__((host)) __attribute__((device))
    uniform_decomposition()
      : super_t()
    {}

    __attribute__((host)) __attribute__((device))
    uniform_decomposition(Size n, Size num_partitions)
      : super_t(n, n / num_partitions)
    {}
};


template<typename Size>
__attribute__((host)) __attribute__((device))
uniform_decomposition<Size> make_uniform_decomposition(Size n, Size num_partitions)
{
  return uniform_decomposition<Size>(n,num_partitions);
}


template<typename Size>
class aligned_decomposition
{
  public:
    typedef Size size_type;

    typedef thrust::pair<size_type,size_type> range;

    __attribute__((host)) __attribute__((device))
    aligned_decomposition()
      : m_n(0),
        m_num_partitions(0),
        m_tile_size(0)
    {}

    __attribute__((host)) __attribute__((device))
    aligned_decomposition(Size n, Size num_partitions, Size aligned_size)
      : m_n(n),
        m_num_partitions(num_partitions),
        m_tile_size(aligned_size)
    {
      size_type num_tiles = (n + m_tile_size - 1) / m_tile_size;

      m_num_tiles_per_partition = num_tiles / size();
      m_last_partial_tile_size = num_tiles % size();
    }

    __attribute__((host)) __attribute__((device))
    range operator[](Size i) const
    {
      range result = range_in_tiles(i);
      result.first *= m_tile_size;
      result.second = thrust::min<size_type>(m_n, result.second * m_tile_size);
      return result;
    }

    __attribute__((host)) __attribute__((device))
    size_type size() const
    {
      return m_num_partitions;
    }


    __attribute__((host)) __attribute__((device))
    size_type n() const
    {
      return m_n;
    }

  private:
    __attribute__((host)) __attribute__((device))
    range range_in_tiles(size_type i) const
    {
      range result;

      result.first = m_num_tiles_per_partition * i;
      result.first += thrust::min<size_type>(i, m_last_partial_tile_size);

      result.second = result.first + m_num_tiles_per_partition + (i < m_last_partial_tile_size);

      return result;
    }

    size_type m_n;
    size_type m_num_partitions;
    size_type m_num_tiles_per_partition;
    size_type m_tile_size;
    size_type m_last_partial_tile_size;
};


template<typename Size>
__attribute__((host)) __attribute__((device))
aligned_decomposition<Size> make_aligned_decomposition(Size n, Size num_partitions, Size aligned_size)
{
  return aligned_decomposition<Size>(n,num_partitions,aligned_size);
}


}
}
}
}
# 28 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/scan.inl" 2



namespace thrust
{
namespace system
{
namespace cuda
{
namespace detail
{
namespace scan_detail
{


struct inclusive_scan_n
{
  template<typename ConcurrentGroup, typename InputIterator, typename Size, typename OutputIterator, typename T, typename BinaryFunction>
  __attribute__((device)) void operator()(ConcurrentGroup &this_group, InputIterator first, Size n, OutputIterator result, T init, BinaryFunction binary_op)
  {
    bulk_::inclusive_scan(this_group, first, first + n, result, init, binary_op);
  }


  template<typename ConcurrentGroup, typename InputIterator, typename Size, typename OutputIterator, typename BinaryFunction>
  __attribute__((device)) void operator()(ConcurrentGroup &this_group, InputIterator first, Size n, OutputIterator result, BinaryFunction binary_op)
  {
    bulk_::inclusive_scan(this_group, first, first + n, result, binary_op);
  }
};


struct exclusive_scan_n
{
  template<typename ConcurrentGroup, typename InputIterator, typename Size, typename OutputIterator, typename T, typename BinaryFunction>
  __attribute__((device)) void operator()(ConcurrentGroup &this_group, InputIterator first, Size n, OutputIterator result, T init, BinaryFunction binary_op)
  {
    bulk_::exclusive_scan(this_group, first, first + n, result, init, binary_op);
  }
};


struct inclusive_downsweep
{
  template<typename ConcurrentGroup, typename RandomAccessIterator1, typename Decomposition, typename RandomAccessIterator2, typename RandomAccessIterator3, typename BinaryFunction>
  __attribute__((device)) void operator()(ConcurrentGroup &this_group,
                             RandomAccessIterator1 first,
                             Decomposition decomp,
                             RandomAccessIterator2 carries_first,
                             RandomAccessIterator3 result,
                             BinaryFunction binary_op)
  {
    typename Decomposition::range range = decomp[this_group.index()];

    RandomAccessIterator1 last = first + range.second;
    first += range.first;
    result += range.first;

    if(this_group.index() == 0)
    {
      bulk_::inclusive_scan(this_group, first, last, result, binary_op);
    }
    else
    {
      typename thrust::iterator_value<RandomAccessIterator2>::type carry = carries_first[this_group.index() - 1];

      bulk_::inclusive_scan(this_group, first, last, result, carry, binary_op);
    }
  }
};


struct exclusive_downsweep
{
  template<typename ConcurrentGroup, typename RandomAccessIterator1, typename Decomposition, typename RandomAccessIterator2, typename RandomAccessIterator3, typename BinaryFunction>
  __attribute__((device)) void operator()(ConcurrentGroup &this_group,
                             RandomAccessIterator1 first,
                             Decomposition decomp,
                             RandomAccessIterator2 carries_first,
                             RandomAccessIterator3 result,
                             BinaryFunction binary_op)
  {
    typename Decomposition::range range = decomp[this_group.index()];

    RandomAccessIterator1 last = first + range.second;
    first += range.first;
    result += range.first;

    typename thrust::iterator_value<RandomAccessIterator2>::type carry = carries_first[this_group.index()];

    bulk_::exclusive_scan(this_group, first, last, result, carry, binary_op);
  }
};


template<typename T> struct accumulate_tiles_tuning_impl;


template<> struct accumulate_tiles_tuning_impl<int>
{

  static const int groupsize = 128;
  static const int grainsize = 9;
};


template<> struct accumulate_tiles_tuning_impl<double>
{

  static const int groupsize = 128;
  static const int grainsize = 9;
};



template<typename T>
  struct accumulate_tiles_tuning
{
  static const int groupsize =
    sizeof(T) <= sizeof(int) ? accumulate_tiles_tuning_impl<int>::groupsize :
    sizeof(T) <= 2 * sizeof(int) ? accumulate_tiles_tuning_impl<double>::groupsize :
    128;

  static const int grainsize =
    sizeof(T) <= sizeof(int) ? accumulate_tiles_tuning_impl<int>::grainsize :
    sizeof(T) <= 2 * sizeof(int) ? accumulate_tiles_tuning_impl<double>::grainsize :
    3;
};



template<typename T1, typename T2>
  struct accumulate_tiles_tuning<thrust::tuple<T1,T2> >
{

  static const int groupsize = 128;
  static const int grainsize = ((sizeof(T1) + sizeof(T2)) <= (2 * sizeof(double))) ? 5 : 3;
};





struct accumulate_tiles
{
  template<typename ConcurrentGroup, typename RandomAccessIterator1, typename Decomposition, typename RandomAccessIterator2, typename BinaryFunction>
  __attribute__((device)) void operator()(ConcurrentGroup &this_group,
                             RandomAccessIterator1 first,
                             Decomposition decomp,
                             RandomAccessIterator2 result,
                             BinaryFunction binary_op)
  {
    typedef typename thrust::iterator_value<RandomAccessIterator1>::type value_type;

    typename Decomposition::range range = decomp[this_group.index()];

    const bool commutative = thrust::detail::is_commutative<BinaryFunction>::value;


    value_type init = commutative ? first[range.second-1] : first[range.first];

    value_type sum = commutative ?
      bulk_::accumulate(this_group, first + range.first, first + range.second - 1, init, binary_op) :
      bulk_::accumulate(this_group, first + range.first + 1, first + range.second, init, binary_op);

    if(this_group.this_exec.index() == 0)
    {
      result[this_group.index()] = sum;
    }
  }
};


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
OutputIterator inclusive_scan(execution_policy<DerivedPolicy> &exec,
                              InputIterator first,
                              InputIterator last,
                              OutputIterator result,
                              AssociativeOperator binary_op)
{
  typedef typename bulk_::detail::scan_detail::scan_intermediate<
    InputIterator,
    OutputIterator,
    AssociativeOperator
  >::type intermediate_type;

  typedef typename thrust::iterator_difference<InputIterator>::type Size;

  Size n = last - first;

  cudaStream_t s = stream(thrust::detail::derived_cast(exec));

  const Size threshold_of_parallelism = 20000;

  if(n < threshold_of_parallelism)
  {
    const Size groupsize =
      sizeof(intermediate_type) <= 2 * sizeof(int) ? 512 :
      sizeof(intermediate_type) <= 4 * sizeof(int) ? 256 :
      128;

    typedef bulk_::detail::scan_detail::scan_buffer<groupsize,3,InputIterator,OutputIterator,AssociativeOperator> heap_type;
    Size heap_size = sizeof(heap_type);
    bulk_::async(bulk_::grid<groupsize,3>(1, heap_size, s), scan_detail::inclusive_scan_n(), bulk_::root.this_exec, first, n, result, binary_op);


    (void) groupsize;
  }
  else
  {
    const Size groupsize = scan_detail::accumulate_tiles_tuning<intermediate_type>::groupsize;
    const Size grainsize = scan_detail::accumulate_tiles_tuning<intermediate_type>::grainsize;

    const Size tile_size = groupsize * grainsize;
    Size num_tiles = (n + tile_size - 1) / tile_size;


    Size subscription = 20;
    Size num_groups = thrust::min<Size>(subscription * bulk_::concurrent_group<>::hardware_concurrency(), num_tiles);

    aligned_decomposition<Size> decomp(n, num_groups, tile_size);

    thrust::detail::temporary_array<intermediate_type,DerivedPolicy> carries(exec, num_groups);



    Size heap_size = groupsize * sizeof(intermediate_type);
    bulk_::async(bulk_::grid<groupsize,grainsize>(num_groups,heap_size,s), scan_detail::accumulate_tiles(), bulk_::root.this_exec, first, decomp, carries.begin(), binary_op);



    const Size groupsize2 = sizeof(intermediate_type) <= 2 * sizeof(int) ? 256 : 128;
    const Size grainsize2 = 3;
    typedef bulk_::detail::scan_detail::scan_buffer<groupsize2,grainsize2,InputIterator,OutputIterator,AssociativeOperator> heap_type2;
    heap_size = sizeof(heap_type2);
    bulk_::async(bulk_::grid<groupsize2,grainsize2>(1,heap_size,s), scan_detail::inclusive_scan_n(), bulk_::root.this_exec, carries.begin(), num_groups, carries.begin(), binary_op);


    typedef bulk_::detail::scan_detail::scan_buffer<
      groupsize,
      grainsize,
      InputIterator,OutputIterator,AssociativeOperator
    > heap_type3;
    heap_size = sizeof(heap_type3);
    bulk_::async(bulk_::grid<groupsize,grainsize>(num_groups,heap_size,s), scan_detail::inclusive_downsweep(), bulk_::root.this_exec, first, decomp, carries.begin(), result, binary_op);


    (void) groupsize2;
    (void) grainsize2;
  }

  return result + n;
}


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
OutputIterator exclusive_scan(execution_policy<DerivedPolicy> &exec,
                              InputIterator first,
                              InputIterator last,
                              OutputIterator result,
                              T init,
                              AssociativeOperator binary_op)
{
  typedef typename bulk_::detail::scan_detail::scan_intermediate<
    InputIterator,
    OutputIterator,
    AssociativeOperator
  >::type intermediate_type;

  typedef typename thrust::iterator_difference<InputIterator>::type Size;

  Size n = last - first;

  cudaStream_t s = stream(thrust::detail::derived_cast(exec));

  const Size threshold_of_parallelism = 20000;

  if(n < threshold_of_parallelism)
  {
    const Size groupsize =
      sizeof(intermediate_type) <= 2 * sizeof(int) ? 512 :
      sizeof(intermediate_type) <= 4 * sizeof(int) ? 256 :
      128;

    typedef bulk_::detail::scan_detail::scan_buffer<groupsize,3,InputIterator,OutputIterator,AssociativeOperator> heap_type;
    Size heap_size = sizeof(heap_type);
    bulk_::async(bulk_::grid<groupsize,3>(1, heap_size, s), scan_detail::exclusive_scan_n(), bulk_::root.this_exec, first, n, result, init, binary_op);


    (void) groupsize;
  }
  else
  {
    const Size groupsize = scan_detail::accumulate_tiles_tuning<intermediate_type>::groupsize;
    const Size grainsize = scan_detail::accumulate_tiles_tuning<intermediate_type>::grainsize;

    const Size tile_size = groupsize * grainsize;
    Size num_tiles = (n + tile_size - 1) / tile_size;


    Size subscription = 20;
    Size num_groups = thrust::min<Size>(subscription * bulk_::concurrent_group<>::hardware_concurrency(), num_tiles);

    aligned_decomposition<Size> decomp(n, num_groups, tile_size);

    thrust::detail::temporary_array<intermediate_type,DerivedPolicy> carries(exec, num_groups);



    Size heap_size = groupsize * sizeof(intermediate_type);
    bulk_::async(bulk_::grid<groupsize,grainsize>(num_groups,heap_size,s), scan_detail::accumulate_tiles(), bulk_::root.this_exec, first, decomp, carries.begin(), binary_op);



    const Size groupsize2 = sizeof(intermediate_type) <= 2 * sizeof(int) ? 256 : 128;
    const Size grainsize2 = 3;

    typedef bulk_::detail::scan_detail::scan_buffer<groupsize2,grainsize2,InputIterator,OutputIterator,AssociativeOperator> heap_type2;
    heap_size = sizeof(heap_type2);
    bulk_::async(bulk_::grid<groupsize2,grainsize2>(1,heap_size,s), scan_detail::exclusive_scan_n(), bulk_::root.this_exec, carries.begin(), num_groups, carries.begin(), init, binary_op);


    typedef bulk_::detail::scan_detail::scan_buffer<
      groupsize,
      grainsize,
      InputIterator,OutputIterator,AssociativeOperator
    > heap_type3;
    heap_size = sizeof(heap_type3);
    bulk_::async(bulk_::grid<groupsize,grainsize>(num_groups,heap_size,s), scan_detail::exclusive_downsweep(), bulk_::root.this_exec, first, decomp, carries.begin(), result, binary_op);


    (void) groupsize2;
    (void) grainsize2;
  }

  return result + n;
}


}


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
OutputIterator inclusive_scan(execution_policy<DerivedPolicy> &exec,
                              InputIterator first,
                              InputIterator last,
                              OutputIterator result,
                              AssociativeOperator binary_op)
{





  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<InputIterator, 3 == 3>::value) ) >)> thrust_static_assert_typedef_395 __attribute__((unused));

  struct workaround
  {
    __attribute__((host)) __attribute__((device))
    static OutputIterator parallel_path(execution_policy<DerivedPolicy> &exec,
                                        InputIterator first,
                                        InputIterator last,
                                        OutputIterator result,
                                        AssociativeOperator binary_op)
    {
      return thrust::system::cuda::detail::scan_detail::inclusive_scan(exec, first, last, result, binary_op);
    }

    __attribute__((host)) __attribute__((device))
    static OutputIterator sequential_path(execution_policy<DerivedPolicy> &,
                                          InputIterator first,
                                          InputIterator last,
                                          OutputIterator result,
                                          AssociativeOperator binary_op)
    {
      return thrust::inclusive_scan(thrust::seq, first, last, result, binary_op);
    }
  };




  return workaround::sequential_path(exec, first, last, result, binary_op);

}


template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
OutputIterator exclusive_scan(execution_policy<DerivedPolicy> &exec,
                              InputIterator first,
                              InputIterator last,
                              OutputIterator result,
                              T init,
                              AssociativeOperator binary_op)
{





  typedef ::thrust::detail::static_assert_test< sizeof(::thrust::detail::STATIC_ASSERTION_FAILURE< (bool)( (thrust::detail::depend_on_instantiation<InputIterator, 3 == 3>::value) ) >)> thrust_static_assert_typedef_446 __attribute__((unused));

  struct workaround
  {
    __attribute__((host)) __attribute__((device))
    static OutputIterator parallel_path(execution_policy<DerivedPolicy> &exec,
                                        InputIterator first,
                                        InputIterator last,
                                        OutputIterator result,
                                        T init,
                                        AssociativeOperator binary_op)
    {
      return thrust::system::cuda::detail::scan_detail::exclusive_scan(exec, first, last, result, init, binary_op);
    }

    __attribute__((host)) __attribute__((device))
    static OutputIterator sequential_path(execution_policy<DerivedPolicy> &,
                                          InputIterator first,
                                          InputIterator last,
                                          OutputIterator result,
                                          T init,
                                          AssociativeOperator binary_op)
    {
      return thrust::exclusive_scan(thrust::seq, first, last, result, init, binary_op);
    }
  };




  return workaround::sequential_path(exec, first, last, result, init, binary_op);

}


}
}
}
}
# 69 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cuda/detail/scan.h" 2
# 33 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan.h" 2
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/scan.inl" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan_by_key.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan_by_key.h"
       







# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/scan_by_key.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/sequential/scan_by_key.h"
       






namespace thrust
{
namespace system
{
namespace detail
{
namespace sequential
{


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(sequential::execution_policy<DerivedPolicy> &,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred,
                                       BinaryFunction binary_op)
{
  typedef typename thrust::iterator_traits<InputIterator1>::value_type KeyType;
  typedef typename thrust::iterator_traits<OutputIterator>::value_type ValueType;


  thrust::detail::wrapped_function<
    BinaryFunction,
    ValueType
  > wrapped_binary_op(binary_op);

  if(first1 != last1)
  {
    KeyType prev_key = *first1;
    ValueType prev_value = *first2;

    *result = prev_value;

    for(++first1, ++first2, ++result;
        first1 != last1;
        ++first1, ++first2, ++result)
    {
      KeyType key = *first1;

      if(binary_pred(prev_key, key))
        *result = prev_value = wrapped_binary_op(prev_value,*first2);
      else
        *result = prev_value = *first2;

      prev_key = key;
    }
  }

  return result;
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate,
         typename BinaryFunction>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(sequential::execution_policy<DerivedPolicy> &,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred,
                                       BinaryFunction binary_op)
{
  typedef typename thrust::iterator_traits<InputIterator1>::value_type KeyType;
  typedef typename thrust::iterator_traits<OutputIterator>::value_type ValueType;

  if(first1 != last1)
  {
    KeyType temp_key = *first1;
    ValueType temp_value = *first2;

    ValueType next = init;


    *result = next;

    next = binary_op(next, temp_value);

    for(++first1, ++first2, ++result;
        first1 != last1;
        ++first1, ++first2, ++result)
    {
      KeyType key = *first1;


      temp_value = *first2;

      if (!binary_pred(temp_key, key))
        next = init;

      *result = next;
      next = binary_op(next, temp_value);

      temp_key = key;
    }
  }

  return result;
}


}
}
}
}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan_by_key.h" 2


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/scan_by_key.h" 1
# 17 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/cpp/detail/scan_by_key.h"
       
# 29 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/system/detail/adl/scan_by_key.h" 2
# 30 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/scan.inl" 2

namespace thrust
{


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result)
{
  using thrust::system::detail::generic::inclusive_scan;
  return inclusive_scan(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                AssociativeOperator binary_op)
{
  using thrust::system::detail::generic::inclusive_scan;
  return inclusive_scan(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, binary_op);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result)
{
  using thrust::system::detail::generic::exclusive_scan;
  return exclusive_scan(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init)
{
  using thrust::system::detail::generic::exclusive_scan;
  return exclusive_scan(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, init);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator,
         typename OutputIterator,
         typename T,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init,
                                AssociativeOperator binary_op)
{
  using thrust::system::detail::generic::exclusive_scan;
  return exclusive_scan(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first, last, result, init, binary_op);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result)
{
  using thrust::system::detail::generic::inclusive_scan_by_key;
  return inclusive_scan_by_key(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred)
{
  using thrust::system::detail::generic::inclusive_scan_by_key;
  return inclusive_scan_by_key(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result, binary_pred);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator inclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op)
{
  using thrust::system::detail::generic::inclusive_scan_by_key;
  return inclusive_scan_by_key(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result, binary_pred, binary_op);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result)
{
  using thrust::system::detail::generic::exclusive_scan_by_key;
  return exclusive_scan_by_key(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init)
{
  using thrust::system::detail::generic::exclusive_scan_by_key;
  return exclusive_scan_by_key(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result, init);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred)
{
  using thrust::system::detail::generic::exclusive_scan_by_key;
  return exclusive_scan_by_key(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result, init, binary_pred);
}


 #pragma hd_warning_disable
template<typename DerivedPolicy,
         typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate,
         typename AssociativeOperator>
__attribute__((host)) __attribute__((device))
  OutputIterator exclusive_scan_by_key(const thrust::detail::execution_policy_base<DerivedPolicy> &exec,
                                       InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op)
{
  using thrust::system::detail::generic::exclusive_scan_by_key;
  return exclusive_scan_by_key(thrust::detail::derived_cast(thrust::detail::strip_const(exec)), first1, last1, first2, result, init, binary_pred, binary_op);
}


template<typename InputIterator,
         typename OutputIterator>
  OutputIterator inclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::inclusive_scan(select_system(system1,system2), first, last, result);
}


template<typename InputIterator,
         typename OutputIterator,
         typename BinaryFunction>
  OutputIterator inclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                BinaryFunction binary_op)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::inclusive_scan(select_system(system1,system2), first, last, result, binary_op);
}


template<typename InputIterator,
         typename OutputIterator>
  OutputIterator exclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::exclusive_scan(select_system(system1,system2), first, last, result);
}


template<typename InputIterator,
         typename OutputIterator,
         typename T>
  OutputIterator exclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::exclusive_scan(select_system(system1,system2), first, last, result, init);
}


template<typename InputIterator,
         typename OutputIterator,
         typename T,
         typename BinaryFunction>
  OutputIterator exclusive_scan(InputIterator first,
                                InputIterator last,
                                OutputIterator result,
                                T init,
                                BinaryFunction binary_op)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator>::type System1;
  typedef typename thrust::iterator_system<OutputIterator>::type System2;

  System1 system1;
  System2 system2;

  return thrust::exclusive_scan(select_system(system1,system2), first, last, result, init, binary_op);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
  OutputIterator inclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::inclusive_scan_by_key(select_system(system1,system2,system3), first1, last1, first2, result);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate>
  OutputIterator inclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::inclusive_scan_by_key(select_system(system1,system2,system3), first1, last1, first2, result, binary_pred);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename BinaryPredicate,
         typename AssociativeOperator>
  OutputIterator inclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::inclusive_scan_by_key(select_system(system1,system2,system3), first1, last1, first2, result, binary_pred, binary_op);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator>
  OutputIterator exclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::exclusive_scan_by_key(select_system(system1,system2,system3), first1, last1, first2, result);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T>
  OutputIterator exclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::exclusive_scan_by_key(select_system(system1,system2,system3), first1, last1, first2, result, init);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate>
  OutputIterator exclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::exclusive_scan_by_key(select_system(system1,system2,system3), first1, last1, first2, result, init, binary_pred);
}


template<typename InputIterator1,
         typename InputIterator2,
         typename OutputIterator,
         typename T,
         typename BinaryPredicate,
         typename AssociativeOperator>
  OutputIterator exclusive_scan_by_key(InputIterator1 first1,
                                       InputIterator1 last1,
                                       InputIterator2 first2,
                                       OutputIterator result,
                                       T init,
                                       BinaryPredicate binary_pred,
                                       AssociativeOperator binary_op)
{
  using thrust::system::detail::generic::select_system;

  typedef typename thrust::iterator_system<InputIterator1>::type System1;
  typedef typename thrust::iterator_system<InputIterator2>::type System2;
  typedef typename thrust::iterator_system<OutputIterator>::type System3;

  System1 system1;
  System2 system2;
  System3 system3;

  return thrust::exclusive_scan_by_key(select_system(system1,system2,system3), first1, last1, first2, result, init, binary_pred, binary_op);
}


}
# 1564 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/scan.h" 2
# 29 "inverted_index.cuh" 2
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_ptr.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_ptr.h"
       


# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h" 1
# 31 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
namespace thrust
{
# 303 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
pointer<void,DerivedPolicy> malloc(const thrust::detail::execution_policy_base<DerivedPolicy> &system, std::size_t n);
# 341 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
pointer<T,DerivedPolicy> malloc(const thrust::detail::execution_policy_base<DerivedPolicy> &system, std::size_t n);
# 394 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename T, typename DerivedPolicy>
__attribute__((host)) __attribute__((device))
thrust::pair<thrust::pointer<T,DerivedPolicy>, typename thrust::pointer<T,DerivedPolicy>::difference_type>
get_temporary_buffer(const thrust::detail::execution_policy_base<DerivedPolicy> &system, typename thrust::pointer<T,DerivedPolicy>::difference_type n);
# 437 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void free(const thrust::detail::execution_policy_base<DerivedPolicy> &system, Pointer ptr);
# 483 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename DerivedPolicy, typename Pointer>
__attribute__((host)) __attribute__((device))
void return_temporary_buffer(const thrust::detail::execution_policy_base<DerivedPolicy> &system, Pointer p);
# 499 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename Pointer>
__attribute__((host)) __attribute__((device))
inline typename thrust::detail::pointer_traits<Pointer>::raw_pointer
  raw_pointer_cast(const Pointer &ptr);
# 516 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename T>
__attribute__((host)) __attribute__((device))
inline typename detail::raw_reference<T>::type
  raw_reference_cast(T &ref);
# 533 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/memory.h"
template<typename T>
__attribute__((host)) __attribute__((device))
inline typename detail::raw_reference<const T>::type
  raw_reference_cast(const T &ref);





}
# 26 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_ptr.h" 2


namespace thrust
{
# 38 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_ptr.h"
template<typename T> class device_reference;
# 61 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_ptr.h"
template<typename T>
  class device_ptr
    : public thrust::pointer<
               T,
               thrust::device_system_tag,
               thrust::device_reference<T>,
               thrust::device_ptr<T>
             >
{
  private:
    typedef thrust::pointer<
      T,
      thrust::device_system_tag,
      thrust::device_reference<T>,
      thrust::device_ptr<T>
    > super_t;

  public:


    __attribute__((host)) __attribute__((device))
    device_ptr() : super_t() {}







    template<typename OtherT>
    __attribute__((host)) __attribute__((device))
    explicit device_ptr(OtherT *ptr) : super_t(ptr) {}




    template<typename OtherT>
    __attribute__((host)) __attribute__((device))
    device_ptr(const device_ptr<OtherT> &other) : super_t(other) {}





    template<typename OtherT>
    __attribute__((host)) __attribute__((device))
    device_ptr &operator=(const device_ptr<OtherT> &other)
    {
      super_t::operator=(other);
      return *this;
    }
# 122 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_ptr.h"
};







template<class E, class T, class Y>
inline std::basic_ostream<E, T> &operator<<(std::basic_ostream<E, T> &os, const device_ptr<Y> &p);
# 149 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_ptr.h"
template<typename T>
__attribute__((host)) __attribute__((device))
inline device_ptr<T> device_pointer_cast(T *ptr);







template<typename T>
__attribute__((host)) __attribute__((device))
inline device_ptr<T> device_pointer_cast(const device_ptr<T> &ptr);




}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/device_ptr.inl" 1
# 23 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/device_ptr.inl"
# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_reference.h" 1
# 22 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_reference.h"
       






namespace thrust
{
# 185 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_reference.h"
template<typename T>
  class device_reference
    : public thrust::reference<
               T,
               thrust::device_ptr<T>,
               thrust::device_reference<T>
             >
{
  private:
    typedef thrust::reference<
      T,
      thrust::device_ptr<T>,
      thrust::device_reference<T>
    > super_t;

  public:


    typedef typename super_t::value_type value_type;



    typedef typename super_t::pointer pointer;
# 239 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_reference.h"
    template<typename OtherT>
    __attribute__((host)) __attribute__((device))
    device_reference(const device_reference<OtherT> &other,
                     typename thrust::detail::enable_if_convertible<
                       typename device_reference<OtherT>::pointer,
                       pointer
                     >::type * = 0)
      : super_t(other)
    {}
# 278 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_reference.h"
    __attribute__((host)) __attribute__((device))
    explicit device_reference(const pointer &ptr)
      : super_t(ptr)
    {}
# 290 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_reference.h"
    template<typename OtherT>
    __attribute__((host)) __attribute__((device))
    device_reference &operator=(const device_reference<OtherT> &other);







    __attribute__((host)) __attribute__((device))
    device_reference &operator=(const value_type &x);
# 953 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_reference.h"
};





template<typename T>
__attribute__((host)) __attribute__((device))
void swap(device_reference<T> &x, device_reference<T> &y);




}

# 1 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/device_reference.inl" 1
# 25 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/device_reference.inl"
namespace thrust
{

template<typename T>
  template<typename OtherT>
    device_reference<T> &
      device_reference<T>
        ::operator=(const device_reference<OtherT> &other)
{
  return super_t::operator=(other);
}

template<typename T>
  device_reference<T> &
    device_reference<T>
      ::operator=(const value_type &x)
{
  return super_t::operator=(x);
}

template<typename T>
__attribute__((host)) __attribute__((device))
void swap(device_reference<T> &a, device_reference<T> &b)
{
  a.swap(b);
}

}
# 969 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_reference.h" 2
# 24 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/device_ptr.inl" 2





namespace thrust
{

template<typename T>
  device_ptr<T> device_pointer_cast(T *ptr)
{
  return device_ptr<T>(ptr);
}

template<typename T>
  device_ptr<T> device_pointer_cast(const device_ptr<T> &ptr)
{
  return ptr;
}


template<class E, class T, class Y>
  std::basic_ostream<E, T> &operator<<(std::basic_ostream<E, T> &os, const device_ptr<Y> &p)
{
  return os << p.get();
}


namespace detail
{

template<typename T>
  struct is_device_ptr< thrust::device_ptr<T> >
    : public true_type
{
};
# 72 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/detail/device_ptr.inl"
}
}
# 169 "/usr/local/cuda-7.0/bin/../targets/x86_64-linux/include/thrust/device_ptr.h" 2
# 30 "inverted_index.cuh" 2






struct InvertedIndex {
    int *d_index;
    int *d_count;
    Entry *d_inverted_index;
    float *d_norms;
    float *d_normsl1;

    int num_docs;
    int num_entries;
    int num_terms;

    __attribute__((host)) __attribute__((device)) InvertedIndex(Entry *d_inverted_index = __null, int *d_index = __null, int *d_count = __null, float *d_norms = __null, float *d_normsl1 = __null, int num_docs = 0, int num_entries = 0, int num_terms = 0) :
        d_inverted_index(d_inverted_index),
        d_index(d_index),
        d_count(d_count),
        d_norms(d_norms),
        d_normsl1(d_normsl1),
        num_docs(num_docs),
        num_entries(num_entries),
        num_terms(num_terms)
    {}
};

extern "C"
__attribute__((host)) InvertedIndex make_inverted_index(int num_docs, int num_terms, Entry * entries, int n_entries);

__attribute__((host)) InvertedIndex make_inverted_index(int num_docs, int num_terms, std::vector<Entry> &entries);

__attribute__((global)) void count_occurrences(Entry *entries, int *count, int n);

__attribute__((global)) void mount_inverted_index_and_compute_tf_idf(Entry *entries, Entry *inverted_index, int *count, int *index, float *d_norms, float *d_normsl1, int n, int num_docs);
# 38 "main.cu" 2
# 1 "knn.cuh" 1
# 31 "knn.cuh"
# 1 "inverted_index.cuh" 1
# 32 "knn.cuh" 2

__attribute__((global)) void calculateDistances(InvertedIndex inverted_index, Entry *d_query, int *index, cuSimilarity *dist, int D);

__attribute__((global)) void bitonicPartialSort(cuSimilarity *dist, cuSimilarity *nearestK, int N, int K);

__attribute__((global)) void get_term_count_and_tf_idf(InvertedIndex inverted_index, Entry *query, int *count, float *qnorm, float *qnorml1, int N);


extern "C"
__attribute__((host)) cuSimilarity* KNN(InvertedIndex inverted_index, Entry *query, int K, int query_size, struct DeviceVariables *dev_vars);

__attribute__((host)) cuSimilarity* KNN(InvertedIndex inverted_index, std::vector<Entry> &query, int K,
                         void (*distance)(InvertedIndex, Entry*, int*, cuSimilarity*, int D), struct DeviceVariables *dev_vars);

__attribute__((device)) void bitonicPartialSort(cuSimilarity *dist, int N, int K);

__attribute__((device)) void bitonicPartialMerge(cuSimilarity *dist, cuSimilarity *nearestK, int N, int K);

__attribute__((device)) void initDistances(cuSimilarity *dist, int offset, int N);

__attribute__((device)) void calculateDistancesDevice(InvertedIndex inverted_index, Entry *d_query, int *index, cuSimilarity *dist, int D);
# 39 "main.cu" 2
# 1 "cuda_distances.cuh" 1
# 32 "cuda_distances.cuh"
# 1 "inverted_index.cuh" 1
# 33 "cuda_distances.cuh" 2





extern "C"
__attribute__((host)) void CosineDistance(InvertedIndex inverted_index, Entry *d_query, int *index, cuSimilarity *dist, int D);

__attribute__((global)) void initDistancesCosine(InvertedIndex inverted_index, cuSimilarity *dist);

__attribute__((device)) void initDistancesCosineDevice(cuSimilarity *dist, int offset, int N);

__attribute__((global)) void calculateDistancesCosine(InvertedIndex inverted_index, Entry *d_query, int *index, cuSimilarity *dist, int D);




extern "C"
__attribute__((host)) void EuclideanDistance(InvertedIndex inverted_index, Entry *d_query, int *index, cuSimilarity *dist, int D);

__attribute__((global)) void initDistancesEuclidean(InvertedIndex inverted_index, cuSimilarity *dist);

__attribute__((device)) void initDistancesEuclideanDevice(float *d_norms, cuSimilarity *dist, int offset, int N);

__attribute__((global)) void calculateDistancesEuclidean(InvertedIndex inverted_index, Entry *d_query, int *index, cuSimilarity *dist, int D);

__attribute__((global)) void calculateDistancesManhattan(InvertedIndex inverted_index, Entry *d_query, int *index, cuSimilarity *dist, int D);

extern "C"
__attribute__((host)) void ManhattanDistance(InvertedIndex inverted_index, Entry *d_query, int *index, cuSimilarity *dist, int D);

__attribute__((global)) void initDistancesManhattan(InvertedIndex inverted_index, cuSimilarity *dist);

__attribute__((device)) void initDistancesManhattanDevice(float *d_norms, cuSimilarity *dist, int offset, int N);
# 40 "main.cu" 2


# 1 "/usr/include/c++/4.8/map" 1 3
# 58 "/usr/include/c++/4.8/map" 3
       
# 59 "/usr/include/c++/4.8/map" 3

# 1 "/usr/include/c++/4.8/bits/stl_tree.h" 1 3
# 69 "/usr/include/c++/4.8/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 89 "/usr/include/c++/4.8/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
      _Val _M_value_field;







    };

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();

  __attribute__ ((__pure__)) const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x)
      : _M_node(__x) { }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Link_type __x)
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it)
      : _M_node(__it._M_node) { }

      iterator
      _M_const_cast() const
      { return iterator(static_cast<typename iterator::_Link_type>
   (const_cast<typename iterator::_Base_ptr>(_M_node))); }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return std::__addressof(static_cast<_Link_type>
    (_M_node)->_M_value_field); }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header) throw ();

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header) throw ();


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename _Alloc::template rebind<_Rb_tree_node<_Val> >::other
              _Node_allocator;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator()
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _M_impl._Node_allocator::allocate(1); }

      void
      _M_put_node(_Link_type __p)
      { _M_impl._Node_allocator::deallocate(__p, 1); }


      _Link_type
      _M_create_node(const value_type& __x)
      {
 _Link_type __tmp = _M_get_node();
 try
   { get_allocator().construct
       (std::__addressof(__tmp->_M_value_field), __x); }
 catch(...)
   {
     _M_put_node(__tmp);
     throw;
   }
 return __tmp;
      }

      void
      _M_destroy_node(_Link_type __p)
      {
 get_allocator().destroy(std::__addressof(__p->_M_value_field));
 _M_put_node(__p);
      }
# 426 "/usr/include/c++/4.8/bits/stl_tree.h" 3
      _Link_type
      _M_clone_node(_Const_Link_type __x)
      {
 _Link_type __tmp = _M_create_node(__x->_M_value_field);
 __tmp->_M_color = __x->_M_color;
 __tmp->_M_left = 0;
 __tmp->_M_right = 0;
 return __tmp;
      }

    protected:
      template<typename _Key_compare,
        bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }
# 462 "/usr/include/c++/4.8/bits/stl_tree.h" 3
 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root()
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost()
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost()
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin()
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end()
      { return reinterpret_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const
      { return reinterpret_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return __x->_M_value_field; }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:
      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_unique_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_equal_pos(const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_unique_pos(const_iterator __pos,
        const key_type& __k);

      pair<_Base_ptr, _Base_ptr>
      _M_get_insert_hint_equal_pos(const_iterator __pos,
       const key_type& __k);
# 611 "/usr/include/c++/4.8/bits/stl_tree.h" 3
      iterator
      _M_insert_(_Base_ptr __x, _Base_ptr __y,
   const value_type& __v);



      iterator
      _M_insert_lower(_Base_ptr __y, const value_type& __v);

      iterator
      _M_insert_equal_lower(const value_type& __x);


      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, _Node_allocator(__a)) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }





      ~_Rb_tree()
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin()
      {
 return iterator(static_cast<_Link_type>
   (this->_M_impl._M_header._M_left));
      }

      const_iterator
      begin() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (this->_M_impl._M_header._M_left));
      }

      iterator
      end()
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }

      const_iterator
      end() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (&this->_M_impl._M_header));
      }

      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }

      bool
      empty() const
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const
      { return _M_impl._M_node_count; }

      size_type
      max_size() const
      { return _M_get_Node_allocator().max_size(); }

      void
      swap(_Rb_tree& __t);
# 771 "/usr/include/c++/4.8/bits/stl_tree.h" 3
      pair<iterator, bool>
      _M_insert_unique(const value_type& __x);

      iterator
      _M_insert_equal(const value_type& __x);

      iterator
      _M_insert_unique_(const_iterator __position, const value_type& __x);

      iterator
      _M_insert_equal_(const_iterator __position, const value_type& __x);


      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

    private:
      void
      _M_erase_aux(const_iterator __position);

      void
      _M_erase_aux(const_iterator __first, const_iterator __last);

    public:
# 824 "/usr/include/c++/4.8/bits/stl_tree.h" 3
      void
      erase(iterator __position)
      { _M_erase_aux(__position); }

      void
      erase(const_iterator __position)
      { _M_erase_aux(__position); }

      size_type
      erase(const key_type& __x);
# 846 "/usr/include/c++/4.8/bits/stl_tree.h" 3
      void
      erase(iterator __first, iterator __last)
      { _M_erase_aux(__first, __last); }

      void
      erase(const_iterator __first, const_iterator __last)
      { _M_erase_aux(__first, __last); }

      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear()
      {
        _M_erase(_M_begin());
        _M_leftmost() = _M_end();
        _M_root() = 0;
        _M_rightmost() = _M_end();
        _M_impl._M_node_count = 0;
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      bool
      __rb_verify() const;
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }
# 984 "/usr/include/c++/4.8/bits/stl_tree.h" 3
  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
    {
      if (this != &__x)
 {

   clear();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end());
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_(_Base_ptr __x, _Base_ptr __p, const _Val& __v)

    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_KeyOfValue()(__v),
            _S_key(__p)));

      _Link_type __z = _M_create_node((__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_lower(_Base_ptr __p, const _Val& __v)

    {
      bool __insert_left = (__p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node((__v));

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_equal_lower(const _Val& __v)

    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__y, (__v));
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    _M_copy(_Const_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      try
 {
   if (__x->_M_right)
     __top->_M_right = _M_copy(_S_right(__x), __top);
   __p = __top;
   __x = _S_left(__x);

   while (__x != 0)
     {
       _Link_type __y = _M_clone_node(__x);
       __p->_M_left = __y;
       __y->_M_parent = __p;
       if (__x->_M_right)
  __y->_M_right = _M_copy(_S_right(__x), __y);
       __p = __y;
       __x = _S_left(__x);
     }
 }
      catch(...)
 {
   _M_erase(__top);
   throw;
 }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_destroy_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)
    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();

       __t._M_root() = 0;
       __t._M_leftmost() = __t._M_end();
       __t._M_rightmost() = __t._M_end();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();

   _M_root() = 0;
   _M_leftmost() = _M_end();
   _M_rightmost() = _M_end();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
 }

      std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);



      std::__alloc_swap<_Node_allocator>::
 _S_do_it(_M_get_Node_allocator(), __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_unique_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(__k, _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return _Res(__x, __y);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 return _Res(__x, __y);
      return _Res(__j._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_equal_pos(const key_type& __k)
    {
      typedef pair<_Base_ptr, _Base_ptr> _Res;
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _Res(__x, __y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_unique(const _Val& __v)

    {
      typedef pair<iterator, bool> _Res;
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_unique_pos(_KeyOfValue()(__v));

      if (__res.second)
 return _Res(_M_insert_(__res.first, __res.second,
          (__v)),
      true);

      return _Res(iterator(static_cast<_Link_type>(__res.first)), false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_equal(const _Val& __v)

    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_equal_pos(_KeyOfValue()(__v));
      return _M_insert_(__res.first, __res.second, (__v));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_unique_pos(const_iterator __position,
      const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _M_get_insert_unique_pos(__k);
 }
      else

 return _Res(__pos._M_node, 0);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_unique_(const_iterator __position, const _Val& __v)

    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     (__v));
      return iterator(static_cast<_Link_type>(__res.first));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr,
         typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::_Base_ptr>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
    {
      iterator __pos = __position._M_const_cast();
      typedef pair<_Base_ptr, _Base_ptr> _Res;


      if (__pos._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
     return _Res(0, _M_rightmost());
   else
     return _M_get_insert_equal_pos(__k);
 }
      else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 {

   iterator __before = __pos;
   if (__pos._M_node == _M_leftmost())
     return _Res(_M_leftmost(), _M_leftmost());
   else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _Res(0, __before._M_node);
       else
  return _Res(__pos._M_node, __pos._M_node);
     }
   else
     return _M_get_insert_equal_pos(__k);
 }
      else
 {

   iterator __after = __pos;
   if (__pos._M_node == _M_rightmost())
     return _Res(0, _M_rightmost());
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
     {
       if (_S_right(__pos._M_node) == 0)
  return _Res(0, __pos._M_node);
       else
  return _Res(__after._M_node, __after._M_node);
     }
   else
     return _Res(0, 0);
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>



    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    _M_insert_equal_(const_iterator __position, const _Val& __v)

    {
      pair<_Base_ptr, _Base_ptr> __res
 = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));

      if (__res.second)
 return _M_insert_(__res.first, __res.second,
     (__v));

      return _M_insert_equal_lower((__v));
    }
# 1714 "/usr/include/c++/4.8/bits/stl_tree.h" 3
  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase_aux(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  __attribute__ ((__pure__)) unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root) throw ();

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }


}
# 61 "/usr/include/c++/4.8/map" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_map.h" 1 3
# 66 "/usr/include/c++/4.8/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 94 "/usr/include/c++/4.8/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

     

    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()
      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 180 "/usr/include/c++/4.8/bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 223 "/usr/include/c++/4.8/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 240 "/usr/include/c++/4.8/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_unique(__first, __last); }
# 263 "/usr/include/c++/4.8/bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 309 "/usr/include/c++/4.8/bits/stl_map.h" 3
      allocator_type
      get_allocator() const
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }
# 428 "/usr/include/c++/4.8/bits/stl_map.h" 3
      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 455 "/usr/include/c++/4.8/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))





          __i = insert(__i, value_type(__k, mapped_type()));

 return (*__i).second;
      }
# 500 "/usr/include/c++/4.8/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 593 "/usr/include/c++/4.8/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }
# 642 "/usr/include/c++/4.8/bits/stl_map.h" 3
      iterator



      insert(iterator __position, const value_type& __x)

      { return _M_t._M_insert_unique_(__position, __x); }
# 668 "/usr/include/c++/4.8/bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 709 "/usr/include/c++/4.8/bits/stl_map.h" 3
      void
      erase(iterator __position)
      { _M_t.erase(__position); }
# 725 "/usr/include/c++/4.8/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 761 "/usr/include/c++/4.8/bits/stl_map.h" 3
      void
      erase(iterator __first, iterator __last)
      { _M_t.erase(__first, __last); }
# 777 "/usr/include/c++/4.8/bits/stl_map.h" 3
      void
      swap(map& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 820 "/usr/include/c++/4.8/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 835 "/usr/include/c++/4.8/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 847 "/usr/include/c++/4.8/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 862 "/usr/include/c++/4.8/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 877 "/usr/include/c++/4.8/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 916 "/usr/include/c++/4.8/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 935 "/usr/include/c++/4.8/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 960 "/usr/include/c++/4.8/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 977 "/usr/include/c++/4.8/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 62 "/usr/include/c++/4.8/map" 2 3
# 1 "/usr/include/c++/4.8/bits/stl_multimap.h" 1 3
# 64 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default")))
{

# 92 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

     

    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;






      multimap()
      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, _Pair_alloc_type(__a)) { }
# 177 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 218 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 234 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
 : _M_t(__comp, _Pair_alloc_type(__a))
        { _M_t._M_insert_equal(__first, __last); }
# 257 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 303 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      allocator_type
      get_allocator() const
      { return allocator_type(_M_t.get_allocator()); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }
# 420 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 500 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }
# 533 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      iterator



      insert(iterator __position, const value_type& __x)

      { return _M_t._M_insert_equal_(__position, __x); }
# 560 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 614 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      void
      erase(iterator __position)
      { _M_t.erase(__position); }
# 630 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 670 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      void
      erase(iterator __first, iterator __last)
      { _M_t.erase(__first, __last); }
# 686 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      void
      swap(multimap& __x)
      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 729 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 744 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }






      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 768 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 783 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 820 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 837 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 862 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 879 "/usr/include/c++/4.8/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }


}
# 63 "/usr/include/c++/4.8/map" 2 3
# 43 "main.cu" 2
using namespace std;

struct FileStats {
    int num_docs;
    int num_terms;

    std::map<int, int> doc_to_class;

    FileStats() : num_docs(0), num_terms(0) {}
};

FileStats readTrainingFile(std::string &file, std::vector<Entry> &entries);
void readTest(std::string &filename, vector<string>& inputs);
void updateStatsMaxFeatureTest(FileStats &stats, vector<string>& inputs);

void processTestFile(InvertedIndex &index, FileStats &stats, vector<string>& input,
 string &file, int K, std::string distance, stringstream &fileout, stringstream &filedists);
bool makeQuery(InvertedIndex &inverted_index, FileStats &stats, std::string &line, int K,
 void(*distance)(InvertedIndex, Entry*, int*, cuSimilarity*, int D), stringstream &fileout,
 stringstream &filedists, DeviceVariables *dev_vars);

int get_class(std::string token);






static int num_tests = 0;
static int correct_l2 = 0, correct_cosine = 0, correct_l1 = 0;
static int wrong_l2 = 0, wrong_cosine = 0, wrong_l1 = 0;
int biggestQuerySize = -1;


int main(int argc, char **argv) {

 if (argc != 8) {
  std::cerr << "Wrong parameters. Correct usage: <executable> <training_file> <test_file> <k> <cosine | l2 | l1> <output_classifications_file> <output_distances_file> <gpu_number>" << std::endl;
  exit(1);
 }

 int gpuNum;
 cudaGetDeviceCount(&gpuNum);

 if (gpuNum > atoi(argv[7])){
  gpuNum = atoi(argv[7]);
  if (gpuNum < 1)
   gpuNum = 1;
 }
 std::cerr << "Using " << gpuNum << "GPUs" << endl;

    omp_set_num_threads(gpuNum);


 ofstream ofsf1(argv[5], ofstream::trunc);
 ofstream ofsf2(argv[6], ofstream::trunc);
 ofsf1.close();
 ofsf2.close();

 ofstream ofsfileoutput(argv[5], ofstream::out | ofstream::app);
 ofstream ofsfiledistances(argv[6], ofstream::out | ofstream::app);

 vector<string> inputs;
 double starts, ends;

 std::string trainingFileName(argv[1]);
 std::string testFileName(argv[2]);

 printf("Reading files...\n");
 std::vector<Entry> entriess;
 starts = gettime();
 FileStats statss = readTrainingFile(trainingFileName, entriess);
 readTest(testFileName, inputs);
 updateStatsMaxFeatureTest(statss, inputs);
 ends = gettime();

 printf("time taken: %lf seconds\n", ends - starts);


 vector<stringstream*> outputClassString, outputDistanceString;

 for (int i = 0; i < gpuNum; i++){
  outputClassString.push_back(new stringstream);
  outputDistanceString.push_back(new stringstream);
 }

#pragma omp parallel shared(inputs) shared(outputClassString) shared(outputDistanceString)
    {
     int cpuid = omp_get_thread_num();
     cudaSetDevice(cpuid);

  int k = atoi(argv[3]);
  std::string distanceFunction(argv[4]);

  std::vector<Entry>& entries = entriess;
  double start, end;

  FileStats stats = statss;

  start = gettime();
  InvertedIndex inverted_index = make_inverted_index(stats.num_docs, stats.num_terms, entries);
  end = gettime();

#pragma omp single nowait
  printf("Total time taken for insertion: %lf seconds\n", end - start);

  processTestFile(inverted_index, stats, inputs, testFileName, k,
   distanceFunction, *outputClassString[cpuid], *outputDistanceString[cpuid]);

  __gpuAssert((cudaDeviceReset()),(152),("main.cu"));

 }
 starts = gettime();
 for (int i = 0; i < gpuNum; i++){
  ofsfileoutput << outputClassString[i]->str();
  ofsfiledistances << outputDistanceString[i]->str();
 }
 ends = gettime();

 printf("time taken to write output: %lf seconds\n", ends - starts);

 ofsfileoutput.close();
 ofsfiledistances.close();
    return 0;
}

FileStats readTrainingFile(std::string &filename, std::vector<Entry> &entries) {
    std::ifstream input(filename.c_str());
    std::string line;

    FileStats stats;

    while(!input.eof()) {
        std::getline(input, line);
        if(line == "") continue;

        int doc_id = stats.num_docs++;
        std::vector<std::string> tokens = split(line, ' ');

        stats.doc_to_class[doc_id] = get_class(tokens[1]);

        for(int i = 2, size = tokens.size(); i + 1 < size; i+=2) {
            int term_id = atoi(tokens[i].c_str());
            int term_count = atoi(tokens[i+1].c_str());
            stats.num_terms = std::max(stats.num_terms, term_id + 1);
            entries.push_back(Entry(doc_id, term_id, term_count));
        }
    }

    input.close();

    return stats;
}

extern "C"
void csr2entries(float* data, int* indices, int* indptr, int nnz, int n, int n_gpu){

 int gpuNum;
 cudaGetDeviceCount(&gpuNum);

 if (gpuNum > n_gpu){
  gpuNum = n_gpu;
  if (gpuNum < 1)
   gpuNum = 1;
 }

 std::vector<std::pair<int, int> > intervals;

 for (int i = 0; i < n - 1; ++i)
 {
  intervals.push_back(std::make_pair(indptr[i], indptr[i + 1]));
 }
# 237 "main.cu"
#pragma opm parallel for num_threads(8)
 for (int i = 0; i < intervals.size(); ++i)
 {
  for (int i = 0; i < 100000; ++i)
  {
   int s = (1+1)*1000/283.0;
  }
 }
}

extern "C"
InvertedIndex* make_inverted_indices(int num_docs, int num_terms, Entry * entries, int n_entries, int n_gpu){

 int gpuNum;
 cudaGetDeviceCount(&gpuNum);

 if (gpuNum > n_gpu){
  gpuNum = n_gpu;
  if (gpuNum < 1)
   gpuNum = 1;
 }

 std::cerr << "Using " << gpuNum << "GPUs" << endl;

    omp_set_num_threads(gpuNum);

 InvertedIndex* indices = new InvertedIndex[n_gpu];

#pragma omp parallel shared(entries) shared(indices)
    {
     int cpuid = omp_get_thread_num();
     cudaSetDevice(cpuid);

  double start, end;

  start = gettime();
  indices[cpuid] = make_inverted_index(num_docs, num_terms, entries, n_entries);
  end = gettime();

#pragma omp single nowait
  printf("Total time taken for insertion: %lf seconds\n", end - start);
 }

 return indices;
}

void readTest(std::string &filename, vector<string>& inputs) {
    std::ifstream input(filename.c_str());
    std::string line;

    while(!input.eof()) {
        std::getline(input, line);
        if(line == "") continue;
  num_tests++;
  inputs.push_back(line);
    }
}

void updateStatsMaxFeatureTest(FileStats &stats, vector<string>& inputs) {

#pragma omp parallel num_threads(4)
   {
    int localBiggest = -1;
    int localNumterms = stats.num_terms;
#pragma omp for
  for(int i = 0; i < inputs.size(); i++) {

   std::vector<std::string> tokens = split(inputs[i], ' ');

   localBiggest= std::max((int)tokens.size() / 2, localBiggest);
   for(int i = 2, size = tokens.size(); i + 1 < size; i+=2) {
    int term_id = atoi(tokens[i].c_str());
    localNumterms = std::max(localNumterms, term_id + 1);
   }
  }

#pragma omp critical
  {
   stats.num_terms = std::max(localNumterms, stats.num_terms);
   biggestQuerySize = std::max( biggestQuerySize, localBiggest);
  }

 }
}

void initDeviceVariables(DeviceVariables *dev_vars, int K, int num_docs){

 int KK = 1;
    while(KK < K) KK <<= 1;

    dim3 grid, threads;

    get_grid_config(grid, threads);

 __gpuAssert((cudaMalloc(&dev_vars->d_dist, num_docs * sizeof(cuSimilarity))),(331),("main.cu"));
 __gpuAssert((cudaMalloc(&dev_vars->d_nearestK, KK * grid.x * sizeof(cuSimilarity))),(332),("main.cu"));
 __gpuAssert((cudaMalloc(&dev_vars->d_query, biggestQuerySize * sizeof(Entry))),(333),("main.cu"));
 __gpuAssert((cudaMalloc(&dev_vars->d_index, biggestQuerySize * sizeof(int))),(334),("main.cu"));
 __gpuAssert((cudaMalloc(&dev_vars->d_count, biggestQuerySize * sizeof(int))),(335),("main.cu"));
 __gpuAssert((cudaMalloc(&dev_vars->d_qnorms, 2 * sizeof(float))),(336),("main.cu"));

}

void freeDeviceVariables(DeviceVariables *dev_vars, InvertedIndex &index){
 __gpuAssert((cudaFree(dev_vars->d_dist)),(341),("main.cu"));
 __gpuAssert((cudaFree(dev_vars->d_nearestK)),(342),("main.cu"));
 __gpuAssert((cudaFree(dev_vars->d_query)),(343),("main.cu"));
 __gpuAssert((cudaFree(dev_vars->d_index)),(344),("main.cu"));
 __gpuAssert((cudaFree(dev_vars->d_count)),(345),("main.cu"));
 __gpuAssert((cudaFree(dev_vars->d_qnorms)),(346),("main.cu"));

 __gpuAssert((cudaFree(index.d_count)),(348),("main.cu"));
 __gpuAssert((cudaFree(index.d_index)),(349),("main.cu"));
 __gpuAssert((cudaFree(index.d_inverted_index)),(350),("main.cu"));
 __gpuAssert((cudaFree(index.d_norms)),(351),("main.cu"));
 __gpuAssert((cudaFree(index.d_normsl1)),(352),("main.cu"));

}

void processTestFile(InvertedIndex &index, FileStats &stats, vector<string>& input_t,
 std::string &filename, int K, std::string distance, stringstream &outputfile, stringstream &outputdists) {

    int num_test_local = 0, i;

 printf("Processing test file %s...\n", filename.c_str());

 DeviceVariables dev_vars;

 initDeviceVariables(&dev_vars, K, index.num_docs);

 double start = gettime();

#pragma omp for
 for (i = 0; i < input_t.size();i++){

  num_test_local++;

  if(distance == "cosine" || distance == "both") {
   if (makeQuery(index, stats, input_t[i], K, CosineDistance, outputfile, outputdists,&dev_vars)) {
#pragma omp atomic
               correct_cosine++;
              } else {
#pragma omp atomic
                  wrong_cosine++;
              }
         }

         if(distance == "l2" || distance == "both") {

   if (makeQuery(index, stats, input_t[i], K, EuclideanDistance, outputfile, outputdists,&dev_vars)) {
#pragma omp atomic
               correct_l2++;
              } else {
#pragma omp atomic
               wrong_l2++;
              }
         }

  if(distance == "l1" || distance == "both") {
   if (makeQuery(index, stats, input_t[i], K, ManhattanDistance, outputfile, outputdists,&dev_vars)) {
#pragma omp atomic
               correct_l1++;
              } else {
#pragma omp atomic
               wrong_l1++;
              }
  }

  input_t[i].clear();
 }

 freeDeviceVariables(&dev_vars, index);

 printf("num tests in thread %d: %d\n", omp_get_thread_num(), num_test_local);

#pragma omp barrier

 double end = gettime();

#pragma omp master
 printf("Total num tests %d\n", num_tests);

#pragma omp master
     {
  printf("Time taken for %d queries: %lf seconds\n\n", num_tests, end - start);

  if(distance == "cosine" || distance == "both") {
   printf("Cosine cuSimilarity\n");
   printf("Correct: %d Wrong: %d\n", correct_cosine, wrong_cosine);
   printf("Accuracy: %lf%%\n\n", double(correct_cosine) / double(num_tests));
  }

  if(distance == "l2" || distance == "both") {
   printf("L2 distance\n");
   printf("Correct: %d Wrong: %d\n", correct_l2, wrong_l2);
   printf("Accuracy: %lf%%\n\n", double(correct_l2) / double(num_tests));
  }

  if(distance == "l1" || distance == "both") {
   printf("L1 distance\n");
   printf("Correct: %d Wrong: %d\n", correct_l1, wrong_l1);
   printf("Accuracy: %lf%%\n\n", double(correct_l1) / double(num_tests));
  }
    }
}



bool makeQuery(InvertedIndex &inverted_index, FileStats &stats, std::string &line, int K,
 void(*distance)(InvertedIndex, Entry*, int*, cuSimilarity*, int D),
 stringstream &outputfile, stringstream &outputdists, DeviceVariables *dev_vars) {

    std::vector<Entry> query;
    std::vector<std::string> tokens = split(line, ' ');

    int trueclass = get_class(tokens[1]);
    int docid = atoi(tokens[0].c_str());

    for(int i = 2, size = tokens.size(); i + 1 < size; i+=2) {
        int term_id = atoi(tokens[i].c_str());
        int term_count = atoi(tokens[i+1].c_str());

        query.push_back(Entry(0, term_id, term_count));
    }


    if(query.empty()) {
        query.push_back(Entry(0, 0, 0));
    }

    cuSimilarity *k_nearest = KNN(inverted_index, query, K, distance, dev_vars);
    std::map<int, int> vote_count;
 std::map<int, int>::iterator it;

 for (int i = 0; i < K; i++) {
  cuSimilarity &sim = k_nearest[i];
  vote_count[stats.doc_to_class[sim.doc_id]]++;
  outputdists << sim.distance << " ";
 }

 outputdists << std::endl;
 free(k_nearest);

    int guessed_class = -1;
    int max_votes = 0;

    for(it = vote_count.begin(); it != vote_count.end(); it++) {
        if(it->second > max_votes) {
            max_votes = it->second;
            guessed_class = it->first;
        }
    }

 outputfile << docid << " CLASS=" << trueclass << " CLASS=" << guessed_class << ":1" << std::endl;

    return trueclass == guessed_class;
}

int get_class(std::string token) {
    std::vector<std::string> class_tokens = split(token, '=');

    if(class_tokens.size() == 1) {
        return atoi(class_tokens[0].c_str());
    } else {
        return atoi(class_tokens[1].c_str());
    }
}
